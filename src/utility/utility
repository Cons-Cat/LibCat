// -*- mode: c++;-*-
#pragma once

#include <type_traits>

namespace std {

template <typename T>
[[nodiscard]] constexpr auto move(T&& arg) ->
    typename remove_reference<T>::type&& {
    return static_cast<typename remove_reference<T>::type&&>(arg);
}

template <typename T>
[[nodiscard]] constexpr auto forward(typename remove_reference<T>::type& t)
    -> T&& {
    return static_cast<T&&>(t);
}

template <typename T>
[[nodiscard]] constexpr auto forward(typename remove_reference<T>::type&& t)
    -> T&& {
    return static_cast<T&&>(t);
}

}  // namespace std
