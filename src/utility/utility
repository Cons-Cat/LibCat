// -*- mode: c++;-*-
#pragma once

#include <type_traits>

namespace std {

template <typename T>
constexpr auto move(T&& input) -> remove_reference_t<T> {
    return static_cast<remove_reference_t<T>&&>(input);
}

template <typename T>
[[nodiscard]] constexpr auto forward(remove_reference_t<T>& input) -> T&& {
    return static_cast<T&&>(input);
}

template <typename T>
[[nodiscard]] constexpr auto forward(remove_reference_t<T>&& input) -> T&& {
    return static_cast<T&&>(input);
}

}  // namespace std
