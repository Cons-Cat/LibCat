// -*- mode: c++;-*-
#pragma once

#include <detail/simd.hpp>

/* This library follows the same assumptions as the GNU LibC. These type
 * definitions are accurate for all implementations of GCC, currently, across
 * all environments.
 *
 * In addition to the standard fixed-width numerical data types, more modern
 * flavored types are provided. */

using int8_t = signed char;
using i8 = int8_t;
using uint8_t = unsigned char;
using u8 = uint8_t;

using int16_t = signed short int;
using i16 = int16_t;
using uint16_t = unsigned short int;
using u16 = uint16_t;

using int32_t = signed int;
using i32 = int32_t;
using uint32_t = unsigned int;
using u32 = uint32_t;

#if defined __x86_64__ && !defined __ILP32__
using int64_t = long signed int;
using uint64_t = long unsigned int;
using ssize_t = int64_t;
using size_t = uint64_t;
#else
using int64_t = long long signed int;
using uint64_t = long long unsigned int;
using ssize_t = int32_t;
using size_t = uint32_t;
#endif

using i64 = int64_t;
using u64 = uint64_t;
using isize = ssize_t;
using usize = size_t;

// These are GCC built-in types:
// using f16 = _Float16;
using f32 = float;
using f64 = double;
using f128 = __float128;
using x128 = float __attribute__((mode(TC))) _Complex;

using bool8 = u8;
using bool16 = u16;
using bool32 = u32;

/* #include this here, so that the only -include build flag required is for
 *<cstdint>. */
#include <detail/vector_primitives.hpp>
