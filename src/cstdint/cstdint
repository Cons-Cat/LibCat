// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

/* This library follows the same assumptions as the GNU LibC. These type
 * definitions are accurate for all implementations of GCC, currently, across
 * all environments.
 *
 * In addition to the standard fixed-width numerical data types, more modern
 * flavored types are provided. */

namespace std {

namespace detail::ints {
    using int8_t = signed char;
    using uint8_t = unsigned char;
    using int16_t = signed short int;
    using uint16_t = unsigned short int;
    using int32_t = signed int;
    using uint32_t = unsigned int;
    // This assumes that it builds to x86-64, rather than 32-bit x86:
    using int64_t = long signed int;
    using uint64_t = long unsigned int;
    using ssize_t = int64_t;
    using size_t = uint64_t;
}  // namespace detail::ints

// Make LibC ints available in the std:: namespace.
using namespace std::detail::ints;
}  // namespace std

// Make LibC ints available in the global namespace.
using namespace std::detail::ints;

using i8 = int8_t;
using u8 = uint8_t;

using i16 = int16_t;
using u16 = uint16_t;

using i32 = int32_t;
using u32 = uint32_t;

using i64 = int64_t;
using u64 = uint64_t;
using isize = ssize_t;
using usize = size_t;

// These are GCC built-in types:
// using f16 = _Float16;
using f32 = float;
using f64 = double;
using f128 = __float128;
using x128 = float __attribute__((mode(TC))) _Complex;

using bool8 = u8;
using bool16 = u16;
using bool32 = u32;

/* #include these here, so that the only -include build flag required is for
 * <cstdint>. */
#include <detail/simd.hpp>
#include <detail/vector_primitives.hpp>
