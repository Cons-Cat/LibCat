// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <concepts>
#include <memory>
#include <utility>

namespace std {

template <typename T = isize>
constexpr auto string_length(char const* p_string) -> T;

}  // namespace std

// Deprecated call to `memcpy()`. Consider using `std::copy_buffer()` instead.
// This uses a non-idiomatic type `size_t` to be semantically equivalent with
// libC.
auto memcpy(void* p_destination, void const* p_source, size_t bytes) -> void*;

struct StringView {
    using Detail = struct {
        char const* p_data;
        isize length;
    };
    Detail detail;

    StringView() = delete;
    constexpr StringView(char const* p_string)
        : detail{.p_data = p_string, .length = std::string_length(p_string)} {};
    constexpr StringView(StringView const&& string) : detail(string.detail){};

    auto data() const -> char const* {
        return this->detail.p_data;
    }

    auto length() const -> isize {
        return this->detail.length;
    }
};

namespace std {

auto compare_strings(StringView const& string_1, StringView const& string_2)
    -> bool;

// TODO: Make a comparison function for null-terminated string pointers.

}  // namespace std

#include "./implementations/string_length.tpp"
