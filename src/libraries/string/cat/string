// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/bit>
#include <cat/simd>
#include <cat/span>

// `__SIZE_TYPE__` is a GCC macro.
// Deprecated call to `memcpy()`. Consider using `cat::copy_buffer()` instead.
// `memcpy()` exists to enable some GCC optimizations.
namespace std {
extern "C" auto memcpy(void* p_destination, void const* p_source,
                       __SIZE_TYPE__ bytes) -> void*;
}
using std::memcpy;

namespace cat {

constexpr auto string_length(char const* p_string) -> ssize;

template <ssize::Raw length>
struct StaticString;

class String : public Span<char const> {
    // `String` inherits:
    //
    // `char const* p_storage;`
    // `ssize length;`
  public:
    constexpr String() : Span<char const>(){};

    constexpr String(char const* p_string, ssize in_length)
        : Span<char const>(p_string, in_length){};

    constexpr String(String const& string)
        : Span<char const>(string.p_storage, string.length){};

    constexpr String(String&& string)
        : Span<char const>(string.p_storage, string.length){};

    // This is `auto` to deduce lower than the array-literal constructor.
    template <typename T>
    constexpr String(T p_string) requires(is_pointer<T>)
        : Span<char const>(p_string, string_length(p_string)){};

    template <ssize::Raw other_length>
    consteval String(char const (&string)[other_length]) {
        this->p_storage = string;
        this->length = static_cast<ssize::Raw>(other_length);
    }

    template <ssize::Raw other_length>
    constexpr String(StaticString<other_length> const& string) {
        this->p_storage = &(string.storage[0]);
        this->length = other_length;
    }

    // A `String` consuming `nullptr` would cause undefined behavior.
    constexpr String(decltype(nullptr)) = delete;

    constexpr auto operator=(String const& string) {
        this->p_storage = string.p_storage;
        this->length = string.length;
    }

    constexpr auto operator=(String&& string) {
        this->p_storage = string.p_storage;
        this->length = move(string).length;
    }

    [[nodiscard]] constexpr auto substring(ssize position, ssize count)
        -> String {
        return String{this->p_storage + position, count};
    }

    [[nodiscard]] constexpr auto remove_prefix(ssize offset) -> String {
        return this->substring(offset, this->length - offset);
    }

    [[nodiscard]] constexpr auto remove_suffix(ssize offset) -> String {
        return this->substring(0, this->length - offset);
    }

    constexpr auto find_small(char character, ssize position = 0) const
        -> Optional<Sentinel<ssize, -1>> {
        for (ssize i = position; i < this->length; ++i) {
            if (this->p_storage[i.raw] == character) {
                return i;
            }
        }
        return nullopt;
    }

    // TODO: Optimize different length strings.
    // TODO: Tile this loop four or eight times.
    constexpr auto find(char character, ssize position = 0) const
        -> Optional<Sentinel<ssize, -1>> {
        ssize i = position;
        for (; i < this->length - char1x_::lanes; i += char1x_::lanes) {
            // TODO: Consider aligning this load?
            char1x_ const storage = char1x_::loaded(this->p_storage + i);
            // TODO: Support a native ABI mask here.
            SimdMask<Avx2Abi<char>, char> const compare =
                (storage == character);
            int4 const mask = move_mask(compare);
            if (mask != 0) {
                return i + mask.count_trailing_zeros();
            }
        }
        // The last chunk of this string, smaller than `char1x_::lanes`, is
        // stepped through one character at a time.
        return this->find_small(character, i);
    }
};

// This is `ssize::Raw` because GCC cannot deduce a string literal's
// length from an `ssize`.
template <ssize::Raw length>
struct StaticString : CollectionFacade<StaticString<length>, char> {
    char storage[length];

    constexpr auto p_data() -> char* {
        return &(this->storage[0]);
    }

    constexpr auto p_data() const -> char const* {
        return &(this->storage[0]);
    }

    constexpr auto size() const -> ssize {
        return length;
    }

    constexpr StaticString() = default;

    // Construct from another `StaticString` of lesser or equal length.
    constexpr StaticString(StaticString<length> const& string) {
        this->copy_string_data(string.p_data());
    }

    // Construct and deduce length from a string literal.
    constexpr StaticString(char const (&in)[length]) {
        // This must be copied instead of initialized in-place to guarantee
        // const-correctness.
        this->copy_string_data(in);
    }

    // Create a `StaticString` from a smaller string, and null out the unfilled
    // bytes.
    template <ssize::Raw in_length>
        requires(in_length < length)
    static consteval auto padded(char const (&in)[in_length])
        -> StaticString<length> {
        StaticString<length> string;
        for (ssize::Raw i = 0; i < in_length; ++i) {
            string[i] = in[i];
        }
        for (ssize::Raw i = in_length; i < length; ++i) {
            string[i] = '\0';
        }
        return string;
    }

    // Assign a `StaticString` of lesser or equal length.
    constexpr auto operator=(StaticString<length> const& string)
        -> StaticString<length>& {
        this->copy_string_data(string.p_data());
        return *this;
    }

    // Assign a string literal of lesser or equal length.
    constexpr auto operator=(char const (&in)[length])
        -> StaticString<length>& {
        this->copy_string_data(in);
        return *this;
    }

  private:
    constexpr void copy_string_data(char const* p_source) {
        if (is_constant_evaluated()) {
            for (ssize::Raw i = 0; i < length; ++i) {
                this->storage[i] = p_source[i];
            }
        } else {
            copy_memory(p_source, this->p_data(), length);
        }
    }
};

// Concatenate constant-evaluated strings.

// This is `ssize::Raw` because GCC cannot deduce a string literal's
// length from an `ssize`.
template <ssize::Raw length_1, ssize::Raw length_2>
constexpr auto operator+(StaticString<length_1> const& string_1,
                         StaticString<length_2> const& string_2)
    -> StaticString<length_1 - 1 + length_2> {
    char array[length_1 - 1 + length_2];

    for (int i = 0; i < length_1 - 1; ++i) {
        array[i] = string_1.storage[i];
    }

    for (int i = length_1 - 1; i < length_1 - 1 + length_2 - 1; ++i) {
        array[i] = string_2.storage[i - length_1 + 1];
    }

    // Make this string null-terminated.
    array[(length_1 - 1 + length_2 - 1)] = '\0';
    StaticString static_string = array;
    return static_string;
}

[[nodiscard]] auto compare_strings(String const string_1, String const string_2)
    -> bool1;

[[nodiscard]] auto print(String const string) -> ssize;

[[nodiscard]] auto println(String const string) -> ssize;

// TODO: Investigate zero-overhead `println` of literals again.

// TODO: Make a comparison function for null-terminated string pointers.

}  // namespace cat

#include "../implementations/string_length.tpp"
