// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/meta>

namespace cat {

namespace detail {
// TODO: Commutative operators should support non-commutative operations.

template <typename T, typename U>
concept has_add_interface = requires(T lhs, U rhs) { lhs.add(rhs); };

template <typename T, typename U>
concept has_subtract_by_interface =
   requires(T lhs, U rhs) { lhs.subtract_by(rhs); };

template <typename T>
concept has_negate_interface = requires(T lhs) { lhs.negate(lhs); };

template <typename T, typename U>
concept has_multiply_interface = requires(T lhs, U rhs) { lhs.multiply(rhs); };

template <typename T, typename U>
concept has_divide_by_interface =
   requires(T lhs, U rhs) { lhs.divide_by(rhs); };

template <typename T, typename U>
concept has_modulo_by_interface =
   requires(T lhs, U rhs) { lhs.modulo_by(rhs); };

template <typename T, typename U>
concept has_shift_left_by_interface =
   requires(T lhs, U rhs) { lhs.shift_left_by_by(rhs); };

template <typename T, typename U>
concept has_shift_right_by_interface =
   requires(T lhs, U rhs) { lhs.shift_right_by(rhs); };

template <typename T, typename U>
concept has_bit_and_interface = requires(T lhs, U rhs) { lhs.bit_and(rhs); };

template <typename T, typename U>
concept has_bit_or_interface = requires(T lhs, U rhs) { lhs.bit_or(rhs); };

template <typename T, typename U>
concept has_bit_xor_interface = requires(T lhs, U rhs) { lhs.bit_xor(rhs); };

template <typename T, typename U>
concept has_bit_not_interface = requires(T lhs, U rhs) { lhs.bit_not(rhs); };

template <typename T>
concept has_bit_complement = requires(T lhs) { lhs.bit_complement(); };
}  // namespace detail

// CRTP class for generating a commutative `+` operator.
template <typename derived_type>
struct plus_interface {
   using decay_derived_type = remove_cvref<derived_type>;

   // `+` operator where this is a left-hand-side operand.
   template <typename T>
   [[nodiscard, gnu::always_inline, gnu::nodebug]]
   constexpr auto
   operator+(this auto&& self, T&& other) -> decltype(auto) {
      return fwd(self).add(fwd(other));
   }

   // `+` operators where this is a right-hand-side operand.

   // `this` is an l-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_add_interface<T, derived_type>)
   [[nodiscard, gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator+(T&& other, decay_derived_type const& self) -> decltype(auto) {
      return self.add(fwd(other));
   }

   // `this` is an r-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_add_interface<T, derived_type>)
   [[nodiscard, gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator+(T&& other, derived_type&& self) -> decltype(auto) {
      return fwd(self).add(fwd(other));
   }

   // `+=` operator where this is a left-hand-side operand.
   template <typename T>
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator+=(derived_type& self, T&& other) -> derived_type& {
      self = self.add(fwd(other));
      return self;
   }

   // `+=` operators where this is a right-hand-side operand.

   // `this` is an l-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_add_interface<T, derived_type>)
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator+=(T& other, derived_type const& self) -> T& {
      other = self.add(other);
      return other;
   }

   // `this` is an r-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_add_interface<T, derived_type>)
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator+=(T& other, derived_type&& self) -> T& {
      other = move(self).add(other);
      return other;
   }

   // Unary `++` operators.

   // `this` is an l-value.
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator++(derived_type& self) -> derived_type& {
      self = self.add(derived_type(1));
      return self;
   }

   // `this` is an r-value.
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator++(derived_type&& self) -> derived_type {
      return move(self).add(derived_type(1));
   }

   // `this` is an l-value.
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator++(derived_type& self, int) -> derived_type& {
      self = self.add(derived_type(1));
      return self;
   }

   // `this` is an r-value.
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator++(derived_type&& self, int) -> derived_type {
      return move(self).add(derived_type(1));
   }
};

// CRTP class for generating a commutative `-` operator.
template <typename derived_type>
struct minus_interface {
   using decay_derived_type = remove_cvref<derived_type>;

   // `-` operator where this is a left-hand-side operand.
   template <typename T>
   [[nodiscard, gnu::always_inline, gnu::nodebug]]
   constexpr auto
   operator-(this auto&& lhs, T&& other) -> decltype(auto) {
      return fwd(lhs).subtract_by(fwd(other));
   }

   // `-` operators where this is a right-hand-side operand.

   // `this` is an l-value.
   template <typename T>
   // If this operator's left operand can subtract_by `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_subtract_by_interface<T, derived_type>)
   [[nodiscard, gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator-(T&& other, decay_derived_type const& self) -> decltype(auto) {
      return self.subtract_from(fwd(other));
   }

   // `this` is an r-value.
   template <typename T>
   // If this operator's left operand can subtract_by `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_subtract_by_interface<T, derived_type>)
   [[nodiscard, gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator-(T&& other, derived_type&& self) -> decltype(auto) {
      return fwd(self).subtract_from(fwd(other));
   }

   // `-=` operator where this is a left-hand-side operand.
   template <typename T>
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator-=(derived_type& self, T&& other) -> derived_type& {
      self = self.subtract_by(fwd(other));
      return self;
   }

   // `-=` operators where this is a right-hand-side operand.

   // `this` is an l-value.
   template <typename T>
   // If this operator's left operand can subtract_by `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_subtract_by_interface<T, derived_type>)
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator-=(T& other, derived_type const& self) -> T& {
      other = self.subtract_from(other);
      return other;
   }

   // `this` is an r-value.
   template <typename T>
   // If this operator's left operand can subtract_by `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_subtract_by_interface<T, derived_type>)
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator-=(T& other, derived_type&& self) -> T& {
      other = move(self).subtract_from(other);
      return other;
   }

   // Unary `--` operators.

   // `this` is an l-value.
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator--(derived_type& self) -> derived_type& {
      self = self.subtract_by(derived_type(1));
      return self;
   }

   // `this` is an r-value.
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator--(derived_type&& self) -> derived_type {
      return move(self).subtract_by(derived_type(1));
   }

   // `this` is an l-value.
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator--(derived_type& self, int) -> derived_type& {
      self = self.subtract_by(derived_type(1));
      return self;
   }

   // `this` is an r-value.
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator--(derived_type&& self, int) -> derived_type {
      return move(self).subtract_by(derived_type(1));
   }
};

// CRTP class for generating a commutative `*` operator.
template <typename derived_type>
struct multiply_interface {
   using decay_derived_type = remove_cvref<derived_type>;

   // `*` operator where this is a left-hand-side operand.
   template <typename T>
   [[nodiscard, gnu::always_inline, gnu::nodebug]]
   constexpr auto
   operator*(this auto&& self, T&& other) -> decltype(auto) {
      return fwd(self).multiply(fwd(other));
   }

   // `*` operators where this is a right-hand-side operand.

   // `this` is an l-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_multiply_interface<T, derived_type>)
   [[nodiscard, gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator*(T&& other, decay_derived_type const& self) -> decltype(auto) {
      return self.multiply(fwd(other));
   }

   // `this` is an r-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_multiply_interface<T, derived_type>)
   [[nodiscard, gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator*(T&& other, derived_type&& self) -> decltype(auto) {
      return fwd(self).multiply(fwd(other));
   }

   // `*=` operator where this is a left-hand-side operand.
   template <typename T>
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator*=(derived_type& self, T&& other) -> derived_type& {
      self = self.multiply(fwd(other));
      return self;
   }

   // `*=` operators where this is a right-hand-side operand.

   // `this` is an l-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_multiply_interface<T, derived_type>)
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator*=(T& other, derived_type const& self) -> T& {
      other = self.multiply(other);
      return other;
   }

   // `this` is an r-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_multiply_interface<T, derived_type>)
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator*=(T& other, derived_type&& self) -> T& {
      other = move(self).multiply(other);
      return other;
   }
};

// CRTP class for generating a commutative `/` operator.
template <typename derived_type>
struct divide_interface {
   using decay_derived_type = remove_cvref<derived_type>;

   // `/` operator where this is a left-hand-side operand.
   template <typename T>
   [[nodiscard, gnu::always_inline, gnu::nodebug]]
   constexpr auto
   operator/(this auto&& self, T&& other) -> decltype(auto) {
      return fwd(self).divide_by(fwd(other));
   }

   // `/` operators where this is a right-hand-side operand.

   // `this` is an l-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_divide_by_interface<T, derived_type>)
   [[nodiscard, gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator/(T&& other, decay_derived_type const& self) -> decltype(auto) {
      return self.divide_into(fwd(other));
   }

   // `this` is an r-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_divide_by_interface<T, derived_type>)
   [[nodiscard, gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator/(T&& other, derived_type&& self) -> decltype(auto) {
      return fwd(self).divide_into(fwd(other));
   }

   // `/=` operator where this is a left-hand-side operand.
   template <typename T>
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator/=(derived_type& self, T&& other) -> derived_type& {
      self = self.divide_by(fwd(other));
      return self;
   }

   // `/=` operators where this is a right-hand-side operand.

   // `this` is an l-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_divide_by_interface<T, derived_type>)
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator/=(T& other, derived_type const& self) -> T& {
      other = self.divide_into(other);
      return other;
   }

   // `this` is an r-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_divide_by_interface<T, derived_type>)
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator/=(T& other, derived_type&& self) -> T& {
      other = move(self).divide_into(other);
      return other;
   }
};

// CRTP class for generating a commutative `&` operator.
template <typename derived_type>
struct bit_and_interface {
   using decay_derived_type = remove_cvref<derived_type>;

   // `&` operator where this is a left-hand-side operand.
   template <typename T>
   [[nodiscard, gnu::always_inline, gnu::nodebug]]
   constexpr auto
   operator&(this auto&& self, T&& other) -> decltype(auto) {
      return fwd(self).bit_and(fwd(other));
   }

   // `&` operators where this is a right-hand-side operand.

   // `this` is an l-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_bit_and_interface<T, derived_type>)
   [[nodiscard, gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator&(T&& other, decay_derived_type const& self) -> decltype(auto) {
      return self.bit_and(fwd(other));
   }

   // `this` is an r-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_bit_and_interface<T, derived_type>)
   [[nodiscard, gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator&(T&& other, derived_type&& self) -> decltype(auto) {
      return fwd(self).bit_and(fwd(other));
   }

   // `&=` operator where this is a left-hand-side operand.
   template <typename T>
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator&=(derived_type& self, T&& other) -> derived_type& {
      self = self.bit_and(fwd(other));
      return self;
   }

   // `&=` operators where this is a right-hand-side operand.

   // `this` is an l-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_bit_and_interface<T, derived_type>)
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator&=(T& other, derived_type const& self) -> T& {
      other = self.bit_and(other);
      return other;
   }

   // `this` is an r-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_bit_and_interface<T, derived_type>)
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator&=(T& other, derived_type&& self) -> T& {
      other = move(self).bit_and(other);
      return other;
   }
};

// CRTP class for generating a commutative `|` operator.
template <typename derived_type>
struct bit_or_interface {
   using decay_derived_type = remove_cvref<derived_type>;

   // `|` operator where this is a left-hand-side operand.
   template <typename T>
   [[nodiscard, gnu::always_inline, gnu::nodebug]]
   constexpr auto
   operator|(this auto&& self, T&& other) -> decltype(auto) {
      return fwd(self).bit_or(fwd(other));
   }

   // `|` operators where this is a right-hand-side operand.

   // `this` is an l-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_bit_or_interface<T, derived_type>)
   [[nodiscard, gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator|(T&& other, decay_derived_type const& self) -> decltype(auto) {
      return self.bit_or(fwd(other));
   }

   // `this` is an r-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_bit_or_interface<T, derived_type>)
   [[nodiscard, gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator|(T&& other, derived_type&& self) -> decltype(auto) {
      return fwd(self).bit_or(fwd(other));
   }

   // `|=` operator where this is a left-hand-side operand.
   template <typename T>
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator|=(derived_type& self, T&& other) -> derived_type& {
      self = self.bit_or(fwd(other));
      return self;
   }

   // `|=` operators where this is a right-hand-side operand.

   // `this` is an l-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_bit_or_interface<T, derived_type>)
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator|=(T& other, derived_type const& self) -> T& {
      other = self.bit_or(other);
      return other;
   }

   // `this` is an r-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_bit_or_interface<T, derived_type>)
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator|=(T& other, derived_type&& self) -> T& {
      other = move(self).bit_or(other);
      return other;
   }
};

// CRTP class for generating a commutative `%` operator.
template <typename derived_type>
struct modulo_interface {
   using decay_derived_type = remove_cvref<derived_type>;

   // `%` operator where this is a left-hand-side operand.
   template <typename T>
   [[nodiscard, gnu::always_inline, gnu::nodebug]]
   constexpr auto
   operator%(this auto&& self, T&& other) -> decltype(auto) {
      return fwd(self).modulo_by(fwd(other));
   }

   // `%` operators where this is a right-hand-side operand.

   // `this` is an r-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_modulo_by_interface<T, derived_type>)
   [[nodiscard, gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator%(T&& other, decay_derived_type const& self) -> decltype(auto) {
      return self.modulo_into(fwd(other));
   }

   // `this` is an r-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_modulo_by_interface<T, derived_type>)
   [[nodiscard, gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator%(T&& other, derived_type&& self) -> decltype(auto) {
      return fwd(self).modulo_into(fwd(other));
   }

   // `%=` operator where this is a left-hand-side operand.
   template <typename T>
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator%=(derived_type& self, T&& other) -> derived_type& {
      self = self.modulo_by(fwd(other));
      return self;
   }

   // `%=` operators where this is a right-hand-side operand.

   // `this` is an l-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_modulo_by_interface<T, derived_type>)
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator%=(T& other, derived_type const& self) -> T& {
      other = self.modulo_into(other);
      return other;
   }

   // `this` is an r-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_modulo_by_interface<T, derived_type>)
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator%=(T& other, derived_type&& self) -> T& {
      other = move(self).modulo_into(other);
      return other;
   }
};

// CRTP class for generating a commutative `<<` operator.
template <typename derived_type>
struct shift_left_interface {
   using decay_derived_type = remove_cvref<derived_type>;

   // `<<` operator where this is a left-hand-side operand.
   template <typename T>
   [[nodiscard, gnu::always_inline, gnu::nodebug]]
   constexpr auto
   operator<<(this auto&& self, T&& other) -> decltype(auto) {
      return fwd(self).shift_left_by(fwd(other));
   }

   // `<<` operators where this is a right-hand-side operand.

   // `this` is an l-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_shift_left_by_interface<T, derived_type>)
   [[nodiscard, gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator<<(T&& other, decay_derived_type const& self) -> decltype(auto) {
      return self.shift_left_into(fwd(other));
   }

   // `this` is an r-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_shift_left_by_interface<T, derived_type>)
   [[nodiscard, gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator<<(T&& other, derived_type&& self) -> decltype(auto) {
      return fwd(self).shift_left_into(fwd(other));
   }

   // `<<=` operator where this is a left-hand-side operand.
   template <typename T>
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator<<=(derived_type& self, T&& other) -> derived_type& {
      self = self.shift_left_by(fwd(other));
      return self;
   }

   // `<<=` operators where this is a right-hand-side operand.

   // `this` is an l-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_shift_left_by_interface<T, derived_type>)
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator<<=(T& other, derived_type const& self) -> T& {
      other = self.shift_left_into(other);
      return other;
   }

   // `this` is an r-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_shift_left_by_interface<T, derived_type>)
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator<<=(T& other, derived_type&& self) -> T& {
      other = move(self).shift_left_into(other);
      return other;
   }
};

// CRTP class for generating a commutative `>>` operator.
template <typename derived_type>
struct shift_right_interface {
   using decay_derived_type = remove_cvref<derived_type>;

   // `>>` operator where this is a left-hand-side operand.
   template <typename T>
   [[nodiscard, gnu::always_inline, gnu::nodebug]]
   constexpr auto
   operator>>(this auto&& self, T&& other) -> decltype(auto) {
      return fwd(self).shift_right_by(fwd(other));
   }

   // `>>` operators where this is a right-hand-side operand.

   // `this` is an l-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_shift_right_by_interface<T, derived_type>)
   [[nodiscard, gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator>>(T&& other, decay_derived_type const& self) -> decltype(auto) {
      return self.shift_right_into(fwd(other));
   }

   // `this` is an r-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_shift_right_by_interface<T, derived_type>)
   [[nodiscard, gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator>>(T&& other, derived_type&& self) -> decltype(auto) {
      return fwd(self).shift_right_into(fwd(other));
   }

   // `>>=` operator where this is a left-hand-side operand.
   template <typename T>
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator>>=(derived_type& self, T&& other) -> derived_type& {
      self = self.shift_right_by(fwd(other));
      return self;
   }

   // `>>=` operators where this is a right-hand-side operand.

   // `this` is an l-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_shift_right_by_interface<T, derived_type>)
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator>>=(T& other, derived_type const& self) -> T& {
      other = self.shift_right_into(other);
      return other;
   }

   // `this` is an r-value.
   template <typename T>
   // If this operator's left operand can add `derived_type` as its
   // right-hand operand, this overload is ambiguous.
      requires(!detail::has_shift_right_by_interface<T, derived_type>)
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator>>=(T& other, derived_type&& self) -> T& {
      other = move(self).shift_right_into(other);
      return other;
   }
};

template <typename derived_type>
struct bitwise_interface : bit_and_interface<derived_type>,
                           bit_or_interface<derived_type>,
                           shift_left_interface<derived_type>,
                           shift_right_interface<derived_type> {
   // Unary complement operator.
   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator~(derived_type const& self) {
      return self.bit_complement();
   }

   [[gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator~(derived_type&& self) {
      return move(self).bit_complement();
   }
};

template <typename derived_type>
struct arithmetic_interface : plus_interface<derived_type>,
                              minus_interface<derived_type>,
                              multiply_interface<derived_type>,
                              divide_interface<derived_type>,
                              modulo_interface<derived_type>,
                              bitwise_interface<derived_type> {
   // No-op unary `+` operator for operand.
   [[nodiscard, gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator+(derived_type const& self) {
      return self;
   }

   friend constexpr auto
   operator+(derived_type&& self) {
      return self;
   }

   // Unary `-` operator for operand.
   [[nodiscard, gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator-(derived_type const& self)
      requires(is_signed<derived_type>)
   {
      if constexpr (detail::has_negate_interface<derived_type>) {
         return self.negate();
      } else {
         // Subtract `self` from `0` to negate itself.
         return static_cast<derived_type>(0) - self;
      }
   }

   [[nodiscard, gnu::always_inline, gnu::nodebug]]
   friend constexpr auto
   operator-(derived_type&& self)
      requires(is_signed<derived_type>)
   {
      if constexpr (detail::has_negate_interface<derived_type>) {
         return self.negate();
      } else {
         // Subtract `self` from `0` to negate itself.
         return static_cast<derived_type>(0) - move(self);
      }
   }

 private:
   [[gnu::always_inline, gnu::nodebug]]
   constexpr auto
   self() {
      return static_cast<derived_type>(*this);
   }

   [[gnu::always_inline, gnu::nodebug]]
   constexpr auto
   self() const {
      return static_cast<derived_type>(*this);
   }
};

}  // namespace cat
