// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/arithmetic>

namespace cat {

// Define either hooks or shims for asan.

#if __has_feature(address_sanitizer)
extern "C" {

// TODO: Comment these with documentation and use safer types.
void
__asan_poison_memory_region(void const volatile* p_address, uword size);
void
__asan_unpoison_memory_region(void const volatile* p_address, uword size);

// These functions are only for debugging.
[[gnu::used]]
void
__asan_describe_address(void* p_address);

[[gnu::used]]
extern auto
__asan_address_is_poisoned(void const volatile* p_address) -> int;

[[gnu::used]]
auto
__asan_region_is_poisoned(void* p_begin, uword size) -> void*;

[[gnu::used]]
auto
__asan_report_present() -> int;

[[gnu::used]]
auto
__asan_get_report_pc() -> void*;

[[gnu::used]]
auto
__asan_get_report_bp() -> void*;

[[gnu::used]]
auto
__asan_get_report_sp() -> void*;

[[gnu::used]]
auto
__asan_get_report_address() -> void*;

[[gnu::used]]
auto
__asan_get_report_access_type() -> int;

[[gnu::used]]
auto
__asan_get_report_access_size() -> __SIZE_TYPE__;

[[gnu::used]]
auto
__asan_get_report_description() -> char const*;

[[gnu::used]]
auto
__asan_locate_address(void* p_address, char* p_name, uword name_size,
                      void** p_region_address, uword* p_region_size)
   -> char const*;

[[gnu::used]]
auto
__asan_get_alloc_stack(void* p_heap, void** pp_trace, uword size,
                       int* p_thread_id) -> __SIZE_TYPE__;

[[gnu::used]]
auto
__asan_get_free_stack(void* p_heap, void** pp_trace, uword size,
                      int* p_thread_id) -> __SIZE_TYPE__;

[[gnu::used]]
void
__asan_get_shadow_mapping(uword* p_shadow_scale, uword* p_shadow_offset);
}
#else
// No-op functions are provided when asan is not available.
inline void
__asan_poison_memory_region(void const volatile*, uword) {
}

inline void
__asan_unpoison_memory_region(void const volatile*, uword) {
}
#endif

template <typename T>
[[gnu::nodebug, gnu::always_inline]]
constexpr void
poison_memory_region([[maybe_unused]] T const volatile* p_address,
                     [[maybe_unused]] uword size) {
#if __has_feature(address_sanitizer)
   if !consteval {
      __asan_poison_memory_region(
         reinterpret_cast<void const volatile*>(p_address), size);
   }
#endif
}

template <typename T>
[[gnu::nodebug, gnu::always_inline]]
constexpr void
unpoison_memory_region([[maybe_unused]] T const volatile* p_address,
                       [[maybe_unused]] uword size) {
#if __has_feature(address_sanitizer)
   if !consteval {
      __asan_unpoison_memory_region(
         reinterpret_cast<void const volatile*>(p_address), size);
   }
#endif
}

}  // namespace cat
