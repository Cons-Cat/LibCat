// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/array>
#include <cat/linux>
#include <cat/string>

// TODO: Socket `concept`.
// TODO: Socket types for sequenced packets.

namespace cat {

// Basic Socket type that any other sockets must convert into.
struct Socket {
    uint2 family;
    char data[14];
};

enum class SocketType {
    stream = 1,
    data_gram = 2,
    raw = 3,
    reliable_data_gram = 4,
    sequenced_packet = 5,
    datagram_congestion_control = 6
};

template <int2 Family, SocketType Type, int4 Protocol>
struct SocketAttributes {
    int2 const family = Family;
    static constexpr SocketType type = Type;
    static constexpr int4 protocol = Protocol;
};

template <SocketType Type, int4 Protocol = 0>
struct SocketUnix {
    SocketAttributes<static_cast<short>(1), Type, Protocol> const attributes;
    cat::StaticString<108> path_name;
    nix::FileDescriptor descriptor;

    // TODO: Create flags that corresponds to the value of `Protocol`.

    // Using `SocketUnix(){};` instead of `SockeUnix() = default;` prevents a
    // false-positive clangd diagnostic here.
    SocketUnix(){};  // NOLINT
    SocketUnix(nix::FileDescriptor const in_descriptor) {
        this->descriptor = in_descriptor;
    }

    // Get the size of this struct, not considering the `FileDescriptor` that it
    // holds.
    auto get_size() -> ssize {
        return ssizeof(attributes) + ssizeof(path_name);
    }

    // Create and return a `Socket`.
    auto create() -> Optional<void> {
        Scaredy result = nix::create_socket(this->attributes.family,
                                            static_cast<int>(Type), Protocol);
        if (result.has_value()) {
            this->descriptor = result.value();
            return monostate;
        }
        return nullopt;
    }

    // Connect a `Socket`.
    auto connect() -> Optional<void> {
        Scaredy result =
            nix::connect_socket(this->descriptor, this, this->get_size());
        if (result.has_value()) {
            return monostate;
        }
        return nullopt;
    }

    auto send_string(String const& message, int8 flags = 0,
                     cat::Socket const* p_destination_socket = nullptr,
                     ssize const addr_length = 0) -> Optional<void> {
        Scaredy result =
            nix::send_buffer(this->descriptor, message.p_data(), message.size(),
                             flags, p_destination_socket, addr_length);
        if (result.has_value()) {
            return monostate;
        }
        return nullopt;
    }

    auto send_struct(auto const& message_struct, int8 flags = 0,
                     cat::Socket const* p_destination_socket = nullptr,
                     ssize const addr_length = 0) -> Optional<void> {
        Scaredy result = nix::send_buffer(this->descriptor, &message_struct,
                                          ssizeof(message_struct), flags,
                                          p_destination_socket, addr_length);
        if (result.has_value()) {
            return monostate;
        }
        return nullopt;
    }

    auto bind() -> Optional<void> {
        Scaredy result =
            nix::bind_socket(this->descriptor, this, this->get_size());
        if (result.has_value()) {
            return monostate;
        }
        return nullopt;
    }

    auto listen(int8 const backlog) -> Optional<void> {
        Scaredy result = nix::listen_to_socket(this->descriptor, backlog);
        if (result.has_value()) {
            return monostate;
        }
        return nullopt;
    }

    auto accept(nix::FileDescriptor listening_socket,
                void const* p_socket = nullptr,
                ssize const* p_addr_len = nullptr) -> Optional<void> {
        Scaredy result =
            nix::accept_socket(listening_socket, p_socket, p_addr_len);
        if (result.has_value()) {
            return monostate;
        }
        return nullopt;
    }

    auto accept(SocketUnix<Type, Protocol> const& listening_socket,
                void const* p_socket = nullptr,
                ssize const* p_addr_len = nullptr) -> Optional<void> {
        Scaredy result = nix::accept_socket(listening_socket.descriptor,
                                            p_socket, p_addr_len);
        if (result.has_value()) {
            this->descriptor = result.value();
            return monostate;
        }
        return nullopt;
    }

    // TODO: Factor into `.recieve()` and `.recieve_from()`.
    auto recieve(void* const p_message_buffer, ssize const buffer_length,
                 Socket const* const __restrict p_socket = nullptr,
                 ssize const* const __restrict p_socket_size = nullptr)
        -> Optional<ssize> {
        // Scaredy const result =
        nix::ScaredyLinux<ssize> const result =
            nix::recieve_buffer(this->descriptor, p_message_buffer,
                                buffer_length, p_socket, p_socket_size);
        if (result.has_value()) {
            return result.value();
        }
        return nullopt;
    }

    auto close() -> Optional<void> {
        Scaredy result = nix::close(this->descriptor);
        if (result.has_value()) {
            return monostate;
        }
        return nullopt;
    }
};

}  // namespace cat
