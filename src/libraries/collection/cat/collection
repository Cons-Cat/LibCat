// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/algorithm>
#include <cat/iterator>
#include <cat/math>
#include <cat/maybe>

namespace cat {

// Forward declarations for containers and algorithms needed by
// `collection_interface`.
template <typename T>
class span;

template <typename T>
concept is_collection = requires(T container) {
                           container.begin();
                           container.end();
                           container.cbegin();
                           container.cend();
                           container.size();
                        };

namespace detail {
template <typename T>
concept is_contiguous_collection =  // is_collection<T> &&
   requires(T collection) { collection.data(); };

// clang-format off
    template <typename T>
    // Parentheses are required here to satisfy cppcheck.
    concept is_bounded_collection = (requires(T collection) {
        collection.size();
    }) || (requires(T collection) {
        collection.capacity();
    });
// clang-format on

// If `.size()` is provided.
template <typename T>
concept has_size = requires(T t) { t.size(); };

// If `.capacity()` is provided.
template <typename T>
concept has_capacity = requires(T t) { t.capacity(); };

// If `.begin()` is provided.
template <typename T>
concept has_begin = requires(T t) { t.begin(); };

// If `.begin() const` is provided.
template <typename T>
concept has_begin_const_qual = requires(T const& t) { t.begin(); };

// If `.end()` is provided.
template <typename T>
concept has_end = requires(T t) { t.end(); };

// If `.end() const` is provided.
template <typename T>
concept has_end_const_qual = requires(T const& t) { t.end(); };

// If `.rbegin()` is provided.
template <typename T>
concept has_rbegin = requires(T t) { t.rbegin(); };

// If `.rend()` is provided.
template <typename T>
concept has_rend = requires(T t) { t.rend(); };

// If `.cbegin()` is provided.
template <typename T>
concept has_cbegin = requires(T t) { t.cbegin(); };

// If `.cend()` is provided.
template <typename T>
concept has_cend = requires(T t) { t.cend(); };

// `detail::collection_iterator` is shared by all containers that
// implement `iterable_interface`. Unlike the standard library, this means
// that two different containers or container specializations can have the
// same `iterator` type, so long as they have the same `value_type`.
//
// This iterator's type can be accessed as eg.
// `cat::vec<int4, allocator>::iterator`.
template <typename T>
class collection_iterator
    : public iterator_interface<collection_iterator<T>, T> {
 public:
   using value_type = T;
   using const_value_type = T const;
   using reference = T&;
   using const_reference = T const&;

   constexpr collection_iterator(collection_iterator const&) = default;
   constexpr collection_iterator(collection_iterator&&) = default;

   constexpr collection_iterator(idx index, T* p_in_array)
       : m_current_index(index), m_p_array(p_in_array) {
   }

   constexpr auto
   dereference() -> T& {
      return m_p_array[m_current_index.raw];
   }

   constexpr auto
   dereference() const -> T const& {
      return m_p_array[m_current_index.raw];
   }

   constexpr void
   advance(iword offset) {
      m_current_index += offset;
   }

   constexpr auto
   distance_to(collection_iterator const& other) const -> iword {
      return other.m_current_index - m_current_index;
   }

 private:
   iword m_current_index;
   T* m_p_array;
};

template <typename T>
collection_iterator(idx, T*) -> collection_iterator<T>;

template <typename T>
collection_iterator(idx, T const*) -> collection_iterator<T const>;

}  // namespace detail

template <typename container,
          template <typename, auto...> typename iterator_type, typename T,
          auto... args>
class iterable_interface {
 public:
   using value_type = T;
   using const_value_type = T const;
   using reference = T&;
   using const_reference = T const&;

   using iterator = iterator_type<T, args...>;
   using const_iterator = const_iterator_adaptor<iterator_type, T, args...>;
   using reverse_iterator = reverse_iterator_adaptor<iterator>;
   using const_reverse_iterator = reverse_iterator_adaptor<const_iterator>;

   [[nodiscard]]
   constexpr auto
   begin(this auto&& collection) {
      constexpr bool is_const = is_const_ref<decltype(collection)>;
      using it = conditional<is_const, const_iterator, iterator>;

      return it(0, fwd(collection).data());
   }

   [[nodiscard]]
   constexpr auto
   end(this auto&& collection) {
      constexpr bool is_const = is_const_ref<decltype(collection)>;
      using it = conditional<is_const, const_iterator, iterator>;

      // `cat::forward` must be called on last use, and because argument
      // evaluation order is unspecified, it cannot be called inside an
      // argument list.
      auto size = collection.size();
      auto* p_data = fwd(collection).data();
      return it(size, p_data);
   }

   [[nodiscard]]
   constexpr auto
   cbegin(this auto const& collection) {
      if constexpr (detail::has_begin_const_qual<decltype(collection)>) {
         return collection.begin();
      } else {
         // If no `const-qualified` `.begin()` method is provided, wrap over the
         // non-`const` one.
         return unconst(collection).begin();
      }
   }

   [[nodiscard]]
   constexpr auto
   cend(this auto const& collection) {
      if constexpr (detail::has_end_const_qual<decltype(collection)>) {
         return collection.end();
      } else {
         // If no `const-qualified` `.end()` method is provided, wrap over the
         // non-`const` one.
         return unconst(collection).end();
      }
   }

   // `cat::as_reverse()` cannot be used to streamline this, because that
   // has a potential dependency upon this code.

   [[nodiscard]]
   constexpr auto
   crbegin(this auto const& collection) {
      return collection.rbegin();
   }

   [[nodiscard]]
   constexpr auto
   crend(this auto const& collection) {
      return collection.rend();
   }
};

template <typename T>
class random_access_iterable_interface
    : public iterable_interface<random_access_iterable_interface<T>,
                                detail::collection_iterator, T> {
   using iterator_t = detail::collection_iterator<T>;

 public:
   [[nodiscard]]
   constexpr auto
   begin(this auto&& collection) {
      // `collection_iterator` deduces `const`-ness for us here.
      return detail::collection_iterator(0u, fwd(collection).data());
   }

   [[nodiscard]]
   constexpr auto
   end(this auto&& collection) {
      idx size = collection.size();
      auto* p_data = fwd(collection).data();
      // `collection_iterator` deduces `const`-ness for us here.
      return detail::collection_iterator(size, p_data);
   }

   [[nodiscard]]
   constexpr auto
   rbegin(this auto&& collection) {
      // `cat::forward` must be called on last use, and because argument
      // evaluation order is unspecified, it cannot be called inside an
      // argument list.
      auto size = collection.size() - 1u;
      auto* p_data = fwd(collection).data();
      return reverse_iterator_adaptor(
         detail::collection_iterator(size, p_data));
   }

   [[nodiscard]]
   constexpr auto
   rend(this auto&& collection) {
      return reverse_iterator_adaptor(
         detail::collection_iterator(0, fwd(collection).data()));
   }
};

template <typename derived_type, typename T>
class collection_interface {
 protected:
   // `is_array_like` at the top of this class instead of the bottom prevents
   // clangd false-positive diagnostics.
   static constexpr bool is_array_like =
      detail::is_contiguous_collection<derived_type>
      && detail::is_bounded_collection<derived_type>;

 public:
   using value_type = T;
   using const_value_type = T const;
   using reference = T&;
   using const_reference = T const&;

   // If `.size()` is not, provided and `.capacity()` is, generate
   // `.size()`.
   [[nodiscard]]
   constexpr auto
   size() const -> idx
      requires(detail::has_capacity<derived_type>
               && !detail::has_size<derived_type>)
   {
      return this->self().capacity();
   }

   // If `.size()` is provided and `.capacity()` is not, generate
   // `.capacity()`.
   [[nodiscard]]
   constexpr auto
   capacity() const -> idx
      requires(detail::has_size<derived_type>)
   {
      return this->self().size();
   }

   // This evaluates true if there are one or more elements currently in this
   // collection.
   [[nodiscard]]
   constexpr auto
   is_empty() const -> bool
      requires(detail::has_size<derived_type>)
   {
      return this->self().size() == 0;
   }

   // This evaluates true if there are one or more elements currently in this
   // collection.
   [[nodiscard]]
   constexpr auto
   is_full() const -> bool
      requires(detail::has_size<derived_type>)
   {
      return this->self().size() == this->self().capacity();
   }

   // Index into this collection with bounds-checking.
   [[nodiscard]]
   constexpr auto
   at(idx index) -> maybe<T&>
      requires(is_array_like)
   {
      if !consteval {
         cat::assert(index >= 0);
      }
      if (index < this->self().size()) {
         return this->self_mut().data()[index.raw];
      }
      return nullopt;
   }

   // Index into this collection with bounds-checking.
   [[nodiscard]]
   constexpr auto
   at(idx index) const -> maybe<T&> {
      // `unconst()` allows `.at()` to be safely called in a `const` context.
      return unconst(this)->at(index);
   }

   [[nodiscard]]
   constexpr auto
   front() [[clang::lifetimebound]] -> T&
      requires(is_array_like)
   {
      cat::assert(this->self().size() > 0);
      return this->self_mut().data()[0];
   }

   [[nodiscard]]
   constexpr auto
   front() const [[clang::lifetimebound]] -> T const& {
      cat::assert(this->self().size() > 0);
      return unconst(this)->front();
   }

   [[nodiscard]]
   constexpr auto
   back() [[clang::lifetimebound]] -> T&
      requires(is_array_like)
   {
      cat::assert(this->self().size() > 0);
      return this->self_mut().data()[this->self().size().raw - 1u];
   }

   [[nodiscard]]
   constexpr auto
   back() const [[clang::lifetimebound]] -> T const& {
      cat::assert(this->self().size() > 0);
      return unconst(this)->back();
   }

   [[nodiscard]]
   constexpr auto
   subspan(idx start_index, idx end_index) [[clang::lifetimebound]] -> span<T>
      requires(is_array_like)
   {
      if !consteval {
         assert(end_index <= this->self().capacity());
      }

      return span<T>(this->self().data() + start_index,
                     end_index - start_index);
   }

   [[nodiscard]]
   constexpr auto
   subspan(idx start_index, idx end_index) const [[clang::lifetimebound]]
   -> span<T const>
      requires(is_array_like)
   {
      if !consteval {
         assert(end_index <= this->self().capacity());
      }

      return span<T const>(this->self().data() + start_index,
                           end_index - start_index);
   }

   [[nodiscard]]
   constexpr auto
   first(idx count) [[clang::lifetimebound]] -> span<T>
      requires(is_array_like)
   {
      return this->subspan(0u, count);
   }

   [[nodiscard]]
   constexpr auto
   first(idx count) const [[clang::lifetimebound]] -> span<T const>
      requires(is_array_like)
   {
      return this->subspan(0u, count);
   }

   [[nodiscard]]
   constexpr auto
   last(idx count) [[clang::lifetimebound]] -> span<T>
      requires(is_array_like)
   {
      return this->subspan(this->self().size() - count, this->self().size());
   }

   [[nodiscard]]
   constexpr auto
   last(idx count) const [[clang::lifetimebound]] -> span<T const>
      requires(is_array_like)
   {
      return this->subspan(this->self().size() - count, this->self().size());
   }

   [[nodiscard]]
   constexpr auto
   operator[](idx index) [[clang::lifetimebound]] -> T&
      requires(is_array_like)
   {
      if !consteval {
         assert(index < this->self().size(),
                "A collection was indexed out of bounds!");
      }

      return this->self_mut().data()[make_raw_arithmetic(index)];
   }

   [[nodiscard]]
   constexpr auto
   operator[](idx index) const [[clang::lifetimebound]] -> T const&
      requires(is_array_like)
   {
      if !consteval {
         assert(index < this->self().size());
      }

      return this->self().data()[make_raw_arithmetic(index)];
   }

   // Member-access syntax algorithms.

   template <is_collection Other>
   auto
   copy_to(this auto const& self, Other& destination) {
      assert(destination.capacity() >= self.capacity());
      return cat::copy(self.begin(), self.end(), destination.begin());
   }

   template <is_collection Other>
   auto
   move_to(this auto const& self, Other& destination) {
      assert(destination.capacity() >= self.capacity());
      return cat::move(self.begin(), self.end(), destination.begin());
   }

   template <is_collection Other>
   auto
   relocate_to(this auto const& self, Other& destination) {
      assert(destination.capacity() >= self.capacity());
      return cat::relocate(self.begin(), self.end(), destination.begin());
   }

 private:
   // TODO: Replace these with explicit object parameters.
   constexpr auto
   self_mut() -> derived_type& {
      return static_cast<derived_type&>(*this);
   }

   constexpr auto
   self() -> derived_type& {
      return static_cast<derived_type&>(*this);
   }

   constexpr auto
   self() const -> derived_type const& {
      return static_cast<derived_type const&>(*this);
   }
};

}  // namespace cat
