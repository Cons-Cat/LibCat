// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/math>
#include <cat/meta>
#include <cat/optional>

namespace cat {
template <typename T>
class Span;
}

namespace meta {
namespace detail {
    template <typename T>
    concept HasBegin = requires(T it) {
        it.begin();
    };
}  // namespace detail

template <typename Derived, typename T>
class ContainerFacade {
    // If a `.p_data()` and either a `.size()` or `.capacity()` method are
    // provided, then this collection is assumed to be contiguous in memory.
    // clang-format off
    constexpr static bool is_contiguous = requires {
        Derived{}.p_data();
    } && (requires { Derived{}.size(); } || requires { Derived{}.capacity(); });
    // clang-format on

    // If `.size()` is provided and can be
    // constant-evaluated, and `.capacity()` is not provided, then the length of
    // this collection is assumed to be constant.
    // clang-format off
    constexpr static bool has_const_length = requires {
		meta::constant_evaluate(Derived{}.size());
    } && !requires {
        Derived{}.capacity();
    };
    // clang-format on

    constexpr auto self() -> Derived& {
        return static_cast<Derived&>(*this);
    }

    constexpr auto self() const -> Derived const& {
        return static_cast<Derived const&>(*this);
    }

    // If the collection does not define an iterator, then one should be
    // generated. This function only exists for the purpose of deducing the type
    // of an iterator as `decltype(make_iterator())`.
    static constexpr auto make_iterator() {
        struct Iterator : cat::IteratorFacade<Iterator> {
            ssize current_index;
            T const* const p_array;

            constexpr Iterator(ssize const index, T const* const p_in_array)
                : current_index(index), p_array(p_in_array){};

            constexpr auto dereference() const -> T const& {
                return this->p_array[current_index.c()];
            }

            constexpr void advance(ssize const offset) {
                this->current_index += offset;
            }

            constexpr auto distance_to(Iterator const& other) const -> ssize {
                return other.current_index - current_index;
            }
        };

        // Produce an iterator to have its type deduced later.
        return Iterator{0, nullptr};
    }
  public:
    // If `.size()` is provided and `.capacity()` is not, generate
    // `.capacity()`.
    [[nodiscard]] constexpr auto capacity() -> ssize {
        return this->self().size();
    }

    // This evaluates true if there are one or more elements currently in this
    // collection.
    [[nodiscard]] constexpr auto is_empty() -> bool requires(Derived::size()) {
        return this->self().size() > 0;
    }

    // Index into this collection with bounds-checking.
    [[nodiscard]] constexpr auto at(ssize const index) -> cat::Optional<T&> {
        Result{index >= 0}.assert();
        if (index < this->self().capacity()) {
            return const_cast<T*>(this->self().p_data())[index.c()];
        }
        return nullopt;
    }

    [[nodiscard]] constexpr auto front() -> T& {
        return const_cast<T*>(this->self().p_data())[0];
    }

    [[nodiscard]] constexpr auto back() -> T& {
        return const_cast<T*>(
            this->self().p_data())[this->self().size().c() - 1];
    }

    [[nodiscard]] constexpr auto slice(ssize const start_index,
                                       ssize const end_index) -> cat::Span<T> {
        Result{start_index >= 0}.assert();
        Result{end_index <= this->self().capacity()}.assert();
        return cat::Span<T>(const_cast<T*>(this->self().p_data()) + start_index,
                            end_index - start_index);
    }

    [[nodiscard]] constexpr auto first(ssize const count) -> cat::Span<T> {
        return this->slice(0, count);
    }

    [[nodiscard]] constexpr auto last(ssize const count) -> cat::Span<T> {
        return this->slice(this->self().capacity() - count,
                           this->self().capacity());
    }

    [[nodiscard]] constexpr auto operator[](ssize const index) -> T& {
        Result{index >= 0}.assert();
        Result{index < this->self().capacity()}.assert();

        if constexpr (is_contiguous) {
            return const_cast<T*>(this->self().p_data())[index.c()];
        }
    }

    [[nodiscard]] constexpr auto operator[](ssize const index) const
        -> T const& {
        Result{index >= 0}.assert();
        Result{index < this->self().capacity()}.assert();

        if constexpr (is_contiguous) {
            return this->self().p_data()[index.c()];
        }
    }

    [[nodiscard]] constexpr auto begin() const {
        return decltype(make_iterator()){0, this->self().p_data()};
    }

    [[nodiscard]] constexpr auto end() const {
        return decltype(make_iterator()){this->self().size(),
                                         this->self().p_data()};
    }

    [[nodiscard]] constexpr auto rbegin() const {
        return cat::ReversedIterator<decltype(make_iterator())>{
            this->self().size() - 1, this->self().p_data()};
    }

    [[nodiscard]] constexpr auto rend() const {
        return cat::ReversedIterator<decltype(make_iterator())>(
            -1, this->self().p_data());
    }
};

}  // namespace meta
