// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

// Be warned, ye who trot here!
// Here be arcane remnants of the dark arts.
// Black magic befouls the lines between yon
// copse, so lest your eyes be lead astray,
// know that the incantations written yonder
// hath driven many ponies mad.
//
// Gallop forward at ye own peril!

// These forward declarations are required.
namespace cat {
template <typename T>
struct RemoveReferenceTrait;
template <typename>
struct IsLvalueReferenceTrait;
}  // namespace cat

namespace std {
template <typename T>
constexpr auto move(T&& input) -> typename cat::RemoveReferenceTrait<T>::Type&&;
template <typename T>
constexpr auto forward(typename cat::RemoveReferenceTrait<T>::Type& input)
    -> T&&;
template <typename T>
constexpr auto forward(typename cat::RemoveReferenceTrait<T>::Type&& input)
    -> T&& requires(!cat::IsLvalueReferenceTrait<T>::value);
}  // namespace std

namespace cat {
using std::forward;
using std::move;

// Forward declare numeric types. These are implemented in `<numeral>`.
template <typename T>
struct Numeral;

using int1 = Numeral<__INT8_TYPE__>;
using int2 = Numeral<__INT16_TYPE__>;
using int4 = Numeral<__INT32_TYPE__>;
using int8 = Numeral<__INT64_TYPE__>;
using uint1 = Numeral<__UINT8_TYPE__>;
using uint2 = Numeral<__UINT16_TYPE__>;
using uint4 = Numeral<__UINT32_TYPE__>;
using uint8 = Numeral<__UINT64_TYPE__>;
using float4 = Numeral<float>;
using float8 = Numeral<double>;

using usize = Numeral<__SIZE_TYPE__>;
// TODO: Support word size of `4`:
using ssize = Numeral<long int>;

template <typename T, typename Storage>
struct ArithmeticPtr;

namespace detail {
    template <typename T, typename U = T&&>
    auto declval_detail(signed int) -> U;

    template <typename T>
    auto declval_detail(signed long) -> T;
}  // namespace detail

template <typename T>
auto declval() -> decltype(detail::declval_detail<T>(0));

template <typename T>
struct TypeIdentityTrait {
    using Type = T;
};
template <typename T>
using TypeIdentity = typename TypeIdentityTrait<T>::Type;

namespace detail {
    template <typename...>
    using Void = void;
}

template <typename T>
struct AddCvTrait {
    using Type = T const volatile;
};

template <typename T>
using AddCv = typename AddCvTrait<T>::Type;

template <typename T>
struct AddConstTrait {
    using Type = T const;
};

template <typename T>
using AddConst = typename AddConstTrait<T>::Type;

template <typename T>
struct AddVolatileTrait {
    using Type = T volatile;
};

template <typename T>
using AddVolatile = typename AddVolatileTrait<T>::Type;

template <typename T>
struct RemoveConstTrait {
    using Type = T;
};
template <typename T>
struct RemoveConstTrait<T const> {
    using Type = T;
};
template <typename T>
using RemoveConst = typename RemoveConstTrait<T>::Type;

template <typename T>
struct RemoveVolatileTrait {
    using Type = T;
};
template <typename T>
struct RemoveVolatileTrait<T volatile> {
    using Type = T;
};
template <typename T>
using RemoveVolatile = typename RemoveVolatileTrait<T>::Type;

template <typename T>
struct RemoveCvTrait {
    using Type = T;
};
template <typename T>
struct RemoveCvTrait<T const> {
    using Type = T;
};
template <typename T>
struct RemoveCvTrait<T volatile> {
    using Type = T;
};
template <typename T>
struct RemoveCvTrait<T const volatile> {
    using Type = T;
};
template <typename T>
using RemoveCv = typename RemoveCvTrait<T>::Type;

template <typename T>
struct RemoveReferenceTrait {
    using Type = T;
};
template <typename T>
struct RemoveReferenceTrait<T&> {
    using Type = T;
};
template <typename T>
struct RemoveReferenceTrait<T&&> {
    using Type = T;
};
template <typename T>
using RemoveReference = typename RemoveReferenceTrait<T>::Type;

template <typename T>
struct RemoveCvRefTrait {
    using Type = RemoveCvTrait<RemoveReferenceTrait<T>>;
};
template <typename T>
using RemoveCvRef = typename RemoveCvRefTrait<T>::Type::Type::Type;

namespace detail {
    template <typename T>
    struct RemovePointerTraitDetail {
        using Type = T;
    };
    template <typename T>
    struct RemovePointerTraitDetail<T*> {
        using Type = T;
    };
    template <typename T>
    struct RemovePointerTraitDetail<T* const> {
        using Type = T;
    };
    template <typename T>
    struct RemovePointerTraitDetail<T* volatile> {
        using Type = T;
    };
    template <typename T>
    struct RemovePointerTraitDetail<T* const volatile> {
        using Type = T;
    };
}  // namespace detail

template <typename T>
struct RemovePointerTrait : detail::RemovePointerTraitDetail<T> {};
template <typename T>
using RemovePointer = typename RemovePointerTrait<T>::Type;

template <typename T, T constant_value>
struct IntegralConstantTrait {
    static constexpr T value = constant_value;
    using Type = IntegralConstantTrait<T, constant_value>;
};
template <typename T, T constant_value>
constexpr auto integral_constant =
    IntegralConstantTrait<T, constant_value>::value;

template <bool constant_value>
using BoolConstantTrait = IntegralConstantTrait<bool, constant_value>;
template <bool constant_value>
constexpr auto bool_constant = BoolConstantTrait<constant_value>::value;

using TrueTypeTrait = BoolConstantTrait<true>;
constexpr bool true_type = TrueTypeTrait::value;

using FalseTypeTrait = BoolConstantTrait<false>;
constexpr bool false_type = FalseTypeTrait::value;

template <bool Condition, typename T, typename U>
struct ConditionalTrait {
    using Type = T;
};
template <typename T, typename U>
struct ConditionalTrait<false, T, U> {
    using Type = U;
};
template <bool B, typename T, typename U>
using Conditional = typename ConditionalTrait<B, T, U>::Type;

// `__is_enum()` is a GNU builtin.
template <typename T>
struct IsEnumTrait : BoolConstantTrait<__is_enum(T)> {};
template <typename T>
constexpr bool is_enum = IsEnumTrait<T>::value;
template <typename T>
using IsEnum = typename IsEnumTrait<T>::Type;

// `__is_same()` is a GNU builtin.
template <typename T, typename U>
struct IsSameTrait : BoolConstantTrait<__is_same(T, U)> {};
template <typename T, typename U>
constexpr bool is_same = IsSameTrait<T, U>::value;
template <typename T, typename U>
using IsSame = typename IsSameTrait<T, U>::Type;

// `__is_base_of()` is a GNU builtin.
template <typename T, typename U>
struct IsBaseOfTrait : BoolConstantTrait<__is_base_of(T, U)> {};
template <typename T, typename U>
constexpr bool is_base_of = IsBaseOfTrait<T, U>::value;
template <typename T, typename U>
using IsBaseOf = typename IsBaseOfTrait<T, U>::Type;

// `__is_union()` is a GNU builtin.
template <typename T>
struct IsUnionTrait : BoolConstantTrait<__is_union(T)> {};
template <typename T>
constexpr bool is_union = IsUnionTrait<T>::value;

// `__is_class()` is a GNU builtin.
template <typename T>
struct IsClassTrait : BoolConstantTrait<__is_class(T)> {};
template <typename T>
constexpr bool is_class = IsClassTrait<T>::value;

// `__is_literal_type()` is a GNU builtin.
template <typename T>
struct IsLiteralTrait : BoolConstantTrait<__is_literal_type(T)> {};
template <typename T>
constexpr bool is_literal = IsLiteralTrait<T>::value;
template <typename T>
using IsLiteral = typename IsLiteralTrait<T>::Type;

template <typename T>
struct IsReferenceTrait : FalseTypeTrait {};
template <typename T>
struct IsReferenceTrait<T&> : TrueTypeTrait {};
template <typename T>
struct IsReferenceTrait<T&&> : TrueTypeTrait {};

template <typename T>
constexpr bool is_reference = IsReferenceTrait<T>::value;

template <typename>
struct IsCatNumeral : FalseTypeTrait {};
template <>
struct IsCatNumeral<int1> : TrueTypeTrait {};
template <>
struct IsCatNumeral<int2> : TrueTypeTrait {};
template <>
struct IsCatNumeral<int4> : TrueTypeTrait {};
template <>
struct IsCatNumeral<int8> : TrueTypeTrait {};
template <>
struct IsCatNumeral<uint1> : TrueTypeTrait {};
template <>
struct IsCatNumeral<uint2> : TrueTypeTrait {};
template <>
struct IsCatNumeral<uint4> : TrueTypeTrait {};
template <>
struct IsCatNumeral<uint8> : TrueTypeTrait {};
template <>
struct IsCatNumeral<float4> : TrueTypeTrait {};
template <>
struct IsCatNumeral<float8> : TrueTypeTrait {};
template <typename U, typename Storage>
struct IsCatNumeral<ArithmeticPtr<U, Storage>> : TrueTypeTrait {};

template <typename T>
constexpr bool is_cat_numeral = IsCatNumeral<T>::value;

namespace detail {
    template <typename>
    struct IsIntegralTraitDetail : FalseTypeTrait {};

    template <>
    struct IsIntegralTraitDetail<char> : TrueTypeTrait {};
    template <>
    struct IsIntegralTraitDetail<char8_t> : TrueTypeTrait {};
    template <>
    struct IsIntegralTraitDetail<char16_t> : TrueTypeTrait {};
    template <>
    struct IsIntegralTraitDetail<char32_t> : TrueTypeTrait {};
    template <>
    struct IsIntegralTraitDetail<wchar_t> : TrueTypeTrait {};
    template <>
    struct IsIntegralTraitDetail<signed char> : TrueTypeTrait {};
    template <>
    struct IsIntegralTraitDetail<unsigned char> : TrueTypeTrait {};
    template <>
    struct IsIntegralTraitDetail<signed short> : TrueTypeTrait {};
    template <>
    struct IsIntegralTraitDetail<unsigned short> : TrueTypeTrait {};
    template <>
    struct IsIntegralTraitDetail<signed int> : TrueTypeTrait {};
    template <>
    struct IsIntegralTraitDetail<unsigned int> : TrueTypeTrait {};
    template <>
    struct IsIntegralTraitDetail<signed long> : TrueTypeTrait {};
    template <>
    struct IsIntegralTraitDetail<unsigned long> : TrueTypeTrait {};
    template <>
    struct IsIntegralTraitDetail<signed long long> : TrueTypeTrait {};
    template <>
    struct IsIntegralTraitDetail<unsigned long long> : TrueTypeTrait {};

    template <>
    struct IsIntegralTraitDetail<int1> : TrueTypeTrait {};
    template <>
    struct IsIntegralTraitDetail<uint1> : TrueTypeTrait {};
    template <>
    struct IsIntegralTraitDetail<int2> : TrueTypeTrait {};
    template <>
    struct IsIntegralTraitDetail<uint2> : TrueTypeTrait {};
    template <>
    struct IsIntegralTraitDetail<int4> : TrueTypeTrait {};
    template <>
    struct IsIntegralTraitDetail<uint4> : TrueTypeTrait {};
    template <>
    struct IsIntegralTraitDetail<int8> : TrueTypeTrait {};
    template <>
    struct IsIntegralTraitDetail<uint8> : TrueTypeTrait {};

    template <typename U, typename Storage>
    struct IsIntegralTraitDetail<ArithmeticPtr<U, Storage>> : TrueTypeTrait {};
    template <>
    struct IsIntegralTraitDetail<bool> : TrueTypeTrait {};
}  // namespace detail

template <typename T>
struct IsIntegralTrait : detail::IsIntegralTraitDetail<RemoveCv<T>> {};
template <typename T>
constexpr bool is_integral = IsIntegralTrait<T>::value;

template <typename T>
struct IsFloatingPointTrait
    : BoolConstantTrait<
          is_same<float, RemoveCv<T>> || is_same<double, RemoveCv<T>> ||
          is_same<float4, RemoveCv<T>> || is_same<float8, RemoveCv<T>> ||
          is_same<long double, RemoveCv<T>>> {};
template <typename T>
constexpr bool is_floating_point = IsFloatingPointTrait<T>::value;

using bool1 = bool;
struct bool2;
struct bool4;

template <typename T>
struct IsBoolTrait
    : BoolConstantTrait<
          is_same<bool, RemoveCv<T>> || is_same<bool1, RemoveCv<T>> ||
          is_same<bool2, RemoveCv<T>> || is_same<bool4, RemoveCv<T>>> {};
template <typename T>
constexpr bool is_bool = IsBoolTrait<T>::value;

template <typename T>
struct IsArithmeticTrait : ConditionalTrait<is_integral<T>, IsIntegralTrait<T>,
                                            IsFloatingPointTrait<T>>::Type {};

namespace detail {
    template <typename T, bool = IsArithmeticTrait<T>::value>
    struct IsSignedTraitDetail : BoolConstantTrait<T(-1) < T(0)> {};

    template <>
    struct IsSignedTraitDetail<int1, true> : TrueTypeTrait {};

    template <typename T>
    struct IsSignedTraitDetail<T, false> : FalseTypeTrait {};
}  // namespace detail

template <typename T>
struct IsSignedTrait : detail::IsSignedTraitDetail<T>::Type {};
template <typename T>
constexpr bool is_signed = IsSignedTrait<T>::value;
template <typename T>
using IsSigned = typename IsSignedTrait<T>::Type;

namespace detail {
    template <typename T, bool = IsArithmeticTrait<T>::value>
    struct IsUnsignedTraitDetail : BoolConstantTrait<T(0) < T(-1)> {};
    template <typename T>
    struct IsUnsignedTraitDetail<T, false> : FalseTypeTrait {};
}  // namespace detail

template <typename T>
struct IsUnsignedTrait : detail::IsUnsignedTraitDetail<T>::Type {};
template <typename T>
constexpr bool is_unsigned = IsUnsignedTrait<T>::value;
template <typename T>
using IsUnsigned = typename IsUnsignedTrait<T>::Type;

template <typename T>
struct IsVoidTrait : IsSameTrait<void, RemoveCv<T>> {};
template <typename T>
using IsVoid = typename IsVoidTrait<T>::Type;
template <typename T>
constexpr bool is_void = IsVoidTrait<T>::value;

template <typename>
struct IsConstTrait : FalseTypeTrait {};
template <typename T>
struct IsConstTrait<T const> : TrueTypeTrait {};
template <typename T>
using IsConst = typename IsConstTrait<T>::Type;
template <typename T>
constexpr bool is_const = IsConstTrait<T>::value;

template <typename>
struct IsVolatileTrait : FalseTypeTrait {};
template <typename T>
struct IsVolatileTrait<T volatile> : TrueTypeTrait {};
template <typename T>
constexpr bool is_volatile = IsVolatileTrait<T>::value;

namespace detail {
    template <typename T>
    struct IsPointerTraitDetail : FalseTypeTrait {};
    template <typename T>
    struct IsPointerTraitDetail<T*> : TrueTypeTrait {};
}  // namespace detail

template <typename T>
struct IsPointerTrait : detail::IsPointerTraitDetail<T> {};
template <typename T>
constexpr bool is_pointer = IsPointerTrait<T>::value;
template <typename T>
using IsPointer = typename IsPointerTrait<T>::Type;

template <typename>
struct IsArrayTrait : FalseTypeTrait {};
template <typename T, int size>
struct IsArrayTrait<T[size]> : TrueTypeTrait {};
template <typename T>
struct IsArrayTrait<T[]> : TrueTypeTrait {};
template <typename T>
constexpr bool is_array = IsArrayTrait<T>::value;
template <typename T>
using IsArray = typename IsArrayTrait<T>::Type;

template <typename T>
struct RemoveExtentTrait {
    using Type = T;
};

template <typename T, int size>
struct RemoveExtentTrait<T[size]> {
    using Type = T;
};

template <typename T>
struct RemoveExtentTrait<T[]> {
    using Type = T;
};

template <typename T>
struct IsFunctionTrait : BoolConstantTrait<!is_const<T const>> {};
template <typename T>
struct IsFunctionTrait<T&> : FalseTypeTrait {};
template <typename T>
struct IsFunctionTrait<T&&> : FalseTypeTrait {};
template <typename T>
constexpr bool is_function = IsFunctionTrait<T>::value;

template <typename T, typename = void>
struct IsReferenceableTrait : FalseTypeTrait {};
template <typename T>
struct IsReferenceableTrait<T, detail::Void<T&>> : TrueTypeTrait {};

namespace detail {
    template <typename T>
    struct IsMemberPointerTraitDetail : FalseTypeTrait {};
    template <typename T, typename U>
    struct IsMemberPointerTraitDetail<T U::*> : TrueTypeTrait {};
}  // namespace detail

template <typename T>
struct IsMemberPointerTrait : detail::IsMemberPointerTraitDetail<RemoveCv<T>> {
};
template <typename T>
constexpr bool is_member_pointer = IsMemberPointerTrait<T>::value;

template <typename T>
struct IsNullPointerTrait : IsSameTrait<decltype(nullptr), RemoveCv<T>> {};

template <typename T>
constexpr bool is_null_pointer = IsNullPointerTrait<T>::value;

template <typename T>
struct IsScalarTrait
    : BoolConstantTrait<IsArithmeticTrait<T>::value || IsEnumTrait<T>::value ||
                        IsPointerTrait<T>::value ||
                        IsMemberPointerTrait<T>::value ||
                        IsNullPointerTrait<T>::value> {};

template <typename T>
constexpr bool is_scalar = IsScalarTrait<T>::value;

namespace detail {
    template <typename T, bool = ConditionalTrait<
                              IsReferenceableTrait<T>::value,
                              IsReferenceableTrait<T>, IsVoidTrait<T>>::value>
    struct AddPointerTraitDetail {
        using Type = T;
    };

    template <typename T>
    struct AddPointerTraitDetail<T, true> {
        using Type = RemoveReference<T>*;
    };
}  // namespace detail

template <typename T>
struct AddPointerTrait : detail::AddPointerTraitDetail<T> {};
template <typename T>
using AddPointer = typename AddPointerTrait<T>::Type;

namespace detail {
    template <typename T>
    auto add_lvalue_reference_trait_detail(int) -> TypeIdentityTrait<T&>;
    template <typename T>
    auto add_lvalue_reference_trait_detail(...) -> TypeIdentityTrait<T>;
}  // namespace detail

template <typename T>
struct AddLvalueReferenceTrait
    : decltype(detail::add_lvalue_reference_trait_detail<T>(0)) {};
template <typename T>
using AddLvalueReference = typename AddLvalueReferenceTrait<T>::Type;

template <typename>
struct IsLvalueReferenceTrait : FalseTypeTrait {};
template <typename T>
struct IsLvalueReferenceTrait<T&> : TrueTypeTrait {};
template <typename T>
constexpr bool is_lvalue_reference = IsLvalueReferenceTrait<T>::value;
template <typename T>
using IsLvalueReference = typename IsLvalueReferenceTrait<T>::Type;

namespace detail {
    template <typename T>
    auto add_rvalue_reference_trait_detail(int) -> TypeIdentityTrait<T&&>;
    template <typename T>
    auto add_rvalue_reference_trait_detail(...) -> TypeIdentityTrait<T>;
}  // namespace detail

template <typename T>
struct AddRvalueReferenceTrait
    : decltype(detail::add_rvalue_reference_trait_detail<T>(0)) {};
template <typename T>
using AddRvalueReference = typename AddRvalueReferenceTrait<T>::Type;

template <typename>
struct IsRvalueReferenceTrait : FalseTypeTrait {};
template <typename T>
struct IsRvalueReferenceTrait<T&&> : TrueTypeTrait {};
template <typename T>
constexpr bool is_rvalue_reference = IsRvalueReferenceTrait<T>::value;
template <typename T>
using IsRvalueReference = typename IsRvalueReferenceTrait<T>::Type;

template <typename T>
struct DecayTrait {
  private:
    using U = typename RemoveReferenceTrait<T>::Type;

  public:
    using Type = typename ConditionalTrait<
        IsArrayTrait<U>::value, typename RemoveExtentTrait<U>::Type*,
        typename ConditionalTrait<IsFunctionTrait<U>::value,
                                  typename AddPointerTrait<U>::Type,
                                  typename RemoveCvTrait<U>::Type>::Type>::Type;
};
template <typename T>
using Decay = typename DecayTrait<T>::Type;

// `__underlying_type` is a GNU builtin.
template <typename T>
struct UnderlyingTypeTrait {
    using Type = __underlying_type(T);
};
template <typename T>
using UnderlyingType = typename UnderlyingTypeTrait<T>::Type;

namespace detail {
    template <typename T>
    auto returnable_detail(int)
        -> decltype(void(static_cast<T (*)()>(nullptr)), TrueTypeTrait{});
    template <typename>
    auto returnable_detail(...) -> FalseTypeTrait;

    template <typename From, typename To>
    auto implicitly_convertible_detail(int)
        -> decltype(void(declval<void (&)(To)>()(declval<From>())),
                    TrueTypeTrait{});
    template <typename, typename>
    auto implicitly_convertible_detail(...) -> FalseTypeTrait;

    template <typename From, typename To>
    struct IsConvertibleTraitDetail
        : BoolConstantTrait<
              (decltype(detail::returnable_detail<To>(0))::value &&
               decltype(detail::implicitly_convertible_detail<From, To>(
                   0))::value) ||
              (is_void<From> && is_void<To>)> {};
}  // namespace detail

// TODO: Add an `IsImplicitlyConvertibleTrait`.

template <typename From, typename To>
struct IsConvertibleTrait : detail::IsConvertibleTraitDetail<From, To> {};
template <typename From, typename To>
constexpr bool is_convertible = IsConvertibleTrait<From, To>::value;

template <typename...>
struct ConjunctionTrait : TrueTypeTrait {};
template <typename B1>
struct ConjunctionTrait<B1> : B1 {};
template <typename B1, typename... Bn>
struct ConjunctionTrait<B1, Bn...>
    : Conditional<bool(B1::value), ConjunctionTrait<Bn...>, B1> {};

template <typename B1, typename... Bn>
using Conjunction = typename ConjunctionTrait<B1, Bn...>::Type;
template <typename B1, typename... Bn>
constexpr bool conjunction = ConjunctionTrait<B1, Bn...>::value;

namespace detail {
    template <typename T>
    auto sizable_trait_detail(int) -> decltype(sizeof(T), TrueTypeTrait{});
    template <typename>
    auto sizable_trait_detail(...) -> FalseTypeTrait;

    template <typename T>
    auto nonconvertible_to_int(int)
        -> decltype(static_cast<FalseTypeTrait (*)(int)>(nullptr)(
            declval<T>()));
    template <typename>
    auto nonconvertible_to_int(...) -> TrueTypeTrait;

    template <typename T>
    constexpr bool is_scoped_enum =
        conjunction<decltype(sizable_trait_detail<T>(0)),
                    decltype(nonconvertible_to_int<T>(0))>;
}  // namespace detail

template <typename>
struct IsScopedEnumTrait : FalseTypeTrait {};

template <typename T>
requires(is_enum<T> && !is_integral<T>) struct IsScopedEnumTrait<T>
    : BoolConstantTrait<detail::is_scoped_enum<T>> {
};

template <typename T>
using IsScopedEnum = typename IsScopedEnumTrait<T>::Type;
template <typename T>
constexpr bool is_scoped_enum = IsScopedEnumTrait<T>::value;

template <typename T>
struct IsObjectTrait : BoolConstantTrait<is_scalar<T> || is_array<T> ||
                                         is_union<T> || is_class<T>> {};
template <typename T>
constexpr bool is_object = IsObjectTrait<T>::value;

template <typename T, unsigned long = sizeof(T)>
constexpr auto is_complete_or_unbounded_trait(TypeIdentityTrait<T>)
    -> TrueTypeTrait {
    return {};
}

template <typename, unsigned = 0>
struct ExtentTrait;

template <typename>
struct RemoveAllExtentsTrait;

template <typename T>
struct RemoveAllExtentsTrait {
    using Type = T;
};

template <typename T>
struct RemoveAllExtentsTrait<T[]> {
    using Type = typename RemoveAllExtentsTrait<T>::Type;
};

template <typename T, unsigned long long N>
struct RemoveAllExtentsTrait<T[N]> {
    using Type = typename RemoveAllExtentsTrait<T>::Type;
};

template <typename T>
struct IsBoundedArrayTrait : FalseTypeTrait {};
template <typename T, signed long long N>
struct IsBoundedArrayTrait<T[N]> : TrueTypeTrait {};
template <typename T>
constexpr bool is_bounded_array = IsBoundedArrayTrait<T>::value;

template <typename T>
struct IsUnboundedArrayTrait : TrueTypeTrait {};
template <typename T, signed long long N>
struct IsUnboundedArrayTrait<T[N]> : FalseTypeTrait {};

namespace detail {
    // `__is_constructible` is a GNU builtin.
    template <typename T, typename... Args>
    struct IsConstructibleTraitDetail
        : BoolConstantTrait<__is_constructible(T, Args...)> {};
}  // namespace detail

template <typename T, typename... Args>
struct IsConstructibleTrait : detail::IsConstructibleTraitDetail<T, Args...> {};
template <typename T, typename... Args>
constexpr bool is_constructible = IsConstructibleTrait<T, Args...>::value;
template <typename T, typename... Args>
using IsConstructible = typename IsConstructibleTrait<T, Args...>::Type;

// `__is_trivially_constructible` is a GNU builtin.
template <typename T, typename... Args>
struct IsTriviallyConstructibleTrait
    : BoolConstantTrait<__is_trivially_constructible(T, Args...)> {};
template <typename T, typename... Args>
constexpr bool is_trivially_constructible =
    IsTriviallyConstructibleTrait<T, Args...>::value;

template <typename T>
struct IsDefaultConstructibleTrait
    : detail::IsConstructibleTraitDetail<T>::Type {};
template <typename T>
constexpr bool is_default_constructible = IsDefaultConstructibleTrait<T>::value;

template <typename T>
struct IsTriviallyDefaultConstructibleTrait
    : BoolConstantTrait<is_trivially_constructible<T>> {};
template <typename T>
constexpr bool is_trivially_default_constructible =
    IsTriviallyDefaultConstructibleTrait<T>::value;

template <typename T>
struct IsCopyConstructibleTrait
    : IsConstructibleTrait<T, AddLvalueReference<AddConst<T>>> {};
template <typename T>
constexpr bool is_copy_constructible = IsCopyConstructibleTrait<T>::value;

template <typename T>
struct IsTriviallyCopyConstructibleTrait
    : IsTriviallyConstructibleTrait<T, AddLvalueReference<AddConst<T>>> {};
template <typename T>
constexpr bool is_trivially_copy_constructible =
    IsTriviallyCopyConstructibleTrait<T>::value;

template <typename T>
struct IsMoveConstructibleTrait
    : IsConstructibleTrait<T, AddRvalueReference<T>> {};
template <typename T>
constexpr bool is_move_constructible = IsMoveConstructibleTrait<T>::value;

template <typename T>
struct IsTriviallyMoveConstructibleTrait
    : IsTriviallyConstructibleTrait<T, AddRvalueReference<T>> {};
template <typename T>
constexpr bool is_trivially_move_constructible =
    IsTriviallyMoveConstructibleTrait<T>::value;

namespace detail {
    struct TryDestructorTraitDetail {
        template <typename T, typename = decltype(declval<T&>().~T())>
        static auto truth_value(int) -> TrueTypeTrait;

        template <typename T>
        static auto truth_value(...) -> FalseTypeTrait;
    };

    template <typename T>
    struct IsDestructibleBaseDetail : TryDestructorTraitDetail {
        using Type = decltype(truth_value<T>(0));
    };

    template <typename T,
              bool = Conditional<is_void<T>, IsUnboundedArrayTrait<T>,
                                 IsFunctionTrait<T>>::value,
              bool = Conditional<is_reference<T>, IsReferenceTrait<T>,
                                 IsScalarTrait<T>>::value>
    struct IsDestructibleTraitDetail;

    template <typename T>
    struct IsDestructibleTraitDetail<T, false, false>
        : IsDestructibleBaseDetail<
              typename RemoveAllExtentsTrait<T>::Type>::Type {};

    template <typename T>
    struct IsDestructibleTraitDetail<T, true, false> : FalseTypeTrait {};

    template <typename T>
    struct IsDestructibleTraitDetail<T, false, true> : TrueTypeTrait {};
}  // namespace detail

template <typename T>
struct IsDestructibleTrait : detail::IsDestructibleTraitDetail<T>::Type {};
template <typename T>
constexpr bool is_destructible = IsDestructibleTrait<T>::value;

// `__has_trivial_destructor()` is a GNU builtin.
template <typename T>
struct IsTriviallyDestructibleTrait
    : Conditional<is_destructible<T>,
                  BoolConstantTrait<__has_trivial_destructor(T)>,
                  IsDestructibleTrait<T>> {};

template <typename T>
constexpr bool is_trivially_destructible =
    IsTriviallyDestructibleTrait<T>::value;

// `__is_assingable` is a GNU builtin.
template <typename T, typename U>
struct IsAssignableTrait : BoolConstantTrait<__is_assignable(T, U)> {};
template <typename T, typename U>
constexpr bool is_assignable = IsAssignableTrait<T, U>::value;

// `__is_trivially_assignable` is a GNU builtin.
template <typename T, typename U>
struct IsTriviallyAssignableTrait
    : BoolConstantTrait<__is_trivially_assignable(T, U)> {};
template <typename T, typename U>
constexpr bool is_trivially_assignable =
    IsTriviallyAssignableTrait<T, U>::value;

template <typename T>
struct IsCopyAssignableTrait
    : IsAssignableTrait<AddLvalueReference<T>, AddLvalueReference<T const>> {};
template <typename T>
constexpr bool is_copy_assignable = IsCopyAssignableTrait<T>::value;

template <typename T>
struct IsTriviallyCopyAssignableTrait
    : IsTriviallyAssignableTrait<AddLvalueReference<T>,
                                 AddLvalueReference<T const>> {};
template <typename T>
constexpr bool is_trivially_copy_assignable =
    IsTriviallyCopyAssignableTrait<T>::value;

template <typename T>
struct IsMoveAssignableTrait
    : IsAssignableTrait<AddLvalueReference<T>, AddRvalueReference<T>> {};
template <typename T>
constexpr bool is_move_assignable = IsMoveAssignableTrait<T>::value;

template <typename T>
struct IsTriviallyMoveAssignableTrait
    : IsTriviallyAssignableTrait<AddLvalueReference<T>, AddRvalueReference<T>> {
};
template <typename T>
constexpr bool is_trivially_move_assignable =
    IsTriviallyMoveAssignableTrait<T>::value;

// `__is_trivially_copyable()` is a GNU builtin.
template <typename T>
struct IsTriviallyCopyableTrait
    : BoolConstantTrait<__is_trivially_copyable(T)> {};
template <typename T>
constexpr bool is_trivially_copyable = IsTriviallyCopyableTrait<T>::value;

template <typename T>
struct IsTrivialTrait
    : BoolConstantTrait<cat::is_trivially_copyable<T> &&
                        cat::is_trivially_default_constructible<T>> {};
template <typename T>
constexpr bool is_trivial = IsTrivialTrait<T>::value;

// https://stackoverflow.com/a/31763111
template <typename T, template <typename...> typename Template>
struct IsSpecializationTrait : FalseTypeTrait {};

// TODO: Support template with multiple parameters.
template <template <typename...> typename Template, typename... Args>
struct IsSpecializationTrait<Template<Args...>, Template> : TrueTypeTrait {};

namespace detail {
    template <typename T>
    struct InvokeTraitDetail {
        template <typename Function, typename... Args>
        static auto call(Function&& callback, Args&&... args)
            -> decltype(forward<Function>(callback)(forward<Args>(args)...));
    };

    template <typename B, typename MyType>
    struct InvokeTraitDetail<MyType B::*> {
        template <typename T>
        static auto get(T&& t) -> T&& requires(is_base_of<B, Decay<T>>);

        template <typename T>
        static auto get_detail(T&& t)
            -> decltype(*forward<T>(t)) requires(!is_base_of<B, Decay<T>>);

        template <typename T, typename... Args, typename U>
        static auto call(U B::*p_function, T&& t, Args&&... args)
            -> decltype((*(InvokeTraitDetail::get(forward<T>(t)).p_function))(
                forward<Args>(args)...)) requires(is_function<U>);

        template <typename T>
        static auto call(MyType B::*p_function, T&& t)
            -> decltype(*(InvokeTraitDetail::get(forward<T>(t)).p_function));
    };

    template <typename Function, typename... Args,
              typename Fd = typename DecayTrait<Function>::Type>
    auto try_invoke_detail(Function&& callback, Args&&... args)
        -> decltype(InvokeTraitDetail<Fd>::call(forward<Function>(callback),
                                                forward<Args>(args)...));

    template <typename AlwaysVoid, typename, typename...>
    struct InvokeResultTraitDetail {};
    template <typename Function, typename... Args>
    struct InvokeResultTraitDetail<decltype(void(detail::try_invoke_detail(
                                       declval<Function>(),
                                       declval<Args>()...))),
                                   Function, Args...> {
        using Type = decltype(detail::try_invoke_detail(declval<Function>(),
                                                        declval<Args>()...));
    };
}  // namespace detail

template <typename Function, typename... ArgTypes>
struct InvokeResultTrait
    : detail::InvokeResultTraitDetail<void, Function, ArgTypes...> {};

template <typename Function, typename... ArgTypes>
using InvokeResult = typename InvokeResultTrait<Function, ArgTypes...>::Type;

namespace detail {
    template <typename T, typename U, bool = IsVoidTrait<U>::value,
              typename = void>
    struct IsInvocableTraitDetail : FalseTypeTrait {};

    template <typename T, typename U>
    struct IsInvocableTraitDetail<T, U, true, Void<typename T::Type>>
        : TrueTypeTrait {};

    template <typename TResult, typename UReturn>
    struct IsInvocableTraitDetail<TResult, UReturn, false,
                                  Void<typename TResult::Type>> {
      private:
        static auto get() -> typename TResult::Type;

        template <typename T>
        static void try_conversion(T);

        template <typename T, typename = decltype(try_conversion<T>(get()))>
        static auto test(int) -> TrueTypeTrait;

        template <typename T>
        static auto test(...) -> FalseTypeTrait;

      public:
        using Type = decltype(test<UReturn>(1));
    };
}  // namespace detail

template <typename Function, typename... ArgTypes>
struct IsInvocableTrait
    : detail::IsInvocableTraitDetail<InvokeResultTrait<Function, ArgTypes...>,
                                     void>::Type {};
template <typename Function, typename... Args>
constexpr bool is_invocable = IsInvocableTrait<Function, Args...>::value;

template <typename Function, typename... Args>
constexpr auto invoke(Function&& callback, Args&&... args)
    -> InvokeResult<Function, Args...> {
    // TODO: Handle member functions.
    return forward<Function>(callback)(forward<Args>(args)...);
}

// https://quuxplusone.github.io/blog/2019/02/06/arrow-proxy/
template <class Reference>
struct ArrowProxy {
    Reference reference;
    auto operator->() -> Reference* {
        return &reference;
    }
};

template <typename Function>
consteval auto constant_evaluate(auto value) requires(is_invocable<Function>);

consteval auto constant_evaluate(auto value);

template <typename T, typename U>
concept SameAs = is_same<T, U>;

template <typename T>
concept Integral = is_integral<T>;

template <typename T>
concept SignedIntegral = Integral<T> && is_signed<T>;

template <typename T>
concept UnsignedIntegral = Integral<T> && is_unsigned<T>;

template <typename T>
concept FloatingPoint = !Integral<T> && is_floating_point<T>;

// TODO: is_safe_integral<T> does not work.
template <typename T>
concept SafeIntegral = (!is_integral<T>)&&(!is_floating_point<T>);

// TODO: Support more string types.
// template <typename T>
// concept string =
//     (is_same<RemoveConst<RemoveReference<T>>,
//                    char8_t const*> ||
//      is_same<RemoveConst<RemoveReference<T>>, char
//      const*>);

template <typename T>
concept Bool = is_bool<T>;

template <typename Derived, typename Base>
concept DerivedFrom = is_base_of<Base, Derived> &&
    is_convertible<const volatile Derived*, const volatile Base*>;

template <typename From, typename To>
concept ConvertibleTo = is_convertible<From, To> && requires {
    static_cast<To>(declval<From>());
};

template <typename T, typename... Args>
concept ConstructibleFrom = is_constructible<T, Args...>;

template <typename T>
concept MoveConstructible = ConstructibleFrom<T, T> && ConvertibleTo<T, T>;

template <typename T>
concept CopyConstructible =
    MoveConstructible<T> && ConstructibleFrom<T, T&> && ConvertibleTo<T&, T> &&
    ConstructibleFrom<T, T const&> && ConvertibleTo<T const&, T> &&
    ConstructibleFrom<T, T const> && ConvertibleTo<T const, T>;

// boolean_testable is adapted from the exposition-only concept
// boolean-testable. This converts a Type into `bool` rather than `bool1`
// because that simplifies compilation.
namespace detail {
    template <typename T>
    concept BooleanTestableDetail = ConvertibleTo<T, bool>;
}

template <typename T>
concept BooleanTestable = detail::BooleanTestableDetail<T> && requires(T&& b) {
    { !forward<T>(b) } -> detail::BooleanTestableDetail;
};

// boolean_testable is adapted from the exposition-only concept
// `__WeaklyEqualityComparableWith`.
namespace detail {
    template <typename T, typename U>
    concept WeaklyEqualityComparableWithDetail =
        requires(RemoveReference<T> const& t, RemoveReference<U> const& u) {
        { t == u } -> BooleanTestableDetail;
        { t != u } -> BooleanTestableDetail;
        { u == t } -> BooleanTestableDetail;
        { u != t } -> BooleanTestableDetail;
    };
}  // namespace detail

template <typename T>
concept EqualityComparable = detail::WeaklyEqualityComparableWithDetail<T, T>;

template <typename T>
concept Enumerable = requires(T it) {
    it[0];
};

template <typename T>
concept SafelyEnumerable = requires(T it) {
    it.at(0).value();
};

template <typename T>
concept EnumClass = is_scoped_enum<T>;

template <typename T, typename U>
concept NarrowConvertible = requires() {
    U({declval<T>()});
};

template <typename Function, typename... Args>
concept Invocable = is_invocable<Function, Args...>;

// TODO: Support any integral.
template <int value>
concept PowerOfTwo = ((value & (value - 1)) == 0);

}  // namespace cat

#include "./implementations/constant_evaluate.tpp"
