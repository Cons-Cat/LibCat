// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/memory>
#include <cat/meta>

namespace cat {

// TODO: More iterable related concepts.
template <typename T>
concept Iterable = requires(T t) {
    t.begin();
    t.end();
};

namespace detail {
    template <typename T>
    concept HasIncrement = requires(T it) {
        it.increment();
    };

    template <typename T>
    concept HasDecrement = requires(T it) {
        it.decrement();
    };

    template <typename T>
    concept HasDistance = requires(T const t) {
        t.distance(t);
    };

    template <typename T>
    concept HasEqualTo = requires(T const it) {
        { it.equal_to(it) } -> ConvertibleTo<bool>;
    };

    template <typename>
    struct InferDifferenceType {
        using type = ssize;
    };

    // Case when `T` provides `.distance()`
    template <detail::HasDistance T>
    struct InferDifferenceType<T> {
        static T const& it;
        using type = decltype(it.distance(it));
    };

    template <typename...>
    struct InferValueType {};

    template <typename T>
    struct InferValueType<T> {
        static const T& it;
        using type = RemoveCvref<decltype(*it)>;
    };

    template <typename T>
    requires requires {
        typename T::value_type;
    }
    struct InferValueType<T> {
        using type = typename T::value_type;
    };

    template <typename T>
    concept HasAdvance = requires(T it, InferDifferenceType<T> const offset) {
        it.advance(offset);
    };

    template <typename T>
    concept HasRandomAccess = HasAdvance<T> && HasDistance<T>;

    template <typename T>
    concept HasBidirectional = HasRandomAccess<T> || HasDecrement<T>;

    template <typename T>
    concept HasSinglePass = bool(T::single_pass_iterator);

    template <typename Iter, typename T>
    concept HasSentinel = SameAs<T, typename T::sentinel_type>;
}  // namespace detail

template <typename T>
using InferDifferenceType = typename detail::InferDifferenceType<T>::type;

template <typename Arg, typename Iter>
concept DifferenceTypeArg = ConvertibleTo<Arg, InferDifferenceType<Iter>>;

template <typename T>
using InferValueType_t = typename detail::InferValueType<T>::type::type;

// Every `IteratorFacade` is `indirectly_readable`.
template <typename Derived>
struct IteratorFacade {
    // `Type` is needed for reversing.
    using Type = Derived;

    constexpr auto self() -> Derived& {
        return static_cast<Derived&>(*this);
    }

    constexpr auto self() const -> Derived const& {
        return static_cast<Derived const&>(*this);
    }

    constexpr auto operator*() -> decltype(auto) {
        return this->self().dereference();
    }

    constexpr auto operator*() const -> decltype(auto) {
        return this->self().dereference();
    }

    constexpr auto operator->() const {
        decltype(auto) reference = **this;
        if constexpr (is_reference<decltype(reference)>) {
            // If `reference` is actually a reference type, return its
            // address.
            return addressof(reference);
        } else {
            return ArrowProxy(move(reference));
        }
    }

    constexpr friend auto operator==(Derived const& left, Derived const& right)
        -> bool {
        if constexpr (detail::HasEqualTo<Derived>) {
            return left.equal_to(right);
        } else {
            return left.distance(right) == 0;
        }
    }

    constexpr friend auto operator==(Derived const& self,
                                     detail::HasSentinel<Derived> auto)
        -> bool {
        return self.at_end();
    }

    constexpr friend auto operator+(Derived left,
                                    DifferenceTypeArg<Derived> auto offset)
        -> Derived {
        if constexpr (detail::HasAdvance<Derived>) {
            return left += offset;
        } else {
            for (ssize i = 0; i < offset; i++) {
                ++left;
            }
            return left;
        }
    }

    constexpr friend auto operator+(DifferenceTypeArg<Derived> auto offset,
                                    Derived right) -> Derived {
        if constexpr (detail::HasAdvance<Derived>) {
            return right += offset;
        } else {
            for (ssize i = 0; i < offset; i++) {
                ++right;
            }
            return right;
        }
    }

    constexpr friend auto operator+=(Derived& self,
                                     DifferenceTypeArg<Derived> auto offset)
        -> Derived& {
        if constexpr (detail::HasAdvance<Derived>) {
            self.advance(static_cast<int>(offset));
        } else {
            for (ssize i = 0; i < offset; i++) {
                self.increment();
            }
        }
        return self;
    }

    // Increment or advance forwards with prefix notation.
    constexpr auto operator++() -> Derived& {
        if constexpr (detail::HasIncrement<Derived>) {
            this->self().increment();
        } else {
            this->self().advance(1);
        }
        return this->self();
    }

    // Increment or advance forwards with postfix notation.
    constexpr auto operator++(int) -> Derived {
        auto copy = this->self();
        ++(*this);
        return copy;
    }

    constexpr friend auto operator-(const Derived& left, const Derived& right)
        -> Derived& {
        return right.distance(left);
    }

    constexpr friend auto operator-(Derived left,
                                    DifferenceTypeArg<Derived> auto offset)
        -> Derived {
        if constexpr (detail::HasAdvance<Derived>) {
            return left - offset;
        } else {
            for (ssize i = 0; i < offset; i++) {
                --left;
            }
            return left;
        }
    }

    constexpr friend auto operator-=(Derived& left,
                                     DifferenceTypeArg<Derived> auto offset)
        -> Derived& {
        if constexpr (detail::HasAdvance<Derived>) {
            return left -= offset;
        } else {
            for (ssize i = 0; i < offset; i++) {
                --left;
            }
            return left;
        }
    }

    // Decrement or advance backwards with prefix notation.
    constexpr auto operator--() -> Derived& {
        if constexpr (detail::HasDecrement<Derived>) {
            this->self().decrement();
        } else {
            this->self().advance(-1);
        }
        return this->self();
    }

    // Decrement or advance backwards with postfix notation.
    constexpr auto operator--(int) -> Derived& {
        auto copy = this->self();
        --(*this);
        return copy;
    }

    // TODO: This seems incorrect.
    // Random-access.
    constexpr auto operator[](DifferenceTypeArg<Derived> auto offset)
        -> decltype(auto) requires detail::HasAdvance<Derived> {
        return *(this->self() + offset);
    }

    // TODO: Support `<=>` operator.
};

struct RandomAccessIteratorTag {};
struct BidirectionalIteratorTag {};
struct ForwardIteratorTag {};
struct InputIteratorTag {};
struct OutputIteratorTag {};
struct ContiguousIteratorTag {};

template <typename T>
requires is_base_of<IteratorFacade<T>, T>
struct IteratorTraits {
    static T const& it;
    using Value = typename InferValueType_t<T>::type;
    using Reference = decltype(*it);
    using Pointer = decltype(it.operator->());
    using Difference = InferDifferenceType<T>;
    using Category = Conditional<
        // If this can be a random access iterator, it always will be.
        detail::HasRandomAccess<T>, RandomAccessIteratorTag,
        Conditional<
            // If this has a `++` and a `--` operator, this is a
            // bidirectional iterator.
            detail::HasBidirectional<T>, BidirectionalIteratorTag,
            Conditional<detail::HasSinglePass<T>,
                        // If it is single-pass, this is a forward
                        // iterator.
                        InputIteratorTag,
                        // Default to a forward iterator.
                        ForwardIteratorTag>>>;
    // using IteratorConcept = Category;
};

template <typename T>
struct ReversedIterator : IteratorFacade<ReversedIterator<T>> {
    T iterator;

    // Forward any constructor to `iterator`.
    template <typename... Args>
    constexpr ReversedIterator(Args&&... args)
        : iterator(forward<Args>(args)...){};

    constexpr auto dereference() {
        return this->iterator.dereference();
    }

    constexpr auto dereference() const {
        return this->iterator.dereference();
    }

    constexpr void advance(int const offset) requires(detail::HasAdvance<T>) {
        this->iterator.advance(-offset);
    }

    constexpr void increment() {
        --iterator;
    }

    constexpr void decrement() {
        ++iterator;
    }

    // TODO: Use safe arithmetic here.
    constexpr auto distance(ReversedIterator<T> const other) const -> int {
        return this->iterator.distance(other.iterator).c();
    }
};

template <Iterable T>
class AsReverse {
    T& iterable;

  public:
    constexpr explicit AsReverse(T& iterable) : iterable{iterable} {};

    constexpr auto begin() {
        return iterable.rbegin();
    }

    constexpr auto end() {
        return iterable.rend();
    }

    constexpr auto begin() const {
        return iterable.rbegin();
    }

    constexpr auto end() const {
        return iterable.rend();
    }
};

template <Iterable T>
class AsConst {
    T& iterable;

  public:
    constexpr explicit AsConst(T& iterable) : iterable{iterable} {};

    constexpr auto begin() const {
        return iterable.cbegin();
    }

    constexpr auto end() const {
        return iterable.cend();
    }
};

template <Iterable T>
class AsConstReverse {
    T& iterable;

  public:
    constexpr explicit AsConstReverse(T& iterable) : iterable{iterable} {};

    constexpr auto begin() const {
        return iterable.crbegin();
    }

    constexpr auto end() const {
        return iterable.crend();
    }
};

template <typename T>
concept RandomAccessIterator =
    is_same<typename IteratorTraits<T>::Category, RandomAccessIteratorTag>;

template <typename T>
concept BidirectionalIterator =
    is_same<typename IteratorTraits<T>::Category, BidirectionalIteratorTag>;

template <typename T>
concept ForwardIterator =
    is_same<typename IteratorTraits<T>::Category, ForwardIteratorTag>;

}  // namespace cat
