// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <buffer>
#include <linux>

// TODO: Socket descriptor types for `SOCK_STREAM` and `SOCK_SEQPACKET`.

// Basic Socket type that any other sockets must convert into.
struct Socket {
    uint2 family;
    char data[14];
};

enum class SocketType
{
    stream = 1,
    data_gram = 2,
    raw = 3,
    reliable_data_gram = 4,
    sequenced_packet = 5,
    dccp = 6
};

template <int2 Family, SocketType Type, int4 Protocol>
struct SocketAttributes {
    // static constexpr int2 family = Family;
    int2 const family = Family;
    static constexpr SocketType type = Type;
    static constexpr int4 protocol = Protocol;
};

template <SocketType Type, int4 Protocol = 0>
struct SocketLocal {
    SocketAttributes<1, Type, Protocol> const attributes;
    // TODO: `path_name` should be some kind of span type.
    Buffer<char, 108> path_name;
    FileDescriptor descriptor;

    SocketLocal() = default;
    SocketLocal(FileDescriptor const in_descriptor) {
        this->descriptor = in_descriptor;
    }

    // Get the size of this struct, not considering the `FileDescriptor` that it
    // holds.
    auto get_size() -> isize {
        return sizeof(attributes) + sizeof(path_name);
    }

    // Create and return a `Socket`.
    auto create() -> Result<> {
        Result<int8> result = nix::create_socket(
            this->attributes.family, static_cast<int>(Type), Protocol);
        if (result.is_okay) {
            this->descriptor = result.value;
        }
        return result;
    }

    // Connect a `Socket` to an address.
    auto connect() -> Result<> {
        return nix::connect_socket(this->descriptor, this, this->get_size());
    }

    auto close() -> Result<> {
        return nix::close(this->descriptor);
    }
};
