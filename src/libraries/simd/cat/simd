// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

// The Intel-style SIMD syntax is completely arbitrary in GCC. GNU implemented
//  it with wrapper libraries around their own more basic, arguably more
//  reasonable, compiler intrinsics which already understand arithmetic
//  operators, loads, sets, and many other common operations that Intel's wrap
//  inside a cumbersome interface. Then, authors of a SIMD wrapper library wrap
//  *those* wrappers with new ones to enhance their quality of life with
//  features that the basic compiler intrinsics largely already had. There are
//  three layers of technology to this for no reason!

//  To streamline this, libCat uses the intrinsics which GNU already provides,
//  and wraps it in one thin layer of technology.

#include <cat/meta>
#include <cat/numerals>

namespace cat {

// TODO: This comment is not currently accurate:
/* Vectors have weak alignment by default. It is up to users at call-site to
 * determine what alignment is appropriate for their use-case. All SIMD
 * functions are unaligned, which pays little, if any, penalty to aligned
 * vectors in modern implementations of SSE, AVX, and NEON architectures. */

template <typename T, ssize lanes, ssize alignment>
class alignas(alignment.c()) Simd {
    using Vector = Simd<T, lanes, alignment>;

  public:
    using Scalar = T;
    // `vector_size` is a GCC attribute that represents SIMD data-types.
    using Intrinsic [[gnu::vector_size(sizeof(T) * lanes.c()),
                      gnu::aligned(alignment.c())]] = T;
    Intrinsic value;

    constexpr Simd() = default;

    constexpr Simd(Vector const& operand) : value(operand.value){};

    constexpr Simd(Intrinsic const& values) : value(values){};

    constexpr Simd(Intrinsic&& values) : value(forward<Intrinsic>(values)){};

    template <typename... U>
    constexpr Simd(U... values) : value(Intrinsic{values...}){};

    // TODO: `__builtin_convertvector()` wrapped by conversion operators.

    constexpr auto operator=(Vector operand) -> Vector& {
        this->value = operand.value;
        return *this;
    }

    constexpr auto operator==(Vector const& operand) -> Vector {
        return Vector{.value = this->value == operand.value};
    }

    constexpr auto operator+(Vector operand) -> Vector {
        return Vector{this->value + operand.value};
    }
    constexpr auto operator+=(Vector const& operand) -> Vector& {
        this->value = this->value + operand.value;
        return *this;
    }

    constexpr auto operator-(Vector operand) -> Vector {
        return Vector{this->value - operand.value};
    }
    constexpr auto operator-=(Vector const& operand) -> Vector& {
        this->value = this->value - operand.value;
        return *this;
    }

    static consteval auto size() -> ssize {
        return lanes;
    }
};

}  // namespace cat

// Vectors of up to 32 1-byte integers are supported by AVX2.
using int1x2 = cat::Simd<int1::Type, 2, 32>;
using int1x4 = cat::Simd<int1::Type, 4, 32>;
using int1x8 = cat::Simd<int1::Type, 8, 32>;
using int1x16 = cat::Simd<int1::Type, 16, 32>;
using int1x32 = cat::Simd<int1::Type, 32, 32>;
using int1x_ = int1x32;

using uint1x2 = cat::Simd<uint1::Type, 2, 32>;
using uint1x4 = cat::Simd<uint1::Type, 4, 32>;
using uint1x8 = cat::Simd<uint1::Type, 8, 32>;
using uint1x16 = cat::Simd<uint1::Type, 16, 32>;
using uint1x32 = cat::Simd<uint1::Type, 32, 32>;
using uint1x_ = uint1x32;

// Strings need their own vectors.
using char1x2 = cat::Simd<char, 2, 1>;
using char1x4 = cat::Simd<char, 4, 1>;
using char1x8 = cat::Simd<char, 8, 1>;
using char1x16 = cat::Simd<char, 16, 1>;
using char1x32 = cat::Simd<char, 32, 1>;
using char1x_ = char1x32;

// Vectors of up to 16 2-byte integers are supported by AVX2.
using int2x2 = cat::Simd<int2::Type, 2, 32>;
using int2x4 = cat::Simd<int2::Type, 4, 32>;
using int2x8 = cat::Simd<int2::Type, 8, 32>;
using int2x16 = cat::Simd<int2::Type, 16, 32>;
using int2x_ = int2x16;

using uint2x2 = cat::Simd<uint2::Type, 2, 32>;
using uint2x4 = cat::Simd<uint2::Type, 4, 32>;
using uint2x8 = cat::Simd<uint2::Type, 8, 32>;
using uint2x16 = cat::Simd<uint2::Type, 16, 32>;
using uint2x_ = uint2x16;

// TODO: Support 2-byte chars in string algorithms.
using char2x2 = cat::Simd<char16_t, 2, 2>;
using char2x4 = cat::Simd<char16_t, 4, 2>;
using char2x8 = cat::Simd<char16_t, 8, 2>;
using char2x16 = cat::Simd<char16_t, 16, 2>;
using char2x_ = char2x16;

// Vectors of up to 8 4-byte integers are supported by AVX2.
using int4x2 = cat::Simd<int4::Type, 2, 32>;
using int4x4 = cat::Simd<int4::Type, 4, 32>;
using int4x8 = cat::Simd<int4::Type, 8, 32>;
using int4x_ = int4x8;

using uint4x2 = cat::Simd<uint4::Type, 2, 32>;
using uint4x4 = cat::Simd<uint4::Type, 4, 32>;
using uint4x8 = cat::Simd<uint4::Type, 8, 32>;
using uint4x_ = uint4x8;

// Vectors of up to 4 8-byte integers are supported by AVX2.
using int8x2 = cat::Simd<int8::Type, 2, 32>;
using int8x4 = cat::Simd<int8::Type, 4, 32>;
using int8x_ = int8x4;

using uint8x2 = cat::Simd<uint8::Type, 2, 32>;
using uint8x4 = cat::Simd<uint8::Type, 4, 32>;
using uint8x_ = uint8x4;

// Vectors of up to 8 4-byte floats are supported by AVX2.
using float4x2 = cat::Simd<float4::Type, 2, 32>;
using float4x4 = cat::Simd<float4::Type, 4, 32>;
using float4x8 = cat::Simd<float4::Type, 8, 32>;
using float4x_ = float4x8;

// TODO: Evaluate what support for 8-byte `int`s exists in x86-64.

// Vectors of up to 4 8-byte floats are supported by AVX2.
using float8x2 = cat::Simd<float8::Type, 2, 32>;
using float8x4 = cat::Simd<float8::Type, 4, 32>;
using float8x_ = float8x4;

// Vectors of up to 32 1-byte bools are supported by AVX2.
using bool1x2 = cat::Simd<bool1, 2, 32>;
using bool1x4 = cat::Simd<bool1, 4, 32>;
using bool1x8 = cat::Simd<bool1, 8, 32>;
using bool1x16 = cat::Simd<bool1, 16, 32>;
using bool1x32 = cat::Simd<bool1, 32, 32>;
using bool1x_ = bool1x32;

// Vectors of up to 16 2-byte bools are supported by AVX2.
using bool2x2 = cat::Simd<bool2::Type, 2, 32>;
using bool2x4 = cat::Simd<bool2::Type, 4, 32>;
using bool2x8 = cat::Simd<bool2::Type, 8, 32>;
using bool2x16 = cat::Simd<bool2::Type, 16, 32>;
using bool2x_ = bool2x16;

// Vectors of up to 8 4-byte bools are supported by AVX2.
using bool4x2 = cat::Simd<bool4::Type, 2, 32>;
using bool4x4 = cat::Simd<bool4::Type, 4, 32>;
using bool4x8 = cat::Simd<bool4::Type, 8, 32>;
using bool4x_ = bool4x8;

namespace cat {

enum class StringControl : unsigned char {
    // Unsigned 1-byte characters.
    unsigned_byte = 0x00,
    // Unsigned 2-byte characters.
    unsigned_word = 0x01,
    // Signed 1-byte characters.
    signed_byte = 0x02,
    // Signed 2-byte characters.
    signed_word = 0x03,
    // Compare if any characters are equal.
    compare_equal_any = 0x00,
    // Compare ranges.
    compare_ranges = 0x04,
    // Compare if every character is equal.
    compare_equal_each = 0x08,
    // Compare equal ordered.
    compare_equal_ordered = 0x0c,
    // Polarity.
    positive_polarity = 0x00,
    // Negate the results.
    negative_polarity = 0x10,
    masked_positive_polarity = 0x20,
    // Negate the results only before the end of the string.
    masked_negative_polarity = 0x30,
    // Return the least significant bit.
    least_significant = 0x00,
    // Return the most significant bit.
    most_significant = 0x40,
    // Return a bit mask.
    bit_mask = 0x00,
    // Return a byte/word mask.
    unit_mask = 0x40,
};

// TODO: Generalize this.
constexpr auto operator|(StringControl flag_1, StringControl flag_2)
    -> StringControl {
    return static_cast<StringControl>(static_cast<unsigned char>(flag_1) |
                                      static_cast<unsigned char>(flag_2));
}

template <typename T>
consteval auto set_zeros() -> T;

// TODO: Use a vector concept.
auto shuffle(auto in_vector, auto mask);

// TODO: Make this const-correct.
template <typename T>
constexpr auto p_string_to_p_vector(char const* p_string) {
    return bit_cast<T*>(p_string);
}

template <StringControl control_mask>
constexpr auto compare_implicit_length_strings(auto const& vector_1,
                                               auto const& vector_2) -> bool1;

template <StringControl control_mask>
constexpr auto compare_implicit_length_strings_return_index(
    auto const& vector_1, auto const& vector_2) -> int4;

// TODO: Add `mfence` and `lfence`.
void sfence();
void zero_avx_registers();
void zero_upper_avx_registers();

// Constants for prefetch.
enum class PrefetchHint : int {
    // Prefetch data into non-temporal cache structure and into a location close
    // to the processor, minimizing cache pollution.
    non_temporal = 0,
    // Prefetch data into level 3 cache and higher, or an
    // implementation-specific choice.
    temporal_2 = 1,
    // Prefetch data into level 2 cache and higher.
    temporal_1 = 2,
    // Prefetch data into all levels of the cache hierarchy.
    temporal_0 = 3,
};

template <PrefetchHint hint>
void prefetch(void const* p_source) {
    __builtin_prefetch(p_source, static_cast<int>(hint) & 0x4 >> 2,
                       static_cast<int>(hint) & 0x3);
}

void prefetch_for_one_read(auto const* p_vector) {
    prefetch<PrefetchHint::non_temporal>(p_vector);
}

void prefetch_close(auto const* p_vector) {
    prefetch<PrefetchHint::temporal_0>(p_vector);
}

void prefetch_mid(auto const* p_vector) {
    prefetch<PrefetchHint::temporal_1>(p_vector);
}

void prefetch_far(auto const* p_vector) {
    prefetch<PrefetchHint::temporal_2>(p_vector);
}

void prefetch_for_modify(auto const* p_vector) {
    prefetch<PrefetchHint::temporal_0>(p_vector);
}

template <typename T>
void stream_in(void* p_destination, T const* p_source);

template <typename T>
auto move_mask(T vector) {
    if constexpr (sizeof(typename T::Scalar) == 1) {
        return __builtin_ia32_pmovmskb256(
            bit_cast<cat::Simd<char, T::size(),
                               // TODO: Make an `salignof()`.
                               static_cast<signed int long>(alignof(T))>>(
                vector)
                .value);
    } else {
        // TODO: Support additional vector sizes.
        static_assert("BAD!");
    }
}

// TODO: __builtin_cpu_init()
// must be called before these.

auto is_mmx_supported() -> bool1;
auto is_sse1_supported() -> bool1;
auto is_sse2_supported() -> bool1;
auto is_sse3_supported() -> bool1;
auto is_ssse3_supported() -> bool1;
auto is_sse4_1_supported() -> bool1;
auto is_sse4_2_supported() -> bool1;
auto is_avx_supported() -> bool1;
auto is_avx2_supported() -> bool1;
auto is_avx512f_supported() -> bool1;
auto is_avx512vl_supported() -> bool1;

}  // namespace cat

// clang-format off
#include "./implementations/compare_implicit_length_strings.tpp"
#include "./implementations/compare_implicit_length_strings_return_index.tpp"
#include "./implementations/set_zeros.tpp"
#include "./implementations/shuffle.tpp"
#include "./implementations/stream_in.tpp"
// clang-format on
