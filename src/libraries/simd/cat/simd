// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

// The Intel-style SIMD syntax is completely arbitrary in GCC. GNU implemented
//  it with wrapper libraries around their own more basic, arguably more
//  reasonable, compiler intrinsics which already understand arithmetic
//  operators, loads, sets, and many other common operations that Intel's wrap
//  inside a cumbersome interface. Then, authors of a SIMD wrapper library wrap
//  *those* wrappers with new ones to enhance their quality of life with
//  features that the basic compiler intrinsics largely already had. There are
//  three layers of technology to this for no reason!

//  To streamline this, libCat uses the intrinsics which GNU already provides,
//  and wraps it in one thin layer of technology.

#include <cat/meta>
#include <cat/numerals>

namespace cat {

// ABI tags for `Simd`. These are used for providing an extensible API by
// overloading functions for `Simd` objects with different ABI tags, as well as
// providing a type-safe API by requiring compatible ABI tags between `Simd`
// operands.
inline namespace simd_abi {
    // `FixedSizeAbi` is a portable SIMD ABI that can be expected to work across
    // any supported build target, so long as `in_lanes` does not exceed that
    // target's maximum vector size.
    template <typename T, ssize in_lanes>
    struct FixedSizeAbi {
        FixedSizeAbi() = delete;
        static constexpr ssize lanes = in_lanes;
        static constexpr ssize size = lanes * ssizeof<T>();
        // TODO: Make the alignment generally correct and efficient.
        static constexpr ssize alignment = 32;
    };

    // `Sse2Abi` is a SIMD ABI that can be expected to work on any x86-64 build
    // target.
    template <typename T>
    struct Sse42Abi {
        Sse42Abi() = delete;
        static constexpr ssize size = 16;
        static constexpr ssize lanes = size / ssizeof<T>();
        static constexpr ssize alignment = 16;
    };

    // `Avx2Abi` is a SIMD ABI that can be expected to work on most reasonable
    // x86-64 build target.
    template <typename T>
    struct Avx2Abi {
        Avx2Abi() = delete;
        static constexpr ssize size = 32;
        static constexpr ssize lanes = size / ssizeof<T>();
        static constexpr ssize alignment = 32;
    };

    // `NativeAbi` is a portable SIMD ABI that can be expected to work on any
    // supported build target.
    template <typename T>
    struct NativeAbi {
        NativeAbi() = delete;
        // TODO: Select ABI portably.
        using Abi = Avx2Abi<T>;
        static constexpr ssize size = Abi::size;
        static constexpr ssize lanes = Abi::lanes;
        static constexpr ssize alignment = Abi::alignment;
    };
}  // namespace simd_abi

// TODO: This comment is not currently accurate:
/* Vectors have weak alignment by default. It is up to users at call-site to
 * determine what alignment is appropriate for their use-case. All SIMD
 * functions are unaligned, which pays little, if any, penalty to aligned
 * vectors in modern implementations of SSE, AVX, and NEON architectures. */

template <typename InAbi, typename T>
class alignas(InAbi::alignment.raw) Simd {
    using Vector = Simd<InAbi, T>;
    struct UnalignedAbi {
        static constexpr ssize size = InAbi::size;
        static constexpr ssize lanes = InAbi::lanes;
        // By setting `alignment` to 1 here, and by extension in the definition
        // of `Raw` produced by this ABI, GCC produces unaligned SIMD
        // instructions for operations on this ABI.
        static constexpr ssize alignment = 1;
    };
    using UnalignedVector = Simd<UnalignedAbi, T>;

  public:
    static constexpr ssize lanes = InAbi::lanes;
    static constexpr ssize alignment = InAbi::alignment;

    using Scalar = T;
    using Abi = InAbi;
    // `gnu::vector_size` is a GCC attribute that represents SIMD data-types.
    // `gnu::aligned` is a GCC attribute that guarantees alignment for all
    // instances of a type.
    using Raw [[gnu::vector_size(sizeof(T) * lanes.raw),
                gnu::aligned(alignment.raw)]] = T;
    Raw raw;

    constexpr Simd() = default;

    constexpr Simd(Vector const& operand) = default;

    constexpr Simd(Vector&& operand) = default;

    constexpr Simd(UnalignedVector const& operand) : raw(operand.raw){};

    constexpr Simd(UnalignedVector&& operand)
        : raw(forward<UnalignedVector>(operand).raw){};

    constexpr Simd(Raw const& values) : raw(values){};

    constexpr Simd(Raw&& values) : raw(forward<Raw>(values)){};

    // Construct all lanes as `value`.
    template <typename U>
    constexpr Simd(U const& value) requires(is_convertible<U, T>) {
        this->fill(static_cast<T>(value));
    }

    // Construct all lanes as `value`.
    template <typename U>
    constexpr Simd(U&& value) requires(is_convertible<U, T>) {
        this->fill(static_cast<T>(value));
    }

    // Construct from a variadic argument list.
    template <typename... Us>
    constexpr Simd(Us&&... values) requires(sizeof...(values) > 1 &&
                                            sizeof...(values) == lanes.raw)
        : raw(Raw{static_cast<T>(forward<Us>(values))...}){};

    // Construct from a constant list, such as `value_list` or
    // `integer_sequence`.
    template <typename U, U... Us>
    constexpr Simd(ValueList<U, Us...> const values) requires(values.size ==
                                                              lanes)
        : raw(Raw{static_cast<T>(Us)...}){};

    // Any ABI for which this `Simd` is equal to in size and overaligned can
    // be explicitly converted to.
    template <typename OtherAbi>
    explicit constexpr operator Simd<OtherAbi, T>() requires(
        OtherAbi::size == Abi::Size && OtherAbi::alignment <= Abi::alignment) {
        return this->raw;
    }

    // Any ABI for which this `Simd` is equal to in size and overaligned can
    // be explicitly converted to, and any underlying type for which this
    // `Simd`'s is compatible with, can be converted to.
    template <typename OtherAbi, typename U>
    explicit constexpr operator Simd<OtherAbi, U>() requires(
        is_convertible<U, T>&& OtherAbi::size == Abi::Size &&
        OtherAbi::alignment <= Abi::alignment) {
        return __builtin_convertvector(this->raw,
                                       typename Simd<OtherAbi, U>::Raw);
    }

    constexpr auto operator=(Vector const& operand) -> Vector& {
        this->raw = operand.raw;
        return *this;
    }

    [[nodiscard]] constexpr auto operator==(Vector const& operand) -> Vector {
        return this->raw == operand.raw;
    }

    [[nodiscard]] constexpr auto operator!=(Vector const& operand) -> Vector {
        return this->raw != operand.raw;
    }

    [[nodiscard]] constexpr auto operator>(Vector operand) -> Vector {
        return this->raw > operand.raw;
    }
    constexpr auto operator>=(Vector const& operand) -> Vector& {
        return this->raw >= operand.raw;
    }

    [[nodiscard]] constexpr auto operator<(Vector operand) -> Vector {
        return this->raw < operand.raw;
    }
    constexpr auto operator<=(Vector const& operand) -> Vector& {
        return this->raw <= operand.raw;
    }

    [[nodiscard]] constexpr auto operator+(Vector operand) -> Vector {
        return this->raw + operand.raw;
    }
    constexpr auto operator+=(Vector const& operand) -> Vector& {
        this->raw + operand.raw;
        return *this;
    }

    [[nodiscard]] constexpr auto operator-(Vector operand) -> Vector {
        return this->raw - operand.raw;
    }
    constexpr auto operator-=(Vector const& operand) -> Vector& {
        this->raw = this->raw - operand.raw;
        return *this;
    }

    [[nodiscard]] constexpr auto operator*(Vector operand) -> Vector {
        return this->raw * operand.raw;
    }
    constexpr auto operator*=(Vector const& operand) -> Vector& {
        this->raw = this->raw * operand.raw;
        return *this;
    }

    [[nodiscard]] constexpr auto operator/(Vector operand) -> Vector {
        return this->raw * operand.raw;
    }
    constexpr auto operator/=(Vector const& operand) -> Vector& {
        this->raw = this->raw / operand.raw;
        return *this;
    }

    [[nodiscard]] constexpr auto operator&(Vector operand) -> Vector {
        return this->raw & operand.raw;
    }
    constexpr auto operator&=(Vector const& operand) -> Vector& {
        this->raw = this->raw & operand.raw;
        return *this;
    }

    [[nodiscard]] constexpr auto operator|(Vector operand) -> Vector {
        return this->raw | operand.raw;
    }
    constexpr auto operator|=(Vector const& operand) -> Vector& {
        this->raw = this->raw | operand.raw;
        return *this;
    }

    [[nodiscard]] constexpr auto operator%(Vector operand) -> Vector {
        return this->raw % operand.raw;
    }
    constexpr auto operator%=(Vector const& operand) -> Vector& {
        this->raw = this->raw % operand.raw;
        return *this;
    }

    [[nodiscard]] static consteval auto size() -> ssize {
        return lanes;
    }

    template <typename U>
    constexpr auto fill(U const value)
        -> Vector& requires(is_convertible<U, T>) {
        if constexpr (lanes == 2) {
            this->raw =
                Raw{value, value, value, value, value, value, value, value};
        } else if constexpr (lanes == 4) {
            this->raw =
                Raw{value, value, value, value, value, value, value, value};
        } else if constexpr (lanes == 8) {
            this->raw =
                Raw{value, value, value, value, value, value, value, value};
        } else if constexpr (lanes == 16) {
            this->raw =
                Raw{value, value, value, value, value, value, value, value,
                    value, value, value, value, value, value, value, value};
        } else if constexpr (lanes == 32) {
            this->raw =
                Raw{value, value, value, value, value, value, value, value,
                    value, value, value, value, value, value, value, value,
                    value, value, value, value, value, value, value, value,
                    value, value, value, value, value, value, value, value};
        }
        return *this;
    }

    // Construct a `Simd` with every lane initialized to `value`.
    template <typename U>
    [[nodiscard]] static constexpr auto filled(U const value) -> Vector
        requires(is_convertible<U, T>) {
        Vector vector;
        vector.fill(value);
        return vector;
    }

    // Load a vector from `p_data`, aligned to `Abi::alignment`.
    constexpr auto load_aligned(T const* const p_data) -> Vector& {
        this->raw =
            static_cast<Vector const*>(static_cast<void const*>(p_data))->raw;
        return *this;
    }

    // Load a vector from `p_data` with any alignment. This may be slower than
    // `.loaded_aligned()`.
    constexpr auto load_unaligned(T const* const p_data) -> Vector& {
        this->raw = static_cast<UnalignedVector const*>(
                        static_cast<void const*>(p_data))
                        ->raw;
        return *this;
    }

    // Load a vector from `p_data`.
    constexpr auto load(T const* const p_data) -> Vector& {
        if constexpr (Abi::alignment == salignof<T>()) {
            return this->load_aligned(p_data);
        } else {
            return this->load_unaligned(p_data);
        }
    }

    // Construct a `Simd` loaded from the address `p_data`, aligned to
    // `Abi::alignment`.
    [[nodiscard]] static constexpr auto loaded_aligned(T const* const p_data)
        -> Vector const {
        return *bit_cast<Vector const*>(p_data);
    }

    // Construct a `Simd` loaded from the address `p_data` with any alignment.
    // This may be slower than `.loaded_aligned()`.
    [[nodiscard]] static constexpr auto loaded_unaligned(T const* const p_data)
        -> Vector const {
        return *bit_cast<UnalignedVector const*>(p_data);
    }

    // Construct a `Simd` loaded from the address `p_data`.
    [[nodiscard]] static constexpr auto loaded(T const* const p_data) {
        if constexpr (Abi::alignment == salignof<T>()) {
            return loaded_aligned(p_data);
        } else {
            return loaded_unaligned(p_data);
        }
    }
};

template <typename Abi, typename T>
class alignas(Abi::alignment.raw) SimdMask {
    Simd<Abi, T> vector;

    // Forward any constructor to `Simd`.
    template <typename... Us>
    constexpr SimdMask(Us... arguments) : vector(forward<Us>(arguments)...){};
};

template <typename T, ssize lanes>
using FixedSizeSimd = Simd<FixedSizeAbi<T, lanes>, T>;

template <typename T>
using NativeSimd = Simd<NativeAbi<T>, T>;

template <typename T>
using Sse42Simd = Simd<Sse42Abi<T>, T>;

template <typename T>
using Avx2Simd = Simd<Avx2Abi<T>, T>;

using int1x2 = FixedSizeSimd<int1::Raw, 2>;
using int1x4 = FixedSizeSimd<int1::Raw, 4>;
using int1x8 = FixedSizeSimd<int1::Raw, 8>;
using int1x16 = FixedSizeSimd<int1::Raw, 16>;
using int1x32 = FixedSizeSimd<int1::Raw, 32>;
using int1x_ = NativeSimd<int1::Raw>;

using uint1x2 = FixedSizeSimd<uint1::Raw, 2>;
using uint1x4 = FixedSizeSimd<uint1::Raw, 4>;
using uint1x8 = FixedSizeSimd<uint1::Raw, 8>;
using uint1x16 = FixedSizeSimd<uint1::Raw, 16>;
using uint1x32 = FixedSizeSimd<uint1::Raw, 32>;
using uint1x_ = NativeSimd<uint1::Raw>;

// TODO: Think over the string vectorization API.
// TODO: Support `char2x_` vector family.
// Strings need their own vectors.
using char1x16 = Sse42Simd<char>;
using char1x32 = Avx2Simd<char>;
using char1x_ = Sse42Simd<char>;

using int2x2 = FixedSizeSimd<int2::Raw, 2>;
using int2x4 = FixedSizeSimd<int2::Raw, 4>;
using int2x8 = FixedSizeSimd<int2::Raw, 8>;
using int2x16 = FixedSizeSimd<int2::Raw, 16>;
using int2x_ = NativeSimd<int2::Raw>;

using uint2x2 = FixedSizeSimd<uint2::Raw, 2>;
using uint2x4 = FixedSizeSimd<uint2::Raw, 4>;
using uint2x8 = FixedSizeSimd<uint2::Raw, 8>;
using uint2x16 = FixedSizeSimd<uint2::Raw, 16>;
using uint2x_ = NativeSimd<uint2::Raw>;

using int4x2 = FixedSizeSimd<int4::Raw, 2>;
using int4x4 = FixedSizeSimd<int4::Raw, 4>;
using int4x8 = FixedSizeSimd<int4::Raw, 8>;
using int4x_ = NativeSimd<int4::Raw>;

using uint4x2 = FixedSizeSimd<uint4::Raw, 2>;
using uint4x4 = FixedSizeSimd<uint4::Raw, 4>;
using uint4x8 = FixedSizeSimd<uint4::Raw, 8>;
using uint4x_ = NativeSimd<uint4::Raw>;

using int8x2 = FixedSizeSimd<int8::Raw, 2>;
using int8x4 = FixedSizeSimd<int8::Raw, 4>;
using int8x_ = NativeSimd<int8::Raw>;

using uint8x2 = FixedSizeSimd<uint8::Raw, 2>;
using uint8x4 = FixedSizeSimd<uint8::Raw, 4>;
using uint8x_ = NativeSimd<uint8::Raw>;

using float4x2 = FixedSizeSimd<float4::Raw, 2>;
using float4x4 = FixedSizeSimd<float4::Raw, 4>;
using float4x8 = FixedSizeSimd<float4::Raw, 8>;
using float4x_ = NativeSimd<float4::Raw>;

using float8x2 = FixedSizeSimd<float8::Raw, 2>;
using float8x4 = FixedSizeSimd<float8::Raw, 4>;
using float8x_ = NativeSimd<float8::Raw>;

// TODO: Support `bool` family vectors.

enum class StringControl : unsigned char {
    // Unsigned 1-byte characters.
    unsigned_byte = 0x00,
    // Unsigned 2-byte characters.
    unsigned_word = 0x01,
    // Signed 1-byte characters.
    signed_byte = 0x02,
    // Signed 2-byte characters.
    signed_word = 0x03,
    // Compare if any characters are equal.
    compare_equal_any = 0x00,
    // Compare ranges.
    compare_ranges = 0x04,
    // Compare if every character is equal.
    compare_equal_each = 0x08,
    // Compare equal ordered.
    compare_equal_ordered = 0x0c,
    // Polarity.
    positive_polarity = 0x00,
    // Negate the results.
    negative_polarity = 0x10,
    masked_positive_polarity = 0x20,
    // Negate the results only before the end of the string.
    masked_negative_polarity = 0x30,
    // Return the least significant bit.
    least_significant = 0x00,
    // Return the most significant bit.
    most_significant = 0x40,
    // Return a bit mask.
    bit_mask = 0x00,
    // Return a byte/word mask.
    unit_mask = 0x40,
};

// TODO: Generalize this.
constexpr auto operator|(StringControl flag_1, StringControl flag_2)
    -> StringControl {
    return static_cast<StringControl>(static_cast<unsigned char>(flag_1) |
                                      static_cast<unsigned char>(flag_2));
}

// TODO: Use a vector concept.
auto shuffle(auto in_vector, auto mask);

template <StringControl control_mask>
constexpr auto compare_implicit_length_strings(auto const& vector_1,
                                               auto const& vector_2) -> bool1;

template <StringControl control_mask>
constexpr auto compare_implicit_length_strings_return_index(
    auto const& vector_1, auto const& vector_2) -> int4;

// TODO: Add `mfence` and `lfence`.
void sfence();
void zero_avx_registers();
void zero_upper_avx_registers();

// Constants for prefetch.
enum class PrefetchHint : int {
    // Prefetch data into non-temporal cache structure and into a location close
    // to the processor, minimizing cache pollution.
    non_temporal = 0,
    // Prefetch data into level 3 cache and higher, or an
    // implementation-specific choice.
    temporal_2 = 1,
    // Prefetch data into level 2 cache and higher.
    temporal_1 = 2,
    // Prefetch data into all levels of the cache hierarchy.
    temporal_0 = 3,
};

template <PrefetchHint hint>
void prefetch(void const* p_source) {
    __builtin_prefetch(p_source, static_cast<int>(hint) & 0x4 >> 2,
                       static_cast<int>(hint) & 0x3);
}

void prefetch_for_one_read(auto const* p_vector) {
    prefetch<PrefetchHint::non_temporal>(p_vector);
}

void prefetch_close(auto const* p_vector) {
    prefetch<PrefetchHint::temporal_0>(p_vector);
}

void prefetch_mid(auto const* p_vector) {
    prefetch<PrefetchHint::temporal_1>(p_vector);
}

void prefetch_far(auto const* p_vector) {
    prefetch<PrefetchHint::temporal_2>(p_vector);
}

void prefetch_for_modify(auto const* p_vector) {
    prefetch<PrefetchHint::temporal_0>(p_vector);
}

template <typename T>
void stream_in(void* p_destination, T const* p_source);

template <typename T>
auto move_mask(T vector) {
    if constexpr (sizeof(typename T::Scalar) == 1) {
        return __builtin_ia32_pmovmskb256(
            bit_cast<cat::Simd<typename T::Abi, char>>(vector).raw);
    } else {
        // TODO: Support additional vector sizes.
        static_assert("BAD!");
    }
}

// TODO: __builtin_cpu_init()
// must be called before these.

auto is_mmx_supported() -> bool1;
auto is_sse1_supported() -> bool1;
auto is_sse2_supported() -> bool1;
auto is_sse3_supported() -> bool1;
auto is_ssse3_supported() -> bool1;
auto is_sse4_1_supported() -> bool1;
auto is_sse4_2_supported() -> bool1;
auto is_avx_supported() -> bool1;
auto is_avx2_supported() -> bool1;
auto is_avx512f_supported() -> bool1;
auto is_avx512vl_supported() -> bool1;

}  // namespace cat

using int1x2 = cat::int1x2;
using int1x4 = cat::int1x4;
using int1x8 = cat::int1x8;
using int1x16 = cat::int1x16;
using int1x32 = cat::int1x32;
using int1x_ = cat::int1x_;
using uint1x2 = cat::uint1x2;
using uint1x4 = cat::uint1x4;
using uint1x8 = cat::uint1x8;
using uint1x16 = cat::uint1x16;
using uint1x32 = cat::uint1x32;
using uint1x_ = cat::uint1x_;
using char1x16 = cat::char1x16;
using char1x32 = cat::char1x32;
using char1x_ = cat::char1x_;
using int2x2 = cat::int2x2;
using int2x4 = cat::int2x4;
using int2x8 = cat::int2x8;
using int2x16 = cat::int2x16;
using int2x_ = cat::int2x_;
using uint2x2 = cat::uint2x2;
using uint2x4 = cat::uint2x4;
using uint2x8 = cat::uint2x8;
using uint2x16 = cat::uint2x16;
using uint2x_ = cat::uint2x_;
using int4x2 = cat::int4x2;
using int4x4 = cat::int4x4;
using int4x8 = cat::int4x8;
using int4x_ = cat::int4x_;
using uint4x2 = cat::uint4x2;
using uint4x4 = cat::uint4x4;
using uint4x8 = cat::uint4x8;
using uint4x_ = cat::uint4x_;
using int8x2 = cat::int8x2;
using int8x4 = cat::int8x4;
using int8x_ = cat::int8x_;
using uint8x2 = cat::uint8x2;
using uint8x4 = cat::uint8x4;
using uint8x_ = cat::uint8x_;
using float4x2 = cat::float4x2;
using float4x4 = cat::float4x4;
using float4x8 = cat::float4x8;
using float4x_ = cat::float4x_;
using float8x2 = cat::float8x2;
using float8x4 = cat::float8x4;
using float8x_ = cat::float8x_;

#include "./implementations/compare_implicit_length_strings.tpp"
#include "./implementations/compare_implicit_length_strings_return_index.tpp"
#include "./implementations/shuffle.tpp"
#include "./implementations/stream_in.tpp"
