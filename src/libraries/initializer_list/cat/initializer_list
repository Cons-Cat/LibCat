// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/collection>

namespace std {

template <typename T>
class initializer_list {
  public:
    using value_type = T;
    using reference = T&;
    using const_reference = T&;
    using size_type = __SIZE_TYPE__;

    constexpr initializer_list() = default;

    constexpr initializer_list(T const* p_data, __SIZE_TYPE__ in_size)
        : m_p_data(p_data), m_size(in_size) {
    }

    // Clang requires this be `constexpr` rather than `consteval`.
    [[nodiscard]]
    constexpr auto
    size() const -> __SIZE_TYPE__ {
        return m_size;
    }

    [[nodiscard]]
    consteval auto
    begin() const -> T* {
        return m_p_data;
    }

    [[nodiscard]]
    consteval auto
    end() const -> T* {
        return m_p_data + m_size;
    }

  private:
    T const* m_p_data = nullptr;
    __SIZE_TYPE__ m_size = 0u;
};

template <class T>
constexpr auto
begin(initializer_list<T> initializers) -> T const* {
    return initializers.begin();
}

template <class T>
constexpr auto
end(initializer_list<T> initializers) -> T const* {
    return initializers.end();
}

}  // namespace std

namespace cat {
using std::initializer_list;
}
