// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <memory>
#include <string>
#include <type_traits>
#include <utility>

namespace cat::detail {

// A `None` is consumed by a `Maybe` constructor to prevent initializing its
// `value` member.
struct None {};

// A `Monostate` represents a `Maybe` that holds no `value`.
struct Monostate {};

}  // namespace cat::detail

inline constexpr cat::detail::None none;
template <typename T, auto predicate, T sentinel>
struct Predicate {};

template <typename T, T sentinel>
using Sentinel = Predicate<T,
                           [](T value) {
                               return value != sentinel;
                           },
                           sentinel>;

template <typename T>
struct MaybeValueStorage {
    struct Dummy {};
    union {
        // `Dummy` is required so that `MaybeCommonStorage` can be initialized
        // in a `constexpr` context, because a member `union` must have at least
        // one initialized field, and it should not be `value`. `Dummy` can be
        // default-initialized, so this is well-formed.
        Dummy dummy;
        T value;
    };
    bool1 has_some = false;

    // `MaybeCommonStorage`'s constructors, assignment operators, and
    // destructors are relatively complex. Consider paying special attention to
    // them.
    constexpr MaybeValueStorage() = default;
    constexpr MaybeValueStorage(cat::detail::None){};

    constexpr MaybeValueStorage(MaybeValueStorage const& maybe) requires(
        meta::is_copy_constructible_v<T>) = default;
    constexpr MaybeValueStorage(MaybeValueStorage const& maybe) = delete;
    constexpr MaybeValueStorage(MaybeValueStorage&& maybe) requires(
        meta::is_move_constructible_v<T>) = default;
    constexpr MaybeValueStorage(MaybeValueStorage&& maybe) = default;

    // If other destructors are not conditionally specialized by their
    // `requires`, they should be `default` or deleted.
    constexpr ~MaybeValueStorage() = default;

    // If `T` is not trivially copy constructible, then manually construct it
    // in-place.
    constexpr MaybeValueStorage(MaybeValueStorage const& maybe) requires(
        meta::is_trivially_copy_constructible_v<T> &&
        !meta::is_trivially_copy_constructible_v<T>) {
        if (maybe.has_value()) {
            this->construct(maybe.get_value());
        } else {
            this->has_some = false;
        }
    }

    // If `T` is not trivially move constructible, then manually invoke
    // `meta::move` on it.
    MaybeValueStorage(MaybeValueStorage&& maybe) requires(
        meta::is_move_constructible_v<T> &&
        !meta::is_trivially_move_constructible_v<T>) {
        if (maybe.has_value()) {
            this->construct(meta::move(maybe.get_value()));
        } else {
            this->has_some = false;
        }
    }

    // If `T` is not trivially destructible, then manually invoke its
    // destructor.
    constexpr ~MaybeValueStorage() requires(
        !meta::is_trivially_destructible_v<T>) {
        if (this->has_some) {
            this->value.~T();
        }
    }

    // TODO: Handle non-trivial `U`.
    // If a `MaybeCommonStorage` consumes a `T` or a type that is convertible to
    // `T`, it should be constructed.
    template <typename U = T>
    constexpr MaybeValueStorage(U in_value) requires(
        meta::is_same_v<U, T> || meta::is_convertible_v<U, T>) {
        this->value = in_value;
        this->has_some = true;
    }

    // If other assignment operators are not conditionally specialized by their
    // `requires`, they should be `default` or deleted.
    auto operator=(MaybeValueStorage const& maybe)
        -> MaybeValueStorage& requires(meta::is_copy_assignable_v<T>) = default;
    auto operator=(MaybeValueStorage const& maybe)
        -> MaybeValueStorage& = delete;

    auto operator=(MaybeValueStorage&& maybe)
        -> MaybeValueStorage& requires(meta::is_move_assignable_v<T>) = default;
    auto operator=(MaybeValueStorage&& maybe) -> MaybeValueStorage& = delete;

    // If `T` is not trivially copy assignable, then manually construct it
    // in-place.
    auto operator=(MaybeValueStorage const& maybe)
        -> MaybeValueStorage& requires(
            meta::is_copy_assignable_v<T> &&
            !meta::is_trivially_copy_assignable_v<T>) {
        this->assign(maybe);
        return *this;
    }

    // If `T` is not trivially move assignable, then manually invoke
    // `meta::move()` on it.
    constexpr auto operator=(MaybeValueStorage&& maybe)
        -> MaybeValueStorage& requires(
            meta::is_move_assignable_v<T> &&
            !meta::is_trivially_move_assignable_v<T>) {
        this->assign(meta::move(maybe));
        return *this;
    }

    // Assigning `none` will destroy the held value.
    auto operator=(cat::detail::None) -> MaybeValueStorage& {
        if (this->has_some) {
            this->value.~T();
            this->has_some = false;
        }
        return *this;
    }

    // If `T`, or a type that is convertible to `T`, is assigned to this,
    // then replace a potentially held value.
    template <typename U = T>
    auto operator=(U&& in_value)
        -> MaybeValueStorage<T>& requires(meta::is_same_v<U, T> ||
                                          meta::is_convertible_v<U, T>) {
        if (this->has_value()) {
            this->value = meta::forward<U>(in_value);
        } else {
            this->construct(meta::forward<U>(in_value));
        }
        return *this;
    }

    // If a `MaybeCommonStorage` is assigned to this which wraps a type that can
    // be converted, then convert that `MaybeCommonStorage` to this type
    // implicitly.
    template <typename U>
    auto operator=(MaybeValueStorage<U> const& maybe)
        -> MaybeValueStorage<T>& requires(meta::is_convertible_v<U, T>) {
        if (this->has_some) {
            if (maybe.has_value()) {
                this->value = *maybe;
            } else {
                this->value.~T();
                this->has_some = false;
            }
        }
        if (maybe.has_value()) {
            this->construct(*maybe);
        }
        return *this;
    }

    constexpr auto get_value() & -> T& {
        return this->value;
    }
    constexpr auto get_value() const& -> T const& {
        return this->value;
    }
    constexpr auto get_value() && -> T&& {
        return meta::move(this->value);
    }
    constexpr auto get_value() const&& -> T&& {
        return meta::move(this->value);
    }

    constexpr auto has_value() const -> bool1 {
        return has_some;
    }

    // Construct an object at the address of the held `value`.
    // TODO: Factor into `cat::construct_at()`.
    template <typename... Args>
    void construct(Args&&... args) {
        // TODO: Get this working.
        // new (cat::address_of(this->value)) T(meta::forward<Args>(args)...);
        this->value = T(meta::forward<Args>(args)...);
        this->has_some = true;
    }

    template <typename U>
    constexpr void assign(U&& maybe) {
        if (this->has_value()) {
            if (maybe.has_value()) {
                this->value = meta::forward<U>(maybe).get_value();
            } else {
                this->value.~T();
                this->has_some = false;
            }
        } else if (maybe.has_value()) {
            this->construct(meta::forward<U>(maybe).get_value());
        }
    }
};

template <typename T>
struct MaybeReferenceStorage {
    using UnderlyingT = meta::remove_reference_t<T>;
    UnderlyingT* p_value = nullptr;
  public:
    constexpr MaybeReferenceStorage() = default;

    template <typename U = UnderlyingT>
    constexpr MaybeReferenceStorage(U&& in_value)
        : p_value(cat::address_of(in_value)){};

    template <typename U>
    constexpr explicit MaybeReferenceStorage(
        MaybeReferenceStorage<U> const& maybe)
        : p_value(maybe.get_value()){};

    constexpr MaybeReferenceStorage(UnderlyingT& maybe) requires(
        meta::is_reference_v<UnderlyingT>)
        : p_value(cat::address_of(maybe)){};

    constexpr MaybeReferenceStorage(cat::detail::None) : p_value(nullptr){};

    // Rebind the reference if this is assigned a new value.
    constexpr auto operator=(UnderlyingT& maybe) -> UnderlyingT& {
        this->value = cat::address_of(maybe);
        return *this;
    }

    constexpr auto operator=(MaybeReferenceStorage const& maybe)
        -> MaybeReferenceStorage<UnderlyingT&>& = default;

    // Invalidate the reference if this is assigned `none`.
    constexpr auto operator=(cat::detail::None)
        -> MaybeReferenceStorage<UnderlyingT&>& {
        this->p_value = nullptr;
        return *this;
    }

    constexpr auto has_value() const -> bool1 {
        return this->p_value != nullptr;
    }
};

template <typename T>
class Maybe {
    using StorageType =
        meta::conditional_t<meta::is_reference_v<T>, MaybeReferenceStorage<T>,
                            MaybeValueStorage<T>>;
    StorageType storage;
  public:
    Maybe() : storage(){};
    Maybe(auto input) {
        storage = StorageType(input);
    }

    // Get the held `value` unconditionally. If `has_value()` is `false`, this
    // data is undefined. If this method is used in `-O0`, it will panic in that
    // case, unless used in a `constexpr` context.
    constexpr auto get_value() -> T {
        if (meta::is_constant_evaluated()) {
            return this->storage.get_value();
        }
#ifdef __OPTIMIZE__
        return this->storage.get_value();
#else
        if (this->storage.has_value()) {
            return this->storage.get_value();
        }
        cat::print(
            "`.has_value()` was illegally called on a `Maybe` which did not hold\
a value!\n")
            .or_panic_debug();
        cat::exit(1);
#endif
        __builtin_unreachable();
    }

    // Construct the value in-place and destroy the held value iff it exists.
    template <typename... Args>
    auto emplace(Args&&... args) -> T& {
        *this = none;
        this->storage.construct(meta::forward<Args>(args)...);
        return this->storage.get_value();
    }

    constexpr auto has_value() const -> bool1 {
        return this->storage.has_value();
    }
};

template <typename T, auto predicate, T sentinel>
class Maybe<Predicate<T, predicate, sentinel>> {
    T value = sentinel;
  public:
    Maybe() requires(!predicate(sentinel)) = default;
    ~Maybe() = default;

    template <typename U = T>
    constexpr Maybe(U&& in_value) requires(!predicate(sentinel) &&
                                           (meta::is_same_v<U, T> ||
                                            meta::is_convertible_v<U, T>))
        : value(in_value){};

    template <typename U>
    constexpr explicit Maybe(Maybe<Predicate<U, predicate, sentinel>> const&
                                 maybe) requires(!predicate(sentinel))
        : value(maybe.get_value()){};

    constexpr Maybe(T& maybe) requires(!predicate(sentinel) &&
                                       meta::is_reference_v<T>)
        : value(cat::address_of(maybe)){};

    constexpr Maybe(cat::detail::None) requires(!predicate(sentinel))
        : value(sentinel){};

    // Rebind the reference if this is assigned a new value.
    constexpr auto operator=(T& maybe) -> T& {
        this->value = cat::address_of(maybe);
        return *this;
    }

    constexpr auto operator=(Maybe const& maybe)
        -> Maybe<Predicate<T, predicate, sentinel>>& = default;

    // Invalidate the reference if this is assigned `none`.
    constexpr auto operator=(cat::detail::None)
        -> Maybe<Predicate<T, predicate, sentinel>>& {
        this->value = sentinel;
        return *this;
    }

    constexpr auto unwrap() -> T& {
        if (meta::is_constant_evaluated()) {
            return *(this->value);
        }
#ifdef __OPTIMIZE__
        return *(this->value);
#else
        if (this->has_value()) {
            return *(this->value);
        }
        cat::print(
            "`.unwrap()` was illegally called on a `Maybe` which did not hold a \
value!\n")
            .or_panic_debug();
        cat::exit(1);
#endif
    }

    constexpr auto has_value() const -> bool1 {
        return predicate(this->value);
    }
};
