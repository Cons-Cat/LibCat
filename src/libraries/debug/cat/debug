// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

namespace std {

class source_location {
 private:
   // Clang requires these variables be declared at the top, not the bottom.

   // GCC requires these names be exactly what they are.
   struct __impl {
      char const* _M_file_name;
      char const* _M_function_name;
      unsigned long _M_line;
      unsigned long _M_column;
   };

   __impl const* m_p_location = nullptr;

 public:
   static constexpr auto
   current(decltype(__builtin_source_location()) p_call_site_location =
              __builtin_source_location()) -> source_location {
      source_location current_location;
      current_location.m_p_location =
         static_cast<__impl const*>(p_call_site_location);
      return current_location;
   }

   [[nodiscard]]
   constexpr auto
   line() const -> unsigned long {
      return (this->m_p_location != nullptr) ? this->m_p_location->_M_line : 0u;
   }

   [[nodiscard]]
   constexpr auto
   column() const -> unsigned long {
      return (this->m_p_location != nullptr) ? this->m_p_location->_M_column
                                             : 0u;
   }

   [[nodiscard]]
   constexpr auto
   file_name() const -> char const* {
      return (this->m_p_location != nullptr) ? this->m_p_location->_M_file_name
                                             : "";
   }

   [[nodiscard]]
   constexpr auto
   function_name() const -> char const* {
      return (this->m_p_location != nullptr)
                ? this->m_p_location->_M_function_name
                : "";
   }
};

}  // namespace std

namespace cat {

template <typename char_type>
   requires(sizeof(char_type) == 1)
class basic_str_span;

using str_view = basic_str_span<char const>;

using std::source_location;

// TODO: Mark these functions `[[gnu::artificial]]`.

void
breakpoint();

// This is exposed so that `unit_tests.hpp` can use it. Its implementation is in
// `assert_handler.cpp`.
namespace detail {
void
print_assert_location(
   source_location const& callsite = source_location::current());

using assert_handler = void (*)(source_location const&);
}  // namespace detail

void
default_assert_handler(source_location const& callsite);

// This variable can be mutated to change the default assert handler globally.
inline detail::assert_handler assert_handler = default_assert_handler;

// TODO: Allow `assert()` and `verify()` in a `constexpr` context, and make them
// throw if their invariant holds false.

// TODO: Fancier `ASSERT()` macro with expression decomposition.
// TODO: `assert_eq()`, `assert_gt()`, etc.

void
verify(bool invariant_expression,
       void (*p_assert_handler)(source_location const&) = assert_handler,
       source_location const& callsite = source_location::current());

void
verify(bool invariant_expression, str_view error_string,
       void (*p_assert_handler)(source_location const&) = assert_handler,
       source_location const& callsite = source_location::current());

void
assert(bool invariant_expression,
       void (*p_assert_handler)(source_location const&) = assert_handler,
       source_location const& callsite = source_location::current());

void
assert(bool invariant_expression, str_view error_string,
       void (*p_assert_handler)(source_location const&) = assert_handler,
       source_location const& callsite = source_location::current());

}  // namespace cat
