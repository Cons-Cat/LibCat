// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <concepts>
#include <memory>
#include <string>
#include <type_traits>
#include <utility>

// TODO: Support `Optional<void>`.

namespace cat::detail {

// A `None` is consumed by a `Optional` constructor to prevent initializing its
// `value` member.
struct None {};

// A `Monostate` represents a `Optional` that holds no `value`.
struct Monostate {};

}  // namespace cat::detail

inline constexpr cat::detail::None none;

template <typename T, auto predicate, T sentinel>
struct Predicate {};

template <typename T, T sentinel>
using Sentinel = Predicate<T,
                           [](T const value) {
                               return value != sentinel;
                           },
                           sentinel>;

template <typename T>
struct OptionalValueStorage {
    struct Dummy {};
    union {
        // `Dummy` is required so that `OptionalValueStorage` can be initialized
        // in a `constexpr` context, because a member `union` must have at least
        // one initialized field, and it should not be `value`. `Dummy` can be
        // default-initialized, so this is well-formed.
        Dummy dummy;
        T value;
    };
    using Value = T;
    bool1 has_some = false;

    // Enable copy and move constructors iff `Optionalvaluestorage` supports
    // them.
    constexpr OptionalValueStorage(T const& in_value) requires(
        meta::is_copy_constructible_v<T>)
        : value(in_value), has_some(true){};
    constexpr OptionalValueStorage(T const& in_value) = delete;
    constexpr OptionalValueStorage(T&& in_value) requires(
        meta::is_move_constructible_v<T>)
        : value(cat::move(in_value)), has_some(true){};
    constexpr OptionalValueStorage(T&& in_value) = delete;

    // If other destructors are not conditionally specialized by their
    // `requires`, they should be `default` or deleted.
    constexpr ~OptionalValueStorage() = default;

    // If `T` is not trivially copy constructible, then manually construct it
    // in-place.
    constexpr OptionalValueStorage(T const& in_value) requires(
        !meta::is_trivially_copy_constructible_v<T>) {
        if (in_value.has_value()) {
            this->construct(in_value.get_value());
        } else {
            this->has_some = false;
        }
    }

    // If `T` is not trivially move constructible, then manually invoke
    // `cat::move` on it.
    OptionalValueStorage(T&& in_value) requires(
        meta::is_move_constructible_v<T> &&
        !meta::is_trivially_move_constructible_v<T>) {
        if (in_value.has_value()) {
            this->construct(cat::move(in_value.get_value()));
        } else {
            this->has_some = false;
        }
    }

    // If `T` is not trivially destructible, then manually invoke its
    // destructor.
    constexpr ~OptionalValueStorage() requires(
        !meta::is_trivially_destructible_v<T>) {
        if (this->has_some) {
            this->value.~T();
        }
    }

    // TODO: Handle non-trivial `U`.

    // If a `OptionalValueStorage` consumes a `T` or a type that is convertible
    // to `T`, it should be constructed. template <typename U> constexpr
    // OptionalValueStorage(U in_value) requires(
    //     !meta::is_move_constructible_v<T> && meta::is_convertible_v<U, T>) {
    //     this->value = in_value;
    //     this->has_some = true;
    // }

    constexpr OptionalValueStorage(cat::detail::None){};

    // If other assignment operators are not conditionally specialized by their
    // `requires`, they should be `default` or deleted.
    auto operator=(T const& in_value) -> OptionalValueStorage& requires(
        meta::is_trivially_copy_assignable_v<T>) {
        this->value = in_value;
        this->has_some = true;
        return *this;
    }
    auto operator=(T const& in_value) -> OptionalValueStorage& = delete;

    // If `T` is not trivially copy assignable, then manually construct it
    // in-place.
    auto operator=(T const& in_value) -> OptionalValueStorage& requires(
        meta::is_copy_assignable_v<T> &&
        !meta::is_trivially_copy_assignable_v<T>) {
        this->assign(in_value);
        return *this;
    }

    // If a `OptionalValueStorage` is assigned to this which wraps a type that
    // can be converted, then convert that `OptionalValueStorage` to this type
    // implicitly.
    template <typename U>
    auto operator=(U const& in_value)
        -> OptionalValueStorage<T>& requires(meta::is_convertible_v<U, T>) {
        if (this->has_some) {
            if (in_value.has_value()) {
                this->value = *in_value;
            } else {
                this->value.~T();
                this->has_some = false;
            }
        }
        if (in_value.has_value()) {
            this->construct(*in_value);
        }
        return *this;
    }

    // If `T` is trivially move assignable, then forward.
    template <typename U>
    auto operator=(U&& in_value) -> OptionalValueStorage& requires(
        meta::is_convertible_v<U, T>&&
            meta::is_trivially_move_assignable_v<U>) {
        this->value = meta::forward<U>(in_value);
        this->has_some = true;
        return *this;
    }
    auto operator=(T&& in_value) -> OptionalValueStorage& = delete;

    // If `T` is not trivially move assignable, then manually invoke
    // `cat::move()` on it.
    template <typename U>
    constexpr auto operator=(U&& in_value) -> OptionalValueStorage& requires(
        meta::is_convertible_v<U, T>&& meta::is_move_assignable_v<U> &&
        !meta::is_trivially_move_assignable_v<U>) {
        this->assign(meta::forward<U>(in_value));
        return *this;
    }

    template <typename U>
    auto operator=(U&& in_value)
        -> OptionalValueStorage<T>& requires(meta::is_convertible_v<U, T>) {
        if (this->has_value()) {
            this->value = meta::forward<U>(in_value);
            this->has_some = true;
        } else {
            this->construct(meta::forward<U>(in_value));
        }
        return *this;
    }

    // Assigning `none` will destroy the held value.
    auto operator=(cat::detail::None) -> OptionalValueStorage& {
        if (this->has_some) {
            this->value.~T();
            this->has_some = false;
        }
        return *this;
    }

    constexpr auto get_value() & -> T& {
        return this->value;
    }
    constexpr auto get_value() const& -> T const& {
        return this->value;
    }
    constexpr auto get_value() && -> T&& {
        return cat::move(this->value);
    }

    constexpr auto has_value() const -> bool1 {
        return has_some;
    }

    // Construct an object at the address of the held `value`.
    // TODO: Factor into `cat::construct_at()`.
    template <typename... Args>
    void construct(Args&&... args) {
        // TODO: Get this working.
        // new (cat::address_of(this->value)) T(meta::forward<Args>(args)...);
        this->value = T(meta::forward<Args>(args)...);
        this->has_some = true;
    }

    template <typename U>
    constexpr void assign(U&& option) {
        if (this->has_value()) {
            if (option.has_value()) {
                this->value = meta::forward<U>(option).get_value();
            } else {
                this->value.~T();
                this->has_some = false;
            }
        } else if (option.has_value()) {
            this->construct(meta::forward<U>(option).get_value());
        }
    }
};

template <typename T>
struct OptionalReferenceStorage {
    using Value = meta::remove_reference_t<T>;
    Value* p_value = nullptr;
  public:
    // TODO: Handle non-trivial constructors and assignment operators.

    constexpr OptionalReferenceStorage(Value& in_value) requires(
        meta::is_default_constructible<Value>::value)
        : p_value(cat::address_of(in_value)){};

    constexpr OptionalReferenceStorage(Value const& in_value)
        : p_value(cat::address_of(in_value)){};

    // template <typename U>
    // constexpr OptionalReferenceStorage(U&& in_value) requires(
    //     !meta::is_same_v<U, cat::detail::None> &&
    //     meta::is_move_constructible_v<U>)
    //     : p_value(cat::address_of(cat::move(in_value))){};

    constexpr OptionalReferenceStorage(cat::detail::None) : p_value(nullptr){};

    // Rebind the reference if this is assigned a new value.
    constexpr auto operator=(Value& option) -> OptionalReferenceStorage<T>& {
        this->p_value = cat::address_of(option);
        return *this;
    }

    constexpr auto operator=(Value const& option)
        -> OptionalReferenceStorage<T>& {
        this->p_value = cat::address_of((option));
        return *this;
    };

    // Invalidate the reference if this is assigned `none`.
    constexpr auto operator=(cat::detail::None)
        -> OptionalReferenceStorage<T>& {
        this->p_value = nullptr;
        return *this;
    }

    constexpr auto get_value() & -> Value& {
        return *(this->p_value);
    }
    constexpr auto get_value() const& -> Value& {
        return *(this->p_value);
    }
    constexpr auto get_value() && -> Value&& {
        return *(cat::move(this->p_value));
    }
    constexpr auto get_value() const&& -> Value&& {
        return *(cat::move(this->p_value));
    }

    constexpr auto has_value() const -> bool1 {
        return this->p_value != nullptr;
    }
};

template <typename T>
class Optional {
    using Storage = meta::conditional_t<meta::is_reference_v<T>,
                                        OptionalReferenceStorage<T>,
                                        OptionalValueStorage<T>>;
    Storage storage;
  public:
    // Default-initialization is not supported.
    Optional() = delete;

    // Forward all constructors to `storage`.

    // If this is a reference storage, allow consuming a non-`const` reference.
    Optional(auto input) requires(
        meta::is_same_v<Storage, OptionalReferenceStorage<T>>&&
            meta::is_default_constructible<typename Storage::Value>::value)
        : storage(input){};

    // A reference type cannot be copy-constructed.
    Optional(auto const& input) requires(
        !meta::is_same_v<Storage, OptionalReferenceStorage<T>> &&
        meta::is_copy_constructible_v<typename Storage::Value>)
        : storage(input){};

    // Reference types cannot be moved.
    template <typename U>
    Optional(U&& input) requires(
        !meta::is_reference_v<T> &&
        meta::is_convertible_v<U, typename Storage::Value>)
        : storage(meta::forward<U>(input)){};

    // Forward all assignment operators to `storage`.
    auto operator=(auto const& value) {
        this->storage = value;
        return *this;
    }

    auto operator=(auto const& value) const {
        this->storage = value;
        return *this;
    }

    auto operator=(auto&& value) && {
        this->storage = cat::move(value);
        return cat::move(*this);
    }

    auto operator=(auto&& value) const&& {
        this->storage = cat::move(value);
        return cat::move(*this);
    }

    constexpr auto has_value() const -> bool1 {
        return this->storage.has_value();
    }

    // TODO: Support non-`const`-qualified `Optional` when `has_value()` is
    // impure.
    // TODO: Support move semantics.
    // Get the held `value` unconditionally. If `has_value()` is `false`, this
    // data is undefined. If this method is used in `-O0`, it will panic in that
    // case, unless used in a `constexpr` context.
    constexpr auto value() -> typename Storage::Value const& {
        if (meta::is_constant_evaluated()) {
            return this->storage.get_value();
        }
#ifdef __OPTIMIZE__
        return this->storage.get_value();
#else
        if (this->storage.has_value()) [[likely]] {
            return this->storage.get_value();
        }
        cat::print(
            "`.value()` was illegally called on a `Optional` which did not hold a \
value!\n")
            .discard_result();
        cat::exit(1);
#endif
        __builtin_unreachable();
    }

    // Get the value held by a non-`const`-qualified `Optional`, or a fallback
    // value if it does not hold a value.
    constexpr auto value_or(typename Storage::Value const fallback) & -> T {
        if (this->storage.has_value()) {
            return this->storage.get_value();
        }
        return fallback;
    }

    // Get the value held by a `const`-qualified `Optional`, or a fallback
    // value if it does not hold a value.
    constexpr auto value_or(
        typename Storage::Value const fallback) const& -> T {
        if (this->storage.has_value()) {
            return this->storage.get_value();
        }
        return fallback;
    }

    // Get the value held by a non-`const`-qualified `Optional`, or a fallback
    // value if it does not hold a value.
    constexpr auto value_or(typename Storage::Value&& fallback) && -> T&& {
        if (this->storage.has_value()) {
            return cat::move(this->storage.get_value());
        }
        return cat::move(fallback);
    }

    // Get the value held by a `const`-qualified `Optional`, or a fallback
    // value if it does not hold a value.
    constexpr auto value_or(typename Storage::Value&& fallback) const&& -> T&& {
        if (this->storage.has_value()) {
            return cat::move(this->storage.get_value());
        }
        return cat::move(fallback);
    }

    // Monadic methods:

    // TODO: Support callbacks for `.transform()` that return `void`.
    // TODO: Use a `meta::invocable` `concept`.

    // If this non-`const`-qualified `Optional` holds a value, transform it by a
    // non-`void` function. Otherwise, propagate an empty `Optional`.
    template <typename Function>
    constexpr auto transform(Function&& callback) & {
        if (this->storage.has_value()) {
            return Optional<T>(
                meta::forward<Function>(callback)(this->storage.get_value()));
        }
        return *this;
    }

    // If this `const`-qualified `Optional` holds a value, transform it by a
    // non-`void` function without side-effects. Otherwise, propagate an empty
    // `Optional`.
    template <typename Function>
    constexpr auto transform(Function&& callback) const& {
        if (this->storage.has_value()) {
            return Optional<T>(
                meta::forward<Function>(callback(this->storage.get_value())));
        }
        return *this;
    }

    // If this non-`const`-qualified `Optional` holds a value, transform it by a
    // non-`void` function. Otherwise, propagate an empty `Optional`.
    template <typename Function>
    constexpr auto transform(Function&& callback) && {
        if (this->storage.has_value()) {
            return Optional<T>(meta::forward<Function>(
                callback(cat::move(this->storage.get_value()))));
        }
        return *this;
    }

    // If this `const`-qualified `Optional` holds a value, transform it by a
    // non-`void` function without side-effects. Otherwise, propagate an empty
    // `Optional`.
    template <typename Function>
    constexpr auto transform(Function&& callback) const&& {
        if (this->storage.has_value()) {
            return Optional<T>(meta::forward<Function>(
                callback(cat::move(this->storage.get_value()))));
        }
        return *this;
    }

    // Invoke a callback on the value of a `const`-qualified `Optional` and
    // propagate the result, if it holds a value.
    template <typename Function>
    constexpr auto and_then(Function&& callback) & {
        return this->has_value() ? Optional<T>(meta::forward<Function>(
                                       callback)(this->storage.get_value()))
                                 : *this;
    }

    // Invoke a callback on the value of a `const`-qualified `Optional` and
    // propagate the result, if it holds a value.
    template <typename Function>
    constexpr auto and_then(Function&& callback) const& {
        return this->has_value() ? Optional<T>(meta::forward<Function>(
                                       callback)(this->storage.get_value()))
                                 : *this;
    }

    // Invoke a callback on the value of a non-`const`-qualified `Optional` and
    // propagate the result, if it holds a value.
    template <typename Function>
    constexpr auto and_then(Function&& callback) && {
        return this->has_value()
                   ? Optional<T>(meta::forward<Function>(callback)(
                         cat::move(this->storage.get_value())))
                   : cat::move(*this);
    }

    // Invoke a callback on the value of a `const`-qualified `Optional` and
    // propagate the result, if it holds a value.
    template <typename Function>
    constexpr auto and_then(Function&& callback) const&& {
        return this->has_value()
                   ? Optional<T>(meta::forward<Function>(callback)(
                         cat::move(this->storage.get_value())))
                   : cat::move(*this);
    }

    // Invoke a callback iff a non-`const`-qualified `Optional` holds no value.
    template <typename Function>
    constexpr auto or_else(Function&& callback) & -> Optional<T> {
        if (!this->storage.has_value()) {
            meta::forward<Function>(callback)();
        }
        return *this;
    }

    // Invoke a callback iff a `const`-qualified `Optional` holds no value.
    template <typename Function>
    constexpr auto or_else(Function&& callback) const& -> Optional<T> {
        if (!this->storage.has_value()) {
            meta::forward<Function>(callback)();
        }
        return *this;
    }

    // Invoke a callback iff a non-`const`-qualified move-only `Optional` holds
    // no value.
    template <typename Function>
    constexpr auto or_else(Function&& callback) && -> Optional<T> {
        if (!this->storage.has_value()) {
            meta::forward<Function>(callback)();
        }
        return cat::move(*this);
    }

    // Invoke a callback iff a `const`-qualified move-only `Optional` holds no
    // value.
    template <typename Function>
    constexpr auto or_else(Function&& callback) const&& -> Optional<T> {
        if (!this->storage.has_value()) {
            meta::forward<Function>(callback)();
        }
        return cat::move(*this);
    }

    // Construct the value in-place and destroy the held value iff it exists.
    template <typename... Args>
    auto emplace(Args&&... args) -> T& {
        *this = none;
        this->storage.construct(meta::forward<Args>(args)...);
        return this->storage.get_value();
    }
};

template <typename T, auto predicate, T sentinel>
class Optional<Predicate<T, predicate, sentinel>> {
    T storage = sentinel;
  public:
    Optional() = delete;
    ~Optional() = default;

    template <typename U = T>
    constexpr Optional(U& value) requires(!predicate(sentinel) &&
                                          (meta::is_same_v<U, T> ||
                                           meta::is_convertible_v<U, T>))
        : storage(value){};

    template <typename U = T>
    constexpr Optional(U const& value) requires(!predicate(sentinel) &&
                                                (meta::is_same_v<U, T> ||
                                                 meta::is_convertible_v<U, T>))
        : storage(value){};

    template <typename U = T>
    constexpr Optional(U&& value) requires(!predicate(sentinel) &&
                                           (meta::is_same_v<U, T> ||
                                            meta::is_convertible_v<U, T>))
        : storage(cat::move(value)){};

    template <typename U = T>
    constexpr Optional(U const&& value) requires(!predicate(sentinel) &&
                                                 (meta::is_same_v<U, T> ||
                                                  meta::is_convertible_v<U, T>))
        : storage(cat::move(value)){};

    constexpr Optional(cat::detail::None) : storage(sentinel){};

    // Forward assignment operators to `storage`:
    constexpr auto operator=(auto& input) {
        this->storage = input;
        return *this;
    }

    constexpr auto operator=(auto const& input) {
        this->storage = input;
        return *this;
    }

    template <typename U>
    constexpr auto operator=(U&& input) {
        this->storage = meta::forward<U>(input);
        return *this;
    }

    // Specify the unusual `none` assignment operator.
    constexpr auto operator=(cat::detail::None) {
        this->storage = sentinel;
        return *this;
    }

    // TODO: Support non-`const`-qualified `Optional` when `has_value()` is
    // impure.
    // TODO: Support move semantics.
    // Get the held `value` unconditionally. If `has_value()` is `false`, this
    // data is undefined. If this method is used in `-O0`, it will panic in that
    // case, unless used in a `constexpr` context.
    constexpr auto value() -> T const& {
        if (meta::is_constant_evaluated()) {
            return this->storage;
        }
#ifdef __OPTIMIZE__
        return this->storage;
#else
        if (this->has_value()) [[likely]] {
            return this->storage;
        }
        cat::print(
            "`.value()` was illegally called on a `Optional` which did not hold a \
value!\n")
            .discard_result();
        cat::exit(1);
#endif
        __builtin_unreachable();
    }

    // Get the value held by a non-`const`-qualified `Optional`, or a fallback
    // value if it does not hold a value.
    constexpr auto value_or(T const fallback) & -> T& {
        if (this->has_value()) {
            return this->storage;
        }
        return fallback;
    }

    // Get the value held by a `const`-qualified `Optional`, or a fallback
    // value if it does not hold a value.
    constexpr auto value_or(T const fallback) const& -> T& {
        if (this->has_value()) {
            return this->storage;
        }
        return fallback;
    }

    // Get the value held by a non-`const`-qualified `Optional`, or a fallback
    // value if it does not hold a value.
    constexpr auto value_or(T&& fallback) && -> T&& {
        if (this->has_value()) {
            return cat::move(this->storage);
        }
        return cat::move(fallback);
    }

    // Get the value held by a `const`-qualified `Optional`, or a fallback
    // value if it does not hold a value.
    constexpr auto value_or(T&& fallback) const&& -> T&& {
        if (this->has_value()) {
            return cat::move(this->storage);
        }
        return cat::move(fallback);
    }

    // Monadic methods:

    // TODO: Support callbacks for `.transform()` that return `void`.
    // TODO: Use a `meta::invocable` `concept`.

    // If this non-`const`-qualified `Optional` holds a value, transform it by a
    // non-`void` function. Otherwise, propagate an empty `Optional`.
    template <typename Function>
    constexpr auto transform(Function&& callback) & {
        if (this->has_value()) {
            return Optional<Predicate<T, predicate, sentinel>>(
                meta::forward<Function>(callback)(this->storage));
        }
        return Optional<Predicate<T, predicate, sentinel>>(none);
    }

    // If this `const`-qualified `Optional` holds a value, transform it by a
    // non-`void` function. Otherwise, propagate an empty `Optional`.
    template <typename Function>
    constexpr auto transform(Function&& callback) const& {
        if (this->has_value()) {
            return Optional<Predicate<T, predicate, sentinel>>(
                meta::forward<Function>(callback)(this->storage));
        }
        return Optional<Predicate<T, predicate, sentinel>>(none);
    }

    // If this non-`const`-qualified `Optional` holds a value, transform it by a
    // non -`void` function. Otherwise, propagate an empty `Optional`.
    template <typename Function>
    constexpr auto transform(Function&& callback) && {
        if (this->has_value()) {
            return Optional<Predicate<T, predicate, sentinel>>(
                meta::forward<Function>(callback)(cat::move(this->storage)));
        }
        return Optional<Predicate<T, predicate, sentinel>>(none);
    }

    // If this `const`-qualified `Optional` holds a value, transform it by a
    // non-`void` function. Otherwise, propagate an empty `Optional`.
    template <typename Function>
    constexpr auto transform(Function&& callback) const&& {
        if (this->has_value()) {
            return Optional<Predicate<T, predicate, sentinel>>(
                meta::forward<Function>(callback)(cat::move(this->storage)));
        }
        return Optional<Predicate<T, predicate, sentinel>>(none);
    }

    // Invoke a callback on the value of a non-`const`-qualified `Optional` that
    // potentially mutates global state, and propagate the result.
    template <typename Function>
    constexpr auto and_then(Function&& callback) & {
        return this->has_value()
                   ? Optional<Predicate<T, predicate, sentinel>>(
                         meta::forward<Function>(callback)(this->storage))
                   : Optional<Predicate<T, predicate, sentinel>>(none);
    }

    // Invoke a callback on the value of a `const`-qualified `Optional`, and
    // propagate the result.
    template <typename Function>
    constexpr auto and_then(Function&& callback) const& {
        return this->has_value()
                   ? Optional<Predicate<T, predicate, sentinel>>(
                         meta::forward<Function>(callback)(this->storage))
                   : Optional<Predicate<T, predicate, sentinel>>(none);
    }

    // Invoke a callback on the value of a non-`const`-qualified `Optional` that
    // potentially mutates global state, and propagate the result.
    template <typename Function>
    constexpr auto and_then(Function&& callback) && {
        return cat::move(
            this->has_value()
                ? Optional<Predicate<T, predicate, sentinel>>(
                      meta::forward<Function>(callback)(this->storage))
                : Optional<Predicate<T, predicate, sentinel>>(none));
    }

    // Invoke a callback on the value of a `const`-qualified `Optional`, and
    // propagate the result.
    template <typename Function>
    constexpr auto and_then(Function&& callback) const&& {
        return cat::move(
            this->has_value()
                ? Optional<Predicate<T, predicate, sentinel>>(
                      meta::forward<Function>(callback)(this->storage))
                : Optional<Predicate<T, predicate, sentinel>>(none));
    }

    // Invoke a callback iff a non-`const`-qualified `Optional` holds no value,
    // then return the value.
    template <typename Function>
    constexpr auto or_else(Function&& callback) & {
        if (!this->has_value()) {
            meta::forward<Function>(callback)();
        }
        return *this;
    }

    // Invoke a callback iff a `const`-qualified `Optional` holds no value.
    template <typename Function>
    constexpr auto or_else(Function&& callback) const& {
        if (!this->has_value()) {
            meta::forward<Function>(callback)();
        }
        return *this;
    }

    // Invoke a callback iff a non-`const`-qualified move-only `Optional` holds
    // no value.
    template <typename Function>
    constexpr auto or_else(Function&& callback) && {
        if (!this->has_value()) {
            meta::forward<Function>(callback)();
        }
        return cat::move(*this);
    }

    // Invoke a callback iff a `const`-qualified move-only `Optional` holds no
    // value.
    template <typename Function>
    constexpr auto or_else(Function&& callback) const&& {
        if (!this->has_value()) {
            meta::forward<Function>(callback)();
        }
        return cat::move(*this);
    }

    constexpr auto has_value() const -> bool1 {
        return predicate(this->storage);
    }
};
