// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/allocator>
#include <cat/array>
#include <cat/collection>

// TODO: Add an `intrusive_list`.

namespace cat {

namespace detail {
template <typename T>
struct list_node {
   list_node<T>* p_next_node = nullptr;
   list_node<T>* p_previous_node = nullptr;
   T storage;
};

template <typename T>
struct slist_node {
   slist_node<T>* p_next_node = nullptr;
   T storage;
};

template <typename, bool>
class list_iterator;

template <typename T>
struct list_storage {
   using node = list_node<T>;

   detail::list_node<T>* m_p_head = nullptr;
   detail::list_node<T>* m_p_tail = nullptr;

   void
   reset() {
      m_p_head = nullptr;
      m_p_tail = nullptr;
   }
};

template <typename T>
struct slist_storage {
   using node = slist_node<T>;

   detail::slist_node<T>* m_p_head = nullptr;

   void
   reset() {
      m_p_head = nullptr;
   }
};

}  // namespace detail

template <typename T, is_allocator allocator_type, bool is_doubly_linked>
class basic_list
    : public collection_interface<
         basic_list<T, allocator_type, is_doubly_linked>, T>,
      public iterable_interface<basic_list<T, allocator_type, is_doubly_linked>,
                                detail::list_iterator, T, is_doubly_linked> {
   friend detail::list_iterator<T, is_doubly_linked>;

   // Doubly-linked list factory functions:
   template <typename U, is_allocator allocator>
   friend auto
   make_list(allocator&) -> maybe<basic_list<U, allocator, true>>;

   template <typename U, is_allocator allocator, is_convertible<U> Arg,
             is_convertible<U>... Args>
   friend auto
   make_list(allocator&, Arg&&, Args&&...)
      -> maybe<basic_list<U, allocator, true>>;

   template <typename U, is_allocator allocator>
   friend auto
   make_list_filled(allocator&, idx, U const&)
      -> maybe<basic_list<U, allocator, true>>;

   // Singly-linked list factory functions:
   template <typename U, is_allocator allocator>
   friend auto
   make_slist(allocator&) -> maybe<basic_list<U, allocator, false>>;

   template <typename U, is_allocator allocator, is_convertible<U> Arg,
             is_convertible<U>... Args>
   friend auto
   make_slist(allocator&, Arg&&, Args&&...)
      -> maybe<basic_list<U, allocator, false>>;

   template <typename U, is_allocator allocator>
   friend auto
   make_slist_filled(allocator&, idx, U const&)
      -> maybe<basic_list<U, allocator, false>>;

   // TODO: Implement `slist_storage`.
   using storage_type = conditional<is_doubly_linked, detail::list_storage<T>,
                                    detail::slist_storage<T>>;
   using node_type = storage_type::node;

 public:
   using iterator = detail::list_iterator<T, is_doubly_linked>;

   constexpr basic_list() = delete(
      "`cat::list` cannot be created without an allocator. Call "
      "`cat::make_list()` instead!");

   constexpr basic_list(basic_list&& other_list)
       : m_storage(other_list.m_storage),
         m_size(other_list.m_size),
         m_allocator(other_list.m_allocator) {
      other_list.m_storage.m_p_head = nullptr;
      if constexpr (is_doubly_linked) {
         other_list.m_storage.m_p_tail = nullptr;
      }
      other_list.m_size = 0u;
   }

   auto
   operator=(basic_list const&)
      -> basic_list& = delete("Implicit copying of `cat::list` is forbidden. "
                              "Call `.clone() or move instead!");

   constexpr auto
   operator=(basic_list&& other_list) -> basic_list& {
      m_storage = other_list.m_storage;
      m_size = other_list.m_size;

      other_list.m_storage.m_p_head = nullptr;
      if constexpr (is_doubly_linked) {
         other_list.m_storage.m_p_tail = nullptr;
      }
      other_list.m_size = 0u;
   }

   constexpr ~basic_list() {
      clear();
   }

 protected:
   // Being `protected:` permits derived classes and adaptors to call these.

   constexpr basic_list(allocator_type& allocator [[clang::lifetimebound]])
       : m_allocator(allocator) {
   }

   [[deprecated(
      "Implicit copying of `cat::list` is forbidden. Call `.clone() or move"
      "instead!")]]
   constexpr basic_list(basic_list const&) = default;

 public:
   // Get the count of elements stored in this `List`.
   [[nodiscard]]
   auto
   size() const -> idx {
      return m_size;
   }

   // Get the maximum possible count of elements stored in a `List`.
   [[nodiscard]]
   constexpr auto
   capacity() const -> idx {
      return m_size.max();
   }

   [[nodiscard]]
   auto
   front() -> T& {
      return m_storage.m_p_head->storage;
   }

   [[nodiscard]]
   auto
   back() -> T&
      requires(is_doubly_linked)
   {
      return m_storage.m_p_tail->storage;
   }

   constexpr void
   clear() {
      node_type* p_current = m_storage.m_p_head;
      while (p_current) {
         node_type* p_next = p_current->p_next_node;
         m_allocator.free(p_current);
         p_current = p_next;
      }
      m_storage.reset();
      m_size = 0u;
   }

 private:
   void
   place_initial_node(node_type& node) {
      node.p_next_node = nullptr;
      if constexpr (is_doubly_linked) {
         node.p_previous_node = nullptr;
      }
      m_storage.m_p_head = &node;
      if constexpr (is_doubly_linked) {
         m_storage.m_p_tail = &node;
      }
      m_size = 1u;
   }

   void
   place_node(iterator where, node_type& node) {
      // `.place_node()` should almost always be used for insertions in the
      // middle.
      if (where != this->begin() && where != this->end()) [[likely]] {
         // Place a node in the middle of this list.
         node.p_next_node = where.m_p_node;
         if constexpr (is_doubly_linked) {
            node.p_previous_node = where.m_p_node->p_previous_node;
         }

         node.p_next_node->p_previous_node = &node;
         if constexpr (is_doubly_linked) {
            node.p_previous_node->p_next_node = &node;
         }
      } else if (where == this->begin()) {
         // Place a node at the front of this list.
         node.p_next_node = m_storage.m_p_head;
         node.p_previous_node = nullptr;
         if constexpr (is_doubly_linked) {
            m_storage.m_p_head->p_previous_node = &node;
         }
         m_storage.m_p_head = &node;
      } else {
         // Place a node at the back of this list.
         // TODO: Consolidate this.
         if constexpr (is_doubly_linked) {
            node.p_previous_node = where.m_p_node->p_previous_node;
         }
         node.p_next_node = m_storage.m_p_tail;
         if constexpr (is_doubly_linked) {
            node.p_previous_node->p_next_node = &node;
         }
      }
      m_size++;
   }

   // Place a node at the front of this list.
   void
   place_node_front(node_type& node) {
      if (m_size > 0) [[likely]] {
         node.p_next_node = m_storage.m_p_head;
         if constexpr (is_doubly_linked) {
            node.p_previous_node = nullptr;
            node.p_next_node->p_previous_node = &node;
         }
         m_storage.m_p_head = &node;
         m_size++;
      } else {
         this->place_initial_node(node);
      }
   }

   // Place a node at the back of this list.
   void
   place_node_back(node_type& node)
      requires(is_doubly_linked)
   {
      if (m_size == 0) [[unlikely]] {
         this->place_initial_node(node);
      } else {
         node.p_next_node = nullptr;
         node.p_previous_node = m_storage.m_p_tail;
         node.p_previous_node->p_next_node = &node;
         m_storage.m_p_tail = &node;
         m_size++;
      }
   }

 public:
   // Deep-copy the contents of this `list`.
   template <is_allocator new_allocator_type>
   [[nodiscard]]
   auto
   clone(new_allocator_type& allocator)
      -> maybe<basic_list<T, new_allocator_type, is_doubly_linked>> {
      basic_list new_list =
         basic_list<T, allocator_type, is_doubly_linked>(allocator);
      cat::span<node_type> new_nodes =
         prop(allocator.template alloc_multi<node_type>(m_size));

      new_list.m_storage.m_p_head = new_nodes.data();
      new_list.m_size = m_size;

      if (new_nodes.size() == 1) [[unlikely]] {
         node_type& node = new_nodes.front();
         node.storage = this->front();
         cat::assert(node.p_next_node == nullptr);
         if constexpr (is_doubly_linked) {
            cat::assert(node.p_previous_node == nullptr);
         }
         return new_list;
      }

      node_type* p_current = new_nodes.data();
      [[maybe_unused]]
      node_type* p_previous = nullptr;
      iterator it = this->begin();
      // We can't use `cat::copy` here because the pointers need new values.
      for (idx i = 0; i < new_nodes.size() - 1; ++i) {
         node_type& new_node = new_nodes[i];
         // Copy over the contained element exactly.
         new_node.storage = *it;

         new_node.p_next_node = p_current + 1u;
         if constexpr (is_doubly_linked) {
            new_node.p_previous_node = p_previous;
         }
         p_previous = p_current;
         p_current += 1;
         ++it;
      }
      // Place the final node.
      node_type& last_node = new_nodes.back();
      last_node.storage = *it;
      last_node.p_next_node = nullptr;
      if constexpr (is_doubly_linked) {
         last_node.p_previous_node = p_current;
      }

      return new_list;
   }

   // Allocate a node and insert it into this list before the position of
   // `where`.
   template <typename U>
      requires(is_implicitly_convertible<U, T>)
   auto
   insert(iterator where, U&& value) -> maybe<iterator> {
      node_type* p_node = prop(m_allocator.template alloc<node_type>());
      node_type& node = *p_node;
      node.storage = fwd(value);

      if (m_size == 0) [[unlikely]] {
         // If this list has nothing in it, `.insert()` must be
         // special-cased.
         this->place_initial_node(node);
      } else {
         this->place_node(where, node);
      }
      return iterator(p_node);
   }

   // Allocate a node and insert it into this list before the position of
   // `where`, then construct it with arguments.
   template <typename... Args>
   auto
   emplace(iterator where, Args&&... arguments) -> maybe<iterator> {
      auto* p_node = prop(m_allocator.template alloc<node_type>());
      node_type& node = *p_node;
      new (&node.storage) T(fwd(arguments)...);

      if (m_size == 0) [[unlikely]] {
         // If this list has nothing in it, `.emplace()` must be
         // special-cased.
         this->place_initial_node(node);
      } else {
         this->place_node(where, node);
      }
      return iterator(p_node);
   }

   // Remove and deallocate an element from this list.
   auto
   erase(iterator where) -> iterator
      requires(is_doubly_linked)
   {
      if (m_size == 0) [[unlikely]] {
         // Prevent a segfault when the list is empty.
         return iterator(m_storage.m_p_head);
      }

      node_type& node = *where.m_p_node;
      iterator next = node.p_next_node;
      if (&node != m_storage.m_p_head && &node != m_storage.m_p_tail)
         [[likely]] {
         // Remove a node from the middle of this list.
         node.p_next_node->p_previous_node = node.p_previous_node;
         node.p_previous_node->p_next_node = node.p_next_node;
      } else if (&node == m_storage.m_p_head) {
         // Remove a node from the front of this list.
         node.p_next_node->p_previous_node = nullptr;
         m_storage.m_p_head = node.p_next_node;
      } else {
         // Remove a node from the back of this list.
         node.p_previous_node->p_next_node = nullptr;
         m_storage.m_p_tail = node.p_previous_node;
      }
      m_size--;
      m_allocator.free(&node);
      return iterator(next);
   }

   void
   erase_after(is_allocator auto& allocator, iterator where) {
      node_type& node = *where.p_node;
      node_type* p_remove = node.p_next_node;
      node.p_next_node = p_remove->p_next_node;
      if constexpr (is_doubly_linked) {
         node.p_next_node->p_previous_node = &node;
      }

      allocator.free(p_remove);
   }

   // Allocate a node and insert it at the beginning of this list.
   template <typename U>
      requires(is_implicitly_convertible<U, T>)
   auto
   push_front(U const& value) -> maybe<iterator> {
      auto* p_node = prop(m_allocator.template alloc<node_type>());
      node_type& node = *p_node;
      node.storage = static_cast<T>(value);
      this->place_node_front(node);

      return iterator(p_node);
   }

   // Allocate a node and insert it at the beginning of this list.
   template <typename... Args>
   auto
   emplace_front(Args&&... arguments) -> maybe<iterator> {
      auto* p_node = prop(m_allocator.template alloc<node_type>());
      node_type& node = *p_node;
      new (&node.storage) T(fwd(arguments)...);
      this->place_node_front(node);

      return iterator(p_node);
   }

   // Remove an element from the front of this list.
   void
   pop_front() {
      if (m_size > 0) [[likely]] {
         node_type& node = *(this->begin().m_p_node);
         if constexpr (is_doubly_linked) {
            if (node.p_next_node != nullptr) [[likely]] {
               node.p_next_node->p_previous_node = nullptr;
            }
         }

         m_storage.m_p_head = node.p_next_node;
         m_size--;
         m_allocator.free(&node);
      }

      if constexpr (is_doubly_linked) {
         if (m_size <= 1) {
            m_storage.m_p_tail = m_storage.m_p_head;
         }
      }
   }

   // TODO: rval-ref overload of `.push_back()`.

   // Allocate a node and insert it at the end of this list.
   template <typename U>
      requires(is_implicitly_convertible<U, T> && is_doubly_linked)
   auto
   push_back(U const& value) -> maybe<iterator> {
      node_type* p_node = prop(m_allocator.template alloc<node_type>());

      p_node->storage = static_cast<T>(value);
      this->place_node_back(*p_node);

      return iterator(p_node);
   }

   // Allocate a node and insert it at the end of this list.
   template <typename... Args>
      requires(is_doubly_linked)
   auto
   emplace_back(Args&&... arguments) -> maybe<iterator> {
      auto* p_node = prop(m_allocator.template alloc<node_type>());
      node_type& node = *p_node;
      new (&node.storage) T(fwd(arguments)...);
      this->place_node_back(node);

      return iterator(p_node);
   }

   // Remove and deallocate an element from the back of this list.
   void
   pop_back()
      requires(is_doubly_linked)
   {
      if (m_size > 0) [[likely]] {
         node_type& node = *(this->end().m_p_node);
         if (node.p_previous_node != nullptr) [[likely]] {
            node.p_previous_node->p_next_node = nullptr;
         }
         m_storage.m_p_tail = node.p_previous_node;
         m_size--;
         m_allocator.free(&node);
      }
   }

   // Providing these four iterator getters generates the remaining eight
   // through the `collection_interface`.
   [[nodiscard]]
   auto
   begin() -> iterator {
      return iterator(m_storage.m_p_head);
   }

   [[nodiscard]]
   auto
   end() -> iterator
      requires(is_doubly_linked)
   {
      return iterator(m_storage.m_p_tail);
   }

   [[nodiscard]]
   auto
   rbegin()
      requires(is_doubly_linked)
   {
      return cat::reverse_iterator_adaptor<iterator>{m_storage.m_p_tail};
   }

   [[nodiscard]]
   auto
   rend()
      requires(is_doubly_linked)
   {
      return cat::reverse_iterator_adaptor<iterator>{m_storage.m_p_head};
   }

   [[nodiscard]]
   auto
   rbegin() const
      requires(is_doubly_linked)
   {
      return cat::reverse_iterator_adaptor<iterator>{m_storage.m_p_tail};
   }

   [[nodiscard]]
   auto
   rend() const
      requires(is_doubly_linked)
   {
      return cat::reverse_iterator_adaptor<iterator>{m_storage.m_p_head};
   }

 private:
   storage_type m_storage;
   idx m_size = 0;
   allocator_type& m_allocator;
};

template <typename T, is_allocator allocator>
using list = basic_list<T, allocator, true>;

template <typename T, is_allocator allocator>
using slist = basic_list<T, allocator, false>;

namespace detail {

template <typename T, bool is_doubly_linked>
class list_iterator
    : public iterator_interface<list_iterator<T, is_doubly_linked>> {
 public:
   friend iterator_interface<list_iterator<T, is_doubly_linked>>;

   using value_type = T;
   using const_value_type = T const;
   using reference = T&;
   using const_reference = T const&;

   using node_type = conditional<is_doubly_linked, list_node<T>, slist_node<T>>;

   // using collection_type [[maybe_unused]] = list<T>;

   // TODO: This default constructor is deprecated due to the user-defined
   // constructor. Should this still exist?
   // iterator(iterator const&) = default;

   list_iterator(node_type* p_input) : m_p_node(p_input) {
   }

   auto
   increment() -> list_iterator& {
      m_p_node = m_p_node->p_next_node;
      return *this;
   }

   auto
   decrement() -> list_iterator&
      requires(is_doubly_linked)
   {
      m_p_node = m_p_node->p_previous_node;
      return *this;
   }

   auto
   dereference() const -> T& {
      assert(m_p_node);
      return m_p_node->storage;
   }

   auto
   equal_to(list_iterator const& it) const -> bool {
      return it.m_p_node == m_p_node;
   }

   node_type* m_p_node;
};

template <typename T>
void
initialize_list_variadic(span<T>& list_nodes, T* p_previous, auto&& current,
                         auto&&... next) {
   if constexpr (sizeof...(next) > 0u) {
      // Construct a node at this address.
      T* p_current = list_nodes.data();
      new (p_current) T(p_current + 1u, p_previous, fwd(current));
      // Recurse to the next node.
      list_nodes = list_nodes.last(list_nodes.size() - 1u);
      initialize_list_variadic<T>(list_nodes, p_current, fwd(next)...);
   } else {
      // Final node.
      T* p_current = p_previous + 1u;
      new (p_current) T(nullptr, p_previous, fwd(current));
   }
}

template <typename T>
void
initialize_slist_variadic(span<T>& list_nodes, T* p_previous, auto&& current,
                          auto&&... next) {
   if constexpr (sizeof...(next) > 0u) {
      // Construct a node at this address.
      T* p_current = list_nodes.data();
      new (p_current) T(p_current + 1u, fwd(current));
      // Recurse to the next node.
      list_nodes = list_nodes.last(list_nodes.size() - 1u);
      initialize_list_variadic<T>(list_nodes, p_current, fwd(next)...);
   } else {
      // Final node.
      T* p_current = p_previous + 1u;
      new (p_current) T(nullptr, fwd(current));
   }
}

template <typename T>
void
initialize_list_filled(span<T> list_nodes, T* p_previous,
                       decltype(T::storage) const& value) {
   T* p_current = list_nodes.data();

   if (list_nodes.size() > 1u) {
      // Construct a node at this address.
      new (p_current) T(p_current + 1u, p_previous, value);
      // Recurse to the next node.
      list_nodes = list_nodes.last(list_nodes.size() - 1u);
      initialize_list_filled<T>(list_nodes, p_current, value);
   } else {
      // Final node.
      new (p_current) T(nullptr, p_previous, value);
   }
}

template <typename T>
void
initialize_slist_filled(span<T> list_nodes, T* p_previous,
                        decltype(T::storage) const& value) {
   if (list_nodes.size() > 1u) {
      // Construct a node at this address.
      T* p_current = list_nodes.data();
      new (p_current) T(p_current + 1u, value);
      // Recurse to the next node.
      list_nodes = list_nodes.last(list_nodes.size() - 1u);
      initialize_slist_filled<T>(list_nodes, p_current, value);
   } else {
      // Final node.
      T* p_current = p_previous + 1u;
      new (p_current) T(nullptr, value);
   }
}

}  // namespace detail

// These factory functions require access to the `protected` constructor, which
// is marked `[[deprecated]]`.
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

// Make an empty `list`.
template <typename T, is_allocator allocator_type>
[[nodiscard]]
auto
make_list(allocator_type& allocator) -> maybe<list<T, allocator_type>> {
   return list<T, allocator_type>(allocator);
}

// Make a `list` initialized by a pack.
template <typename T, is_allocator allocator_type, is_convertible<T> U,
          is_convertible<T>... Args>
[[nodiscard]]
auto
make_list(allocator_type& allocator, U&& value, Args&&... remaining)
   -> maybe<list<T, allocator_type>> {
   list<T, allocator_type> new_list(allocator);
   using node = detail::list_node<T>;

   if constexpr (sizeof...(Args) > 0) {
      cat::span<node> nodes =
         prop(allocator.template alloc_multi<node>(sizeof...(remaining) + 1));

      // TODO: Test `make_list` with exactly 1 value.
      new_list.m_storage.m_p_head = nodes.data();
      new_list.m_storage.m_p_tail = nodes.data() + nodes.size() - 1u;
      new_list.m_size = nodes.size();

      detail::initialize_list_variadic<node>(nodes, nullptr, value,
                                             fwd(remaining)...);
   } else {
      // TODO: Is `calloc` more efficient here?
      node* p_new_node = prop(allocator.template alloc<node>());
      p_new_node->p_next_node = nullptr;
      p_new_node->p_previous_node = nullptr;
      p_new_node->storage = fwd(value);

      new_list.m_storage.m_p_head = p_new_node;
      new_list.m_size = 1u;
   }

   return new_list;
}

// Make a `list` initialized by a pack.
template <is_allocator allocator_type, typename... Args>
[[nodiscard]]
auto
make_list(allocator_type& allocator, Args&&... values) {
   using common = common_type<Args...>;
   return make_list<common>(allocator, static_cast<common>(fwd(values))...);
}

// Make a `list` initialized to `value`.
template <typename T, is_allocator allocator_type>
[[nodiscard]]
auto
make_list_filled(allocator_type& allocator, idx count, T const& value)
   -> maybe<list<T, allocator_type>> {
   list<T, allocator_type> new_list(allocator);

   using node = detail::list_node<T>;
   cat::span<node> nodes = prop(allocator.template alloc_multi<node>(count));

   new_list.m_storage.m_p_head = nodes.data();
   new_list.m_storage.m_p_tail = nodes.data() + count - 1u;
   new_list.m_size = count;

   detail::initialize_list_filled<node>(nodes, nodes.data(), value);

   return new_list;
}

// Make an empty `slist`.
template <typename T, is_allocator allocator_type>
[[nodiscard]]
auto
make_slist(allocator_type& allocator) -> maybe<slist<T, allocator_type>> {
   return slist<T, allocator_type>(allocator);
}

// Make a `slist` initialized by a pack.
template <typename T, is_allocator allocator_type, is_convertible<T> U,
          is_convertible<T>... Args>
[[nodiscard]]
auto
make_slist(allocator_type& allocator, U&& value, Args&&... remaining)
   -> maybe<slist<T, allocator_type>> {
   slist<T, allocator_type> new_slist(allocator);
   using node = detail::slist_node<T>;

   if constexpr (sizeof...(Args) > 0) {
      cat::span<node> nodes =
         prop(allocator.template alloc_multi<node>(sizeof...(remaining) + 1));

      // TODO: Test `make_slist` with exactly 1 value.
      new_slist.m_storage.m_p_head = nodes.data();
      new_slist.m_size = nodes.size();
      detail::initialize_slist_variadic<node>(nodes, nullptr, value,
                                              fwd(remaining)...);
   } else {
      // TODO: Is `calloc` more efficient here?
      node* p_new_node = prop(allocator.template alloc<node>());
      p_new_node->p_next_node = nullptr;
      p_new_node->p_previous_node = nullptr;
      p_new_node->storage = fwd(value);

      new_slist.m_storage.m_p_head = p_new_node;
      new_slist.m_size = 1u;
   }

   return new_slist;
}

// Make an `slist` initialized by a pack.
template <is_allocator allocator_type, typename... Args>
[[nodiscard]]
auto
make_slist(allocator_type& allocator, Args&&... values) {
   using common = common_type<Args...>;
   return make_slist<common>(allocator, static_cast<common>(fwd(values))...);
}

// Make an `slist` initialized to `value`.
template <typename T, is_allocator allocator_type>
[[nodiscard]]
auto
make_slist_filled(allocator_type& allocator, idx count, T const& value)
   -> maybe<slist<T, allocator_type>> {
   slist<T, allocator_type> new_slist(allocator);

   using node = detail::slist_node<T>;
   cat::span<node> nodes = prop(allocator.template alloc_multi<node>(count));

   new_slist.m_storage.m_p_head = nodes.data();
   new_slist.m_size = count;

   detail::initialize_slist_filled<node>(nodes, nodes.data(), value);

   return new_slist;
}

#pragma GCC diagnostic pop

}  // namespace cat
