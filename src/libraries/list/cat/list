// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/allocator>
#include <cat/array>
#include <cat/collection>

// TODO: Add an `intrusive_list`.

namespace cat {

namespace detail {
template <typename T>
struct list_node {
   list_node<T>* p_next_node;
   list_node<T>* p_previous_node;
   T storage;
};

template <typename T>
struct forward_list_node {
   forward_list_node<T>* p_next_node;
   T storage;
};

template <typename T>
class list_iterator;

}  // namespace detail

template <typename T>
class list : public collection_interface<list<T>, T>,
             iterable_interface<detail::list_iterator<T>, T> {
 public:
   friend detail::list_iterator<T>;
   using iterator = detail::list_iterator<T>;

   constexpr list() : m_p_head(nullptr), m_p_tail(nullptr), m_length(0) {
   }

   constexpr list(list<T>&& list) = default;

 protected:
   [[deprecated("Implicit copying of `cat::list` is forbidden! Consider moving "
                "or calling `.clone() instead.")]]
   constexpr list(list<T> const&) = default;

 public:
   // Get the count of elements stored in this `List`.
   [[nodiscard]]
   auto
   size() const -> idx {
      return m_length;
   }

   // Get the maximum possible count of elements stored in a `List`.
   [[nodiscard]]
   constexpr auto
   capacity() const -> idx {
      return m_length.max();
   }

   [[nodiscard]]
   auto
   front() -> T& {
      return m_p_head->storage;
   }

   [[nodiscard]]
   auto
   back() -> T& {
      return m_p_tail->storage;
   }

 private:
   void
   place_initial_node(detail::list_node<T>& node) {
      node.p_next_node = nullptr;
      node.p_previous_node = nullptr;
      m_p_head = &node;
      m_p_tail = &node;
      m_length = 1u;
   }

   void
   place_node(iterator where, detail::list_node<T>& node) {
      // `.place_node()` should almost always be used for insertions in the
      // middle.
      if (where != this->begin() && where != this->end()) [[likely]] {
         // Place a node in the middle of this list.
         node.p_next_node = where.m_p_node;
         node.p_previous_node = where.m_p_node->p_previous_node;

         node.p_next_node->p_previous_node = &node;
         node.p_previous_node->p_next_node = &node;
      } else if (where == this->begin()) {
         // Place a node at the front of this list.
         node.p_next_node = m_p_head;
         node.p_previous_node = nullptr;
         m_p_head->p_previous_node = &node;
         m_p_head = &node;
      } else {
         // Place a node at the back of this list.
         node.p_previous_node = where.m_p_node->p_previous_node;
         node.p_next_node = m_p_tail;
         node.p_previous_node->p_next_node = &node;
      }
      m_length++;
   }

   // Place a node at the front of this list.
   void
   place_node_front(detail::list_node<T>& node) {
      if (m_length > 0) [[likely]] {
         node.p_next_node = m_p_head;
         node.p_previous_node = nullptr;
         node.p_next_node->p_previous_node = &node;
         m_p_head = &node;
         m_length++;
      } else {
         this->place_initial_node(node);
      }
   }

   // Place a node at the back of this list.
   void
   place_node_back(detail::list_node<T>& node) {
      if (m_length == 0) [[unlikely]] {
         this->place_initial_node(node);
      } else {
         node.p_next_node = nullptr;
         node.p_previous_node = m_p_tail;
         node.p_previous_node->p_next_node = &node;
         m_p_tail = &node;
         m_length++;
      }
   }

 public:
   // Deep-copy the contents of this `List`.
   [[nodiscard]]
   auto
   clone(is_allocator auto& allocator) -> maybe<list<T>> {
      list<T> new_list;
      for (iterator it = this->begin(); it != (this->end() + 1); ++it) {
         new_list.push_back(allocator, *it);
      }
      return new_list;
   }

   // Allocate a node and insert it into this list before the position of
   // `where`.
   template <typename U>
      requires(is_implicitly_convertible<U, T>)
   auto
   insert(is_allocator auto& allocator, iterator where, U const& value)
      -> maybe<iterator> {
      // `cat::maybe_ptr` at here produces an internal compiler error in
      // GCC 12.
      cat::maybe memory = allocator.template alloc<detail::list_node<T>>();
      if (!memory.has_value()) {
         // Propagate memory allocation failure.
         return nullopt;
      }

      detail::list_node<T>& node = *memory.value();
      node.storage = static_cast<T>(value);

      if (m_length == 0) [[unlikely]] {
         // If this list has nothing in it, `.insert()` must be
         // special-cased.
         this->place_initial_node(node);
      } else {
         this->place_node(where, node);
      }
      return iterator(&node);
   }

   // Allocate a node and insert it into this list before the position of
   // `where`, then construct it with arguments.
   template <typename... Args>
   auto
   emplace(is_allocator auto& allocator, iterator where, Args&&... arguments)
      -> maybe<iterator> {
      cat::maybe memory = allocator.template alloc<detail::list_node<T>>();
      if (!memory.has_value()) {
         // Propagate memory allocation failure.
         return nullopt;
      }

      detail::list_node<T>& node = *memory.value();
      new (&node.storage) T(fwd(arguments)...);

      if (m_length == 0) [[unlikely]] {
         // If this list has nothing in it, `.emplace()` must be
         // special-cased.
         this->place_initial_node(node);
      } else {
         this->place_node(where, node);
      }
      return iterator(&node);
   }

   // Remove and deallocate an element from this list.
   auto
   erase(is_allocator auto& allocator, iterator where) -> maybe<iterator> {
      if (m_length == 0) [[unlikely]] {
         // Prevent a segfault when the list is empty.
         return iterator(m_p_head);
      }

      detail::list_node<T>& node = *where.m_p_node;
      iterator next = node.p_next_node;
      if (&node != m_p_head && &node != m_p_tail) [[likely]] {
         // Remove a node from the middle of this list.
         node.p_next_node->p_previous_node = node.p_previous_node;
         node.p_previous_node->p_next_node = node.p_next_node;
      } else if (&node == m_p_head) {
         // Remove a node from the front of this list.
         node.p_next_node->p_previous_node = nullptr;
         m_p_head = node.p_next_node;
      } else {
         // Remove a node from the back of this list.
         node.p_previous_node->p_next_node = nullptr;
         m_p_tail = node.p_previous_node;
      }
      m_length--;
      allocator.free(&node);
      return iterator(next);
   }

   // Allocate a node and insert it at the beginning of this list.
   template <typename U>
      requires(is_implicitly_convertible<U, T>)
   auto
   push_front(is_allocator auto& allocator, U const& value) -> maybe<iterator> {
      cat::maybe memory = allocator.template alloc<detail::list_node<T>>();
      if (!memory.has_value()) {
         // Propagate memory allocation failure.
         return nullopt;
      }

      detail::list_node<T>& node = *memory.value();
      node.storage = static_cast<T>(value);
      this->place_node_front(node);

      return iterator(&node);
   }

   // Allocate a node and insert it at the beginning of this list.
   template <typename... Args>
   auto
   emplace_front(is_allocator auto& allocator, Args&&... arguments)
      -> maybe<iterator> {
      cat::maybe memory = allocator.template alloc<detail::list_node<T>>();
      if (!memory.has_value()) {
         // Propagate memory allocation failure.
         return nullopt;
      }

      detail::list_node<T>& node = *memory.value();
      new (&node.storage) T(fwd(arguments)...);
      this->place_node_front(node);

      return iterator(&node);
   }

   // Remove an element from the front of this list.
   void
   pop_front(is_allocator auto& allocator) {
      if (m_length > 0) [[likely]] {
         detail::list_node<T>& node = *(this->begin().m_p_node);
         if (node.p_next_node != nullptr) [[likely]] {
            node.p_next_node->p_previous_node = nullptr;
         }
         m_p_head = node.p_next_node;
         m_length--;
         allocator.free(&node);
      }

      if (m_length <= 1) {
         m_p_tail = m_p_head;
      }
   }

   // TODO: rval-ref overload of `.push_back()`.

   // Allocate a node and insert it at the end of this list.
   template <typename U>
      requires(is_implicitly_convertible<U, T>)
   auto
   push_back(is_allocator auto& allocator, U const& value) -> maybe<iterator> {
      cat::maybe memory = allocator.template alloc<detail::list_node<T>>();
      if (!memory.has_value()) {
         // Propagate memory allocation failure.
         return nullopt;
      }

      detail::list_node<T>& node = *memory.value();
      node.storage = static_cast<T>(value);
      this->place_node_back(node);

      return iterator(&node);
   }

   // Allocate a node and insert it at the end of this list.
   template <typename... Args>
   auto
   emplace_back(is_allocator auto& allocator, Args&&... arguments)
      -> maybe<iterator> {
      cat::maybe memory = allocator.template alloc<detail::list_node<T>>();
      if (!memory.has_value()) {
         // Propagate memory allocation failure.
         return nullopt;
      }

      detail::list_node<T>& node = *memory.value();
      new (&node.storage) T(fwd(arguments)...);
      this->place_node_back(node);

      return iterator(&node);
   }

   // Remove and deallocate an element from the back of this list.
   void
   pop_back(is_allocator auto& allocator) {
      if (m_length > 0) [[likely]] {
         detail::list_node<T>& node = *(this->end().m_p_node);
         if (node.p_previous_node != nullptr) [[likely]] {
            node.p_previous_node->p_next_node = nullptr;
         }
         m_p_tail = node.p_previous_node;
         m_length--;
         allocator.free(&node);
      }
   }

   // Remove and deallocate all elements from this list. All nodes must have
   // been allocated by the same arena for this function to succeed.
   void
   clear(is_allocator auto& allocator) {
      if (m_length > 0) {
         iterator previous_it = nullptr;
         iterator current_it = this->begin();
         iword i = 0;

         while (i < m_length) {
            if (i > 0) {
               allocator.free(previous_it.m_p_node);
            }
            previous_it = current_it;
            ++current_it;
            ++i;
         }

         allocator.free(previous_it.m_p_node);
         m_length = 0;
      }
   }

   // Providing these four iterator getters generates the remaining eight
   // through the `collection_interface`.
   [[nodiscard]]
   auto
   begin() -> iterator {
      return iterator(m_p_head);
   }

   [[nodiscard]]
   auto
   end() -> iterator {
      return iterator(m_p_tail);
   }

   // [[nodiscard]]
   // auto
   // rbegin() {
   //    return cat::reverse_iterator_adaptor<iterator>{m_p_tail};
   // }

   // [[nodiscard]]
   // auto
   // rend() {
   //    return cat::reverse_iterator_adaptor<iterator>{m_p_head};
   // }

 private:
   detail::list_node<T>* m_p_head;
   detail::list_node<T>* m_p_tail;
   idx m_length;
};

namespace detail {

template <typename T>
class list_iterator : public iterator_interface<list_iterator<T>> {
 public:
   friend list<T>;
   friend iterator_interface<list_iterator>;

   template <typename U, typename... Args>
      requires(is_implicitly_convertible<Args, U> && ...)
   friend auto
   make_list(is_allocator auto& allocator, Args&&... values) -> maybe<list<U>>;

   using collection_type [[maybe_unused]] = list<T>;

   // TODO: This default constructor is deprecated due to the user-defined
   // constructor. Should this still exist?
   // iterator(iterator const&) = default;

   list_iterator(detail::list_node<T>* p_input) : m_p_node(p_input) {
   }

   auto
   increment() -> list_iterator& {
      m_p_node = m_p_node->p_next_node;
      return *this;
   }

   auto
   decrement() -> list_iterator& {
      m_p_node = m_p_node->p_previous_node;
      return *this;
   }

   auto
   dereference() const -> T& {
      return m_p_node->storage;
   }

   auto
   equal_to(list_iterator const& it) const -> bool {
      return it.m_p_node == m_p_node;
   }

 private:
   detail::list_node<T>* m_p_node;
};

template <idx i>
void
initialize_list(auto& list_nodes, auto&& current, auto&&... next) {
   list_nodes[i] = fwd(current);
   if constexpr (sizeof...(next) > 0u) {
      initialize_list<i + 1u>(list_nodes, fwd(next)...);
   }
}

}  // namespace detail

template <typename T, typename... Args>
   requires(is_implicitly_convertible<Args, T> && ...)
[[nodiscard]]
auto
make_list(is_allocator auto& allocator, Args&&... values) -> maybe<list<T>> {
   list<T> new_list;
   using node = detail::list_node<T>;
   cat::span nodes =
      prop(allocator.template alloc_multi<node>(sizeof...(values)));

   detail::initialize_list(nodes, fwd(values)...);
   new_list.m_p_head = nodes.data();
   return new_list;
}

// TODO: Move this to a separate file.
template <typename T>
class forward_list : public collection_interface<forward_list<T>, T> {
 public:
   struct iterator : iterator_interface<iterator> {
      // TODO: This default constructor is deprecated due to the user-defined
      // constructor. Should this still exist?
      // iterator(iterator const&) = default;

      iterator(detail::forward_list_node<T>* p_input) : p_node(p_input) {
      }

      auto
      increment() -> iterator& {
         this->p_node = this->p_node->p_next_node;
         return *this;
      }

      auto
      dereference() const -> T& {
         return this->p_node->storage;
      }

      auto
      equal_to(iterator const& it) const -> bool {
         return it.p_node == this->p_node;
      }

      detail::forward_list_node<T>* p_node;
   };

   constexpr forward_list()
       : m_p_head(nullptr), m_p_tail(nullptr), m_length(0) {
   }

   constexpr forward_list(forward_list<T>&& list) = default;

 protected:
   // Being `protected:` permits derived classes and adaptors to call this.
   // Only allow the shallow copy constructor to be used by these static
   // factory member functions. For public copying, `.clone()` should be used.
   [[deprecated(
      "Implicit copying of `cat::forward_list` is forbidden. Call `.clone() "
      "instead!")]]
   //
   constexpr forward_list(forward_list<T> const&) = default;

 public:
   template <typename U, U... values>
      requires(is_implicitly_convertible<U, T>)
   [[nodiscard]]
   static auto
   from(is_allocator auto& allocator,
        value_type_list<U, values...> initializers) -> maybe<forward_list<T>> {
      forward_list<T> new_list;
      // TODO: Check if a recursive function is more efficient here.
      array array = initializers;
      // TODO: Optimize memory allocations with a multiple `.push_back()`
      // overload.
      for (iword i = 0; i < ssizeof_pack(values...); ++i) {
         maybe result = new_list.push_back(allocator, array[i]);
         if (!result.has_value()) {
            return nullopt;
         }
      }
      return new_list;
   }

   template <typename... Args>
      requires(is_implicitly_convertible<Args, T> && ...)
   [[nodiscard]]
   static auto
   from(is_allocator auto& allocator, Args&&... initializers)
      -> maybe<forward_list<T>> {
      forward_list<T> new_list;
      // TODO: Check if a recursive function is more efficient here.
      array array = {fwd(initializers)...};
      // TODO: Optimize memory allocations with a multiple `.push_back()`
      // overload.
      for (iword i = 0; i < ssizeof_pack<Args...>(); ++i) {
         maybe result = new_list.push_back(allocator, array[i]);
         if (!result.has_value()) {
            return nullopt;
         }
      }
      return new_list;
   }

   // Get the count of elements stored in this `forward_list`.
   [[nodiscard]]
   auto
   size() const -> idx {
      return m_length;
   }

   // Get the maximum possible count of elements stored in a `forward_list`.
   [[nodiscard]]
   constexpr auto
   capacity() const -> idx {
      return m_length.max();
   }

   [[nodiscard]]
   auto
   front() -> T& {
      return m_p_head->storage;
   }

   [[nodiscard]]
   auto
   back() -> T& {
      return m_p_tail->storage;
   }

 private:
   void
   place_initial_node(detail::forward_list_node<T>& node) {
      node.p_next_node = nullptr;
      m_p_head = &node;
      m_p_tail = &node;
      m_length = 1u;
   }

   void
   place_node_after(iterator where, detail::forward_list_node<T>& node) {
      if (where != this->end()) {
         // Place a node in the middle of this list.
         node.p_next_node = where.p_node->p_next_node;
         where.p_node->p_next_node = &node;
      } else {
         // Place a node at the back of this list.
         where.p_node->p_next_node = &node;
         node.p_next_node = nullptr;
         m_p_tail = &node;
      }
      m_length++;
   }

   // Place a node at the front of this list.
   void
   place_node_front(detail::forward_list_node<T>& node) {
      if (m_length > 0) [[likely]] {
         node.p_next_node = m_p_head;
         m_p_head = &node;
         m_length++;
      } else {
         this->place_initial_node(node);
      }
   }

 public:
   // Deep-copy the contents of this `forward_list`.
   [[nodiscard]]
   auto
   clone(is_allocator auto& allocator) -> maybe<forward_list<T>> {
      forward_list<T> new_list;
      iterator current = prop(new_list.push_front(allocator, this->front()));
      for (iterator it = (this->begin() + 1); it != (this->end() + 1); ++it) {
         current = prop(this->insert_after(allocator, current, *it));
      }
      return new_list;
   }

   template <typename U>
   auto
   insert_after(is_allocator auto& allocator, iterator where, U const& value)
      -> maybe<iterator>
      requires(is_implicitly_convertible<U, T>)
   {
      cat::maybe memory =
         allocator.template alloc<detail::forward_list_node<T>>();
      if (!memory.has_value()) {
         // Propagate memory allocation failure.
         return nullopt;
      }

      detail::forward_list_node<T>& node = *memory.value();
      node.storage = static_cast<T>(value);

      if (m_length == 0) [[unlikely]] {
         // If this list has nothing in it, `.insert_after()` must be
         // special-cased.
         this->place_initial_node(node);
      } else {
         this->place_node_after(where, node);
      }
      return iterator(&node);
   }

   template <typename... Args>
   auto
   emplace_after(is_allocator auto& allocator, iterator where,
                 Args&&... arguments) -> maybe<iterator> {
      cat::maybe memory =
         allocator.template alloc<detail::forward_list_node<T>>();
      if (!memory.has_value()) {
         // Propagate memory allocation failure.
         return nullopt;
      }

      detail::forward_list_node<T>& node = *memory.value();
      new (&node.storage) T(fwd(arguments)...);

      if (m_length == 0) [[unlikely]] {
         // If this list has nothing in it, `.insert_after()` must be
         // special-cased.
         this->place_initial_node(node);
      } else {
         this->place_node_after(where, node);
      }
      return iterator(&node);
   }

   void
   erase_after(is_allocator auto& allocator, iterator where) {
      detail::forward_list_node<T>& node = *where.p_node;
      detail::forward_list_node<T>* p_remove = node.p_next_node;
      node.p_next_node = p_remove->p_next_node;
      allocator.free(p_remove);
   }

   // Allocate a node and insert it at the beginning of this list.
   template <typename U>
      requires(is_implicitly_convertible<U, T>)
   auto
   push_front(is_allocator auto& allocator, U const& value) -> maybe<iterator> {
      cat::maybe memory =
         allocator.template alloc<detail::forward_list_node<T>>();
      if (!memory.has_value()) {
         // Propagate memory allocation failure.
         return nullopt;
      }

      detail::forward_list_node<T>& node = *memory.value();
      node.storage = static_cast<T>(value);
      this->place_node_front(node);

      return iterator(&node);
   }

   // Allocate a node and insert it at the beginning of this list.
   template <typename... Args>
   auto
   emplace_front(is_allocator auto& allocator, Args&&... arguments)
      -> maybe<iterator> {
      cat::maybe memory =
         allocator.template alloc<detail::forward_list_node<T>>();
      if (!memory.has_value()) {
         // Propagate memory allocation failure.
         return nullopt;
      }

      detail::forward_list_node<T>& node = *memory.value();
      new (&node.storage) T(fwd(arguments)...);
      this->place_node_front(node);

      return iterator(&node);
   }

   // Remove an element from the front of this list.
   void
   pop_front(is_allocator auto& allocator) {
      if (m_length > 0) [[likely]] {
         detail::forward_list_node<T>& node = *m_p_head;
         m_p_head = node.p_next_node;
         m_length--;
         allocator.free(&node);
      }
   }

   // TODO: Add a `.reset()` to remove elements without deallocating them.
   //
   // Remove and deallocate all elements from this list. All nodes must
   // have been allocated by the same arena for this function to succeed.
   void
   clear(is_allocator auto& allocator) {
      if (m_length > 0) {
         iterator previous_it = nullptr;
         iterator current_it = this->begin();
         idx i;

         while (i < m_length) {
            if (i > 0) {
               allocator.free(previous_it.p_node);
            }
            previous_it = current_it;
            ++current_it;
            ++i;
         }

         allocator.free(previous_it.p_node);
         m_length = 0u;
      }
   }

   // Providing these two iterator getters generates the remaining four
   // through the `collection_interface`.
   [[nodiscard]]
   auto
   begin() -> iterator {
      return iterator(m_p_head);
   }

   [[nodiscard]]
   auto
   end() -> iterator {
      return iterator(m_p_tail);
   }

 private:
   detail::forward_list_node<T>* m_p_head;
   detail::forward_list_node<T>* m_p_tail;
   idx m_length;
};

}  // namespace cat
