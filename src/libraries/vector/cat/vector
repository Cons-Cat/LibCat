// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/allocators>
#include <cat/collection>

namespace cat {

// TODO: Support `__sanitizer_annotate_contiguous_container`.

template <typename T>
class Vector : public CollectionFacade<Vector<T>, T> {
    T* p_storage;
    ssize current_size;
    ssize current_capacity;

    // Reallocate this vector's memory if it is exceeded, in a non-`constexpr`
    // context.
    auto double_storage(StableAllocator auto& allocator) -> Optional<void> {
        ssize new_capacity;
        if (this->current_capacity > 0) [[likely]] {
            new_capacity = this->current_capacity * 2;
        } else {
            // If this storage has not been allocated yet, then greedily
            // allocate its capacity as 4.
            new_capacity = 4;
        }

        // TODO: `.p_srealloc()`.
        Optional result = allocator.template p_malloc<T>(new_capacity);
        if (!result.has_value()) {
            return nullopt;
        } else {
            // TODO: Should this propagate an error instead of panicking?
            allocator.free(this->p_storage).or_panic();
            T* p_new = result.value();
            // TODO: If `T` is relocatable, use `copy_memory()`.
            for (ssize::Raw i = 0; i < this->current_size.raw; ++i) {
                p_new[i] = move(this->p_storage[i]);
            }

            this->p_storage = p_new;
            this->current_capacity = new_capacity;
            return monostate;
        }
    }

    // Reallocate this vector's memory if it is exceeded, in a `constexpr`
    // context.
    consteval void double_storage() {
        ssize const new_capacity = max(4, this->current_capacity * 2);
        T* p_new = new T[new_capacity.raw];
        for (ssize::Raw i = 0; i < this->current_size.raw; ++i) {
            p_new[i] = move(this->p_storage[i]);
        }

        delete[] this->p_storage;
        this->p_storage = p_new;
        this->current_capacity = new_capacity;
    }

  public:
    constexpr Vector()
        : p_storage(nullptr), current_size(0), current_capacity(0) {
        if (is_constant_evaluated()) {
            this->p_storage = new T[1];
            this->p_storage[0] = 0;
        }
    };

    constexpr Vector(Vector<T>&& vector) = default;

    constexpr ~Vector() {
        if (is_constant_evaluated()) {
            delete[] this->p_storage;
        }
    }

  private:
    // Only allow the shallow copy constructor to be used by these static
    // factory member functions.
    constexpr Vector(Vector<T> const& vector) = default;

  public:
    [[nodiscard]] static auto reserved(StableAllocator auto& allocator,
                                       ssize count) -> Optional<Vector<T>> {
        Vector<T> vector;
        Optional result = vector.reserve(allocator, count);
        if (!result.has_value()) {
            return nullopt;
        }
        return vector;
    }

    [[nodiscard]] consteval static auto reserved(ssize count) -> Vector<T> {
        Vector<T> vector;
        vector.reserve(count);
        return vector;
    }

    [[nodiscard]] static auto filled(StableAllocator auto& allocator,
                                     ssize count, T const& value)
        -> Optional<Vector<T>> {
        Vector<T> vector;
        Optional result = vector.reserve(allocator, count);
        if (!result.has_value()) {
            return nullopt;
        }
        vector.current_size = count;
        // TODO: Call a vectorized fill memory function.
        for (T& element : vector) {
            element = value;
        }
        return vector;
    }

    [[nodiscard]] static auto cloned(StableAllocator auto& allocator,
                                     Vector<T> const& vector)
        -> Optional<Vector<T>> {
        Vector<T> new_vector;
        Optional result = new_vector.clone(allocator, vector);
        if (!result.has_value()) {
            return nullopt;
        }
        return new_vector;
    }

    // Get the non-`const` address of this `Vector`'s internal array.
    [[nodiscard]] constexpr auto p_data() -> T* {
        return &(this->p_storage[0]);
    }

    // Get the `const` address of this `Vector`'s internal array.
    [[nodiscard]] constexpr auto p_data() const -> T const* {
        return &(this->p_storage[0]);
    }

    [[nodiscard]] constexpr auto size() const -> ssize {
        return this->current_size;
    }

    [[nodiscard]] constexpr auto capacity() const -> ssize {
        return this->current_capacity;
    }

    // Try to change the capacity of this `Vector` in a non-`constexpr` context.
    [[nodiscard]] auto reserve(StableAllocator auto& allocator,
                               ssize new_capacity) -> Optional<void> {
        if (new_capacity > this->current_capacity) {
            // TODO: `.p_srealloc()`.
            Optional result = allocator.template p_malloc<T>(new_capacity);
            if (result.has_value()) {
                T* p_new = result.value();
                // TODO: If `T` is relocatable, use `copy_memory()`.
                for (ssize::Raw i = 0; i < this->current_size.raw; ++i) {
                    p_new[i] = move(this->p_storage[i]);
                }

                this->p_storage = p_new;
                this->current_capacity = new_capacity;
                return monostate;
            }
        }
        return nullopt;
    }

    // Change the capacity of this `Vector` in a `constexpr` context.
    consteval void reserve(ssize new_capacity) {
        if (new_capacity > this->current_capacity) {
            // TODO: `.p_srealloc()`.
            T* p_new = new T[new_capacity.raw];
            for (ssize::Raw i = 0; i < this->current_size.raw; ++i) {
                p_new[i] = move(this->p_storage[i]);
            }

            delete[] this->p_storage;
            this->p_storage = p_new;
            this->current_capacity = new_capacity;
        }
    }

    // Try to change the size of this `Vector` in a non-`constexpr` context.
    [[nodiscard]] auto resize(StableAllocator auto& allocator, ssize new_size)
        -> Optional<void> {
        if (new_size > this->current_capacity) {
            // TODO: `.srealloc()`.
            Optional result = allocator.template p_malloc<T>(new_size);
            if (!result.has_value()) {
                return nullopt;
            } else {
                // TODO: Consider propagating this error.
                allocator.free(this->p_storage).or_panic();
                T* p_new = result.value();
                // TODO: If `T` is relocatable, use `copy_memory()`.
                for (ssize::Raw i = 0; i < this->current_size.raw; ++i) {
                    p_new[i] = move(this->p_storage[i]);
                }

                this->p_storage = p_new;
                this->current_capacity = new_size;
                return monostate;
            }
        } else {
            this->current_size = new_size;
            return monostate;
        }
    }

    // Try to change the size of this `Vector` in a `constexpr` context.
    consteval void resize(ssize new_size) {
        if (new_size > this->current_capacity) {
            T* p_new = new T[new_size.raw];
            for (ssize::Raw i = 0; i < this->current_size.raw; ++i) {
                p_new[i] = move(this->p_storage[i]);
            }
            for (ssize::Raw i = this->current_size.raw; i < new_size.raw; i++) {
                p_new[i] = T{};
            }

            delete[] this->p_storage;
            this->p_storage = p_new;
            this->current_size = new_size;
            this->current_capacity = new_size;
        } else {
            // Shrink the size.
            this->current_size = new_size;
        }
    }

    template <typename U>
        requires(is_implicitly_convertible<U, T>)
    [[nodiscard]] auto push_back(StableAllocator auto& allocator,
                                 U const& value) -> Optional<void> {
        if (this->current_size + 1 > this->current_capacity) {
            Optional result = this->double_storage(allocator);
            if (!result.has_value()) {
                return nullopt;
            }
        }
        this->p_storage[this->current_size.raw] = static_cast<T>(value);
        this->current_size += 1;
        return monostate;
    }

    template <typename U>
        requires(is_implicitly_convertible<U, T>)
    consteval auto push_back(U const& value) -> void {
        if (this->current_size + 1 > this->current_capacity) {
            this->double_storage();
        }
        this->p_storage[this->current_size.raw] = static_cast<T>(value);
        this->current_size += 1;
    }

    [[nodiscard]] auto clone(StableAllocator auto& allocator,
                             Vector<T> const& vector) -> Optional<void> {
        Optional result = this->reserve(allocator, vector.capacity());
        if (!result.has_value()) {
            return nullopt;
        }
        // This cannot fail if `reserve()` succeeded.
        _ = this->resize(allocator, vector.size());
        // TODO: Use `copy_memory()` if `T` is relocatable.
        for (ssize i = 0; i < vector.size(); ++i) {
            this->p_storage[i.raw] = vector[i];
        }
        return monostate;
    }
};

}  // namespace cat
