// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <concepts>
#include <type_traits>

// i386 and x86-64 are little endian.
constexpr bool1 is_little_endian = true;
constexpr bool1 is_big_endian = !is_little_endian;

namespace cat {

auto invert_endianess(::meta::Integral auto value) {
    // TODO: Handle `cat::Numeral`.
    if constexpr (sizeof(value) == 1) {
        return __builtin_bswap8(value);
    }
    if constexpr (sizeof(value) == 2) {
        return __builtin_bswap16(value);
    }
    if constexpr (sizeof(value) == 4) {
        return __builtin_bswap32(value);
    }
    if constexpr (sizeof(value) == 8) {
        return __builtin_bswap64(value);
    }
}

// `Byte` is a strongly-typed `struct` rather than an `enum class`, as in the
// STL, so that it can carry member functions.
// TODO: Add some member functions.
struct Byte {  // NOLINT
    unsigned char value;

    constexpr Byte() = default;

    constexpr Byte(auto input) requires(sizeof(input) == 1) {
        this->value = input;
    }

    constexpr Byte(auto const& input) requires(sizeof(input) == 1) {
        this->value = input;
    }

    template <typename T>
    constexpr Byte(T&& input)  // NOLINT
        requires(sizeof(input) == 1) {
        this->value = ::meta::forward<T>(input);
    }

    template <typename T>
    constexpr explicit operator T() requires(sizeof(T) == 1) {
        return ::meta::bit_cast<T>(value);
    }

    constexpr auto operator&(::meta::Integral auto from) -> Byte {
        return this->value & from;
    }
    constexpr auto operator&=(::meta::Integral auto from) -> Byte& {
        this->value = this->value & from;
        return *this;
    }

    constexpr auto operator|(::meta::Integral auto from) -> Byte {
        return this->value | from;
    }
    constexpr auto operator|=(::meta::Integral auto from) -> Byte& {
        this->value = this->value | from;
        return *this;
    }

    constexpr auto operator<<(::meta::Integral auto from) -> Byte {
        return this->value << from;
    }
    constexpr auto operator<<=(::meta::Integral auto from) -> Byte& {
        this->value = this->value << from;
        return *this;
    }

    constexpr auto operator>>(::meta::Integral auto from) -> Byte {
        return this->value >> from;
    }
    constexpr auto operator>>=(::meta::Integral auto from) -> Byte& {
        this->value = this->value >> from;
        return *this;
    }
};

// TODO: Support `volatile` qualified pointers.
// TODO: Aligned pointer types and alignment casts.
// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4201.html

template <typename U>
constexpr auto is_aligned(U* const p_value, ssize const alignment) -> bool;

template <typename U>
constexpr auto is_aligned(intptr<U> const p_value, ssize const alignment)
    -> bool;

template <typename U>
constexpr auto align_up(U* const p_value, ssize const alignment) -> U*;
template <typename U>
constexpr auto align_up(intptr<U> const p_value, ssize const alignment)
    -> intptr<U>;

template <typename U>
constexpr auto align_down(U* const p_value, ssize const alignment) -> U*;

template <typename U>
constexpr auto align_down(intptr<U> const p_value, ssize const alignment)
    -> intptr<U>;

}  // namespace cat

namespace meta {

template <typename>
struct EnumFlagTrait : ::meta::FalseTypeTrait {};

template <typename T>
concept EnumFlag = ::meta::EnumFlagTrait<T>::value;

}  // namespace meta

template <meta::EnumFlag T>
constexpr auto operator|(T flag_1, T flag_2) -> T {
    using U = ::meta::UnderlyingType<T>;
    return static_cast<T>(static_cast<U>(flag_1) | static_cast<U>(flag_2));
}

template <meta::EnumFlag T>
constexpr auto operator|(T flag_1, ::meta::UnderlyingType<T> flag_2) -> T {
    using U = ::meta::UnderlyingType<T>;
    return static_cast<T>(static_cast<U>(flag_1) | flag_2);
}

template <meta::EnumFlag T>
constexpr auto operator&(T flag_1, T flag_2) -> T {
    using U = ::meta::UnderlyingType<T>;
    return static_cast<T>(static_cast<U>(flag_1) & static_cast<U>(flag_2));
}

// TODO: Fix bit flag operators.
// template <meta::EnumFlag T>
// constexpr auto operator&(T flag_1,::meta::UnderlyingType<T> flag_2) -> T {
//     using U =::meta::UnderlyingType<T>;
//     return static_cast<T>(static_cast<U>(flag_1) & flag_2);
// }

namespace cat::detail {

// `BinaryStorage` is a strongly type integer that can implicitly convert into
// either a signed or unsigned size type
struct BinarySize {
    // This macro is provided by GCC.
    using Type = __UINT64_TYPE__;
    Type storage;

    constexpr BinarySize() = default;

    constexpr BinarySize(::meta::Integral auto value)
        : storage(static_cast<Type>(value)){};

    constexpr BinarySize(ssize value)
        : storage(static_cast<Type>(value.storage)){};

    constexpr BinarySize(usize value)
        : storage(static_cast<Type>(value.storage)){};

    constexpr BinarySize(long double value)
        : storage(static_cast<Type>(value)){};

    constexpr operator ssize() const {
        // This macro is provided by GCC.
        return static_cast<__INT64_TYPE__>(this->storage);
    }

    constexpr operator usize() const {
        return storage;
    }

    constexpr auto operator==(BinarySize const operand) const -> bool {
        return this->storage == operand.storage;
    }

    constexpr auto operator<(BinarySize const operand) const -> bool {
        return this->storage < operand.storage;
    }

    constexpr auto operator<=(BinarySize const operand) const -> bool {
        return this->storage <= operand.storage;
    }

    constexpr auto operator>(BinarySize const operand) const -> bool {
        return this->storage > operand.storage;
    }

    constexpr auto operator>=(BinarySize const operand) const -> bool {
        return this->storage >= operand.storage;
    }

    constexpr auto operator+(BinarySize const operand) const {
        return this->storage + operand.storage;
    }

    constexpr auto operator-(BinarySize const operand) const {
        return this->storage - operand.storage;
    }

    constexpr auto operator*(BinarySize const operand) const {
        return this->storage * operand.storage;
    }

    constexpr auto operator&(BinarySize const operand) const {
        return this->storage & operand.storage;
    }

    constexpr auto operator|(BinarySize const operand) const {
        return this->storage | operand.storage;
    }
};

}  // namespace cat::detail

// template <>
// struct::meta::IsIntegralTrait<cat::detail::BinarySize> : TrueTypeTrait {};

constexpr auto operator""_ki(unsigned long long const input) -> ssize {
    return 1024 * static_cast<signed long long>(input);
}

constexpr auto operator""_ki(long double const input) -> ssize {
    return static_cast<signed long long>(1024.f * input);
}

constexpr auto operator""_mi(unsigned long long const input) -> ssize {
    return 1024 * 1024 * static_cast<signed long long>(input);
}

constexpr auto operator""_mi(long double const input) -> ssize {
    return static_cast<signed long long>(1024.f * 1024.f * input);
}

constexpr auto operator""_gi(unsigned long long const input) -> ssize {
    return 1024 * 1024 * 1024 * static_cast<signed long long>(input);
}

constexpr auto operator""_gi(long double const input) -> ssize {
    return static_cast<signed long long>(1024.f * 1024.f * 1024.f * 1024.f *
                                         input);
}

#include "./implementations/align_down.tpp"
#include "./implementations/align_up.tpp"
#include "./implementations/is_aligned.tpp"
