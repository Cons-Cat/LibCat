// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/utility>

namespace cat {

// `no_type`'s purpose is to implicitly cast from any type into `void*`. This is
// useful for low-level type erasure in some cases, such as passing syscall
// arguments.
class no_type {
 public:
   constexpr no_type() = default;

   constexpr no_type(auto input)
      requires(sizeof(input) == 1)
       : m_b_storage(__builtin_bit_cast(unsigned char, input)) {
   }

   constexpr no_type(auto input)
      requires(sizeof(input) == 2)
       : m_s_storage(__builtin_bit_cast(unsigned short, input)) {
   }

   constexpr no_type(auto input)
      requires(sizeof(input) == 4)
       : m_l_storage(__builtin_bit_cast(unsigned int, input)) {
   }

   constexpr no_type(auto input)
      requires(sizeof(input) == 8)
       : m_q_storage(__builtin_bit_cast(unsigned long long, input)) {
   }

   template <typename T>
      requires(!is_void<T>)
   [[nodiscard]]
   constexpr
   operator T() const {
      if constexpr (sizeof(T) == 1) {
         return __builtin_bit_cast(T, m_b_storage);
      } else if constexpr (sizeof(T) == 2) {
         return __builtin_bit_cast(T, m_s_storage);
      } else if constexpr (sizeof(T) == 4) {
         return __builtin_bit_cast(T, m_l_storage);
      } else if constexpr (sizeof(T) == 8) {
         return __builtin_bit_cast(T, m_q_storage);
      }
   }

 private:
   union {
      unsigned char m_b_storage;       // Byte sized storage.
      unsigned short m_s_storage;      // Short sized storage.
      unsigned int m_l_storage;        // Full sized storage.
      unsigned long long m_q_storage;  // Quad sized storage.
   };
};

// `no_type_ptr` is like `no_type`, but it only converts to or from pointers.
class no_type_ptr {
 public:
   constexpr no_type_ptr() = default;

   constexpr no_type_ptr(decltype(nullptr)) : m_p_storage(nullptr) {
   }

   constexpr no_type_ptr(auto const* p_input)
       : m_p_storage(const_cast<void*>(static_cast<void const*>(p_input))) {
   }

   template <typename T>
      requires(is_pointer<T>)
   [[nodiscard]]
   constexpr
   operator T() const {
      return static_cast<T>(m_p_storage);
   }

 private:
   void* m_p_storage;
};

}  // namespace cat
