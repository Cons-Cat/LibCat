// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/allocators>

namespace cat {

class LinearAllocator : public AllocatorFacade<LinearAllocator> {
    friend AllocatorFacade<LinearAllocator>;
    static constexpr bool has_pointer_stability = true;

    template <typename T>
    struct LinearMemoryHandle : detail::BaseMemoryHandle<T> {
        T* p_storage;

        // TODO: Simplify with CRTP or deducing-this.
        auto get() -> decltype(auto) {
            return *this;
        }

        auto get() const -> decltype(auto) {
            return *this;
        }
    };

    uintptr<void> const p_arena_begin;
    uintptr<void> const p_arena_end;
    uintptr<void> p_arena_current = p_arena_begin;

  public:
    // TODO: Should this be `usize`? `.raw` could then be removed.
    LinearAllocator(uintptr<void> p_address, ssize arena_size)
        : p_arena_begin(p_address.raw + arena_size.raw),
          p_arena_end(p_address.raw){};

    // Reset the bumped pointer to the beginning of this arena.
    void reset() {
        this->p_arena_current = p_arena_begin;
    }

  private:
    // TODO: Due to alignment discrepencies when bumping down, this actually
    // could be larger.
    template <typename T>
    auto allocation_size(ssize allocation_size) -> ssize {
        return allocation_size;
    }

    // Try to allocate memory and bump the pointer down.
    auto allocate(ssize allocation_size) -> OptionalPtr<void> {
        if (this->p_arena_current - allocation_size >= p_arena_end) {
            this->p_arena_current -= allocation_size;
            // Return a pointer that is then used to in-place construct a `T`.
            return this->p_arena_current;
        }
        return nullptr;
    }

    // Try to allocate memory aligned to some boundary and bump the pointer
    // down.
    auto aligned_allocate(usize alignment, ssize allocation_size)
        -> OptionalPtr<void> {
        uintptr<void> p_allocation =
            align_down(this->p_arena_current - allocation_size, alignment);
        if (p_allocation >= p_arena_end) {
            this->p_arena_current = p_allocation;
            // Return a pointer that is then used for in-place construction.
            return static_cast<void*>(p_allocation);
        }
        return nullptr;
    }

    // In general, memory cannot be deallocated in a linear allocator, so
    // this function is no-op.
    void deallocate(void const*, ssize){};

    // Produce a handle to allocated memory.
    template <typename T>
    auto make_handle(void* p_handle_storage) -> LinearMemoryHandle<T> {
        return LinearMemoryHandle<T>{{}, static_cast<T*>(p_handle_storage)};
    }

    // Access some memory.
    template <typename T>
    auto access(LinearMemoryHandle<T>& memory) -> T* {
        return memory.p_storage;
    }

    template <typename T>
    auto access(LinearMemoryHandle<T> const& memory) const -> T const* {
        return memory.p_storage;
    }
};

}  // namespace cat
