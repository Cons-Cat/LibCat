// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/bit>
#include <cat/linux>
#include <cat/meta>
#include <cat/optional>

namespace cat {

template <typename T>
struct BaseMemoryHandle {
    using Type = T;
    union {
        void* p_storage;
        ssize storage;
    };
};

namespace detail {
    constexpr int small_size_threshold = 256;

    template <typename Handle>
    struct SmallMemoryHandle {
        using Type = typename Handle::Type;
        union {
            Handle allocator_storage;
            Type stack_storage;
            // Reserve `small_size_threshold` bytes to make the size
            // of this handle predictible.
            Byte empty[detail::small_size_threshold];
        };
        bool1 is_on_stack;

        SmallMemoryHandle(Handle const& handle)
            : allocator_storage(handle), is_on_stack(false){};

        SmallMemoryHandle(typename Handle::Type const& value)
            : stack_storage(value), is_on_stack(true){};

        ~SmallMemoryHandle() {
            if (this->is_on_stack) {
                this->stack_storage.~Type();
            }
        }
    };

    template <typename Handle>
    struct AlignedMemoryHandle {
        using Type = typename Handle::Type;
        Handle storage;
        usize alignment;

        AlignedMemoryHandle(Handle const& handle, usize in_alignment)
            : storage(handle), alignment(in_alignment){};

        ~AlignedMemoryHandle() {
            this->storage.~Handle();
        }
    };
}  // namespace detail

template <typename AllocatorT, typename AllocationU = void*>
concept Allocator = requires(AllocatorT allocator) {
    // Every allocator has a `.malloc()` method.
    allocator.malloc(ssizeof<AllocationU>());
    allocator.template malloc<AllocationU>();

    // TODO: It would be nice if these could make the concept more precise:
    // allocator.free(decltype(allocator.template make_handle<AllocationU>(
    //     AllocationU{}, sizeof(AllocationU))){});
    // allocator.get(decltype(allocator.template make_handle<AllocationU>(
    //     AllocationU{}, sizeof(AllocationU))){});
};

namespace detail {
    template <typename AllocatorT, typename AllocationU = void*>
    concept StableDerivedAllocator = requires(AllocatorT allocator) {
        // If an allocator allocates a `OptionalPtr<T>` or
        // `Optional<T*>`, allocator is assumed to have pointer-stability.
        is_pointer<decltype(allocator
                                .template allocate<AllocationU>(
                                    ssizeof<AllocationU>())
                                .value())>;
    };

    template <typename T>
    concept HasReset = requires(T allocator) {
        allocator.reset();
    };
}  // namespace detail

template <typename AllocatorT, typename AllocationU = void*>
concept StableAllocator = requires(AllocatorT it) {
    it.template p_malloc<AllocationU>();
};

template <typename Derived>
struct AllocatorFacade {
  protected:
    constexpr auto self() -> Derived& {
        return static_cast<Derived&>(*this);
    }

    // TODO: Forward `T` constructor arguments.
    template <typename T, bool1 is_small_optimized, bool1 is_fail_safe,
              bool1 is_aligned>
    auto meta_allocate(usize const alignment,
                       ssize const allocation_size = ssizeof<T>()) {
        // Produce a basic handle for this memory type.
        using UnderlyingHandle = decltype(this->self().template make_handle<T>(
            T{}, allocation_size));

        // Get the return value of a user-supplied `.allocate()`. This must
        // be a container that holds `T*`.
        // TODO: Support `ssize`.
        using Allocation =
            decltype(this->self().template allocate<T>(allocation_size));

        // Produce an appropriate handle type for this allocation.
        using Handle = Conditional<
            is_aligned,
            Conditional<is_small_optimized,
                        // If this is aligned and it is small-optimized:
                        detail::AlignedMemoryHandle<
                            detail::SmallMemoryHandle<UnderlyingHandle>>,
                        // If this is aligned but it is not
                        // small-optimized:
                        detail::AlignedMemoryHandle<UnderlyingHandle>>,
            Conditional<is_small_optimized,
                        // If this is not aligned but it is
                        // small-optimized:
                        detail::SmallMemoryHandle<UnderlyingHandle>,
                        // If this is not aligned and it is not
                        // small-optimized:
                        UnderlyingHandle>>;

        // Initialize an empty `Optional`.
        Allocation maybe_memory;

        if constexpr (!is_aligned) {
            if constexpr (is_small_optimized) {
                if (allocation_size < detail::small_size_threshold) {
                    // Allocate memory on this stack frame and return it,
                    // iff that would be smaller than
                    // `detail::small_size_threshold`.
                    T stack_memory;
                    Handle stack_handle = stack_memory;
                    return Optional<Handle>(stack_handle);
                }
            }
            maybe_memory = this->self().template allocate<T>(allocation_size);
        } else {
            maybe_memory = this->self().template aligned_allocate<T>(
                alignment, allocation_size);
        }

        if constexpr (is_fail_safe) {
            // `allocate()` returns either an `Optional` or a `Result`, both
            // of which have `.has_value()`.
            if (!maybe_memory.has_value()) {
                // Return an empty optional if this failed to allocate.
                return Optional<Handle>(nullopt);
            }
        }

        UnderlyingHandle handle = this->self().template make_handle<T>(
            maybe_memory.value(), allocation_size);

        // TODO: It should be possible to streamline this:
        if constexpr (is_aligned) {
            Handle aligned_handle = Handle{handle, alignment};
            // `.access()` produces a pointer to the data, which is
            // constructed in-place.
            new (this->self().access(handle)) T();

            if constexpr (is_fail_safe) {
                return Optional<Handle>(aligned_handle);
            } else {
                return aligned_handle;
            }
        } else {
            // `.access()` produces a pointer to the data, which is
            // constructed in-place.
            new (this->self().access(handle)) T();

            if constexpr (is_fail_safe) {
                return Optional<Handle>(Handle{handle});
            } else {
                return Handle{handle};
            }
        }
    }

  public:
    // Try to allocate some memory with arbitrary alignment.
    template <typename T = Byte>
    [[nodiscard]] auto malloc(ssize const allocation_size = ssizeof<T>()) {
        if constexpr (alignof(T) > 8) {
            // If the alignment of `T` is greater than 8, it should have
            // implied strong alignment guarantees.
            return this->aligned_alloc(alignof(T), allocation_size);
        }
        return this->meta_allocate<T, false, true, false>(1u, allocation_size);
    }

    // If this allocator has pointer stability, allocate some memory with
    // arbitrary alignment and provide a pointer handle.
    template <typename T = Byte>
        requires(detail::StableDerivedAllocator<Derived, T>)
    [[nodiscard]] auto p_malloc(ssize const allocation_size = ssizeof<T>())
        -> OptionalPtr<T> {
        if constexpr (alignof(T) > 1) {
            // If the alignment of `T` is greater than 1, it should have
            // implied strong alignment guarantees.
            Optional memory =
                this->aligned_alloc<T>(alignof(T), allocation_size);
            if (memory.has_value()) {
                return &this->get(memory.value());
            }
        } else {
            Optional memory =
                this->meta_allocate<T, false, true, false>(1u, allocation_size);
            if (memory.has_value()) {
                return &this->get(memory.value());
            }
        }
        return nullptr;
    }

    // Try to allocate some memory guaranteed to be aligned to some
    // boundary.
    template <typename T = Byte>
    [[nodiscard]] auto aligned_alloc(
        usize const alignment, ssize const allocation_size = ssizeof<T>()) {
        return this->meta_allocate<T, false, true, true>(alignment,
                                                         allocation_size);
    }

    // If this allocator has pointer stability, allocate some memory with
    // arbitrary alignment and provide a pointer handle.
    template <typename T = Byte>
        requires(detail::StableDerivedAllocator<Derived, T>)
    [[nodiscard]] auto p_aligned_alloc(
        usize const alignment, ssize const allocation_size = ssizeof<T>())
        -> OptionalPtr<T> {
        auto memory = this->meta_allocate<T, false, true, true>(
            alignment, allocation_size);
        if (memory.has_value()) {
            return &this->get(memory.value());
        }
        return nullopt;
    }

    // Try to allocate small-size optimized memory.
    template <typename T = void*>
    [[nodiscard]] auto malloca(ssize const allocation_size = ssizeof<T>()) {
        if constexpr (alignof(T) > 1) {
            // If the alignment of `T` is greater than 1, it should have
            // implied strong alignment guarantees.
            return this->aligned_alloca(alignof(T), allocation_size);
        }
        return this->meta_allocate<T, true, true, false>(1u, allocation_size);
    }

    // Try to allocate small-size optimized memory guaranteed to be aligned
    // to a boundary. TODO: Work on this after improving `malloca()`.
    template <typename T = void*>
    [[nodiscard]] auto aligned_malloca(
        usize const alignment, ssize const allocation_size = ssizeof<T>()) {
        return this->meta_allocate<T, true, true, true>(alignment,
                                                        allocation_size);
    }

    // Invalidate any memory handle, invoking its data's destructor.
    template <typename Handle>
    [[nodiscard]] auto free(Handle const& memory) -> Optional<void> {
        using Type = typename Handle::Type;

        // If this is a small-size optimized handle:
        if constexpr (IsSpecializationTrait<Handle,
                                            detail::SmallMemoryHandle>::value) {
            if (memory.is_on_stack) {
                if constexpr (requires { this->get(memory).~Type(); }) {
                    this->get(memory).~Type();
                }
                return monostate;
            }
            // Recurse with the underlying memory handle.
            return this->free(memory.allocator_storage);
        }
        // If this is not a small-size optimized handle:
        else {
            if constexpr (requires { this->get(memory).~Type(); }) {
                this->get(memory).~Type();
            }

            if constexpr (requires { memory.alignment; }) {
                auto result = this->self().aligned_deallocate(memory.storage);
                if (result.has_value()) {
                    return monostate;
                }
                return nullopt;
            } else {
                auto result = this->self().deallocate(memory);
                if (result.has_value()) {
                    return monostate;
                }
                return nullopt;
            }
        }
        __builtin_unreachable();
    };

    // Invalidate any stable memory handle, invoking its data's destructor.
    template <typename T>
        requires(detail::StableDerivedAllocator<Derived, T>)
    [[nodiscard]] auto free(T* const p_memory) -> Optional<void> {
        return this->self().deallocate(p_memory);
    }

    // Get a reference to the data in any memory handle.
    [[nodiscard]] auto get(auto& memory) -> auto& {
        using Handle = RemoveCvRef<decltype(memory)>;
        using Type = typename Handle::Type;
        if constexpr (requires { memory.is_on_stack; }) {
            // Get small-size optimized data:
            if (memory.is_on_stack) {
                return memory.stack_storage;
            }
            return *this->self().template access<Type>(
                memory.allocator_storage);
        } else {
            // Get non-small-size optimized data:
            if constexpr (requires { memory.alignment; }) {
                // Get aligned data:
                return *this->self().template access<Type>(memory.storage);
            } else {
                // Get not aligned data:
                return *this->self().template access<Type>(memory);
            }
        }
    }

    // Get a `const` reference to the data in any memory handle.
    [[nodiscard]] auto get(auto const& memory) -> auto const& {
        using Handle = RemoveCvRef<decltype(memory)>;
        using Type = typename Handle::Type;
        if constexpr (requires { memory.is_on_stack; }) {
            // Get small-size optimized data:
            if (memory.is_on_stack) {
                return memory.stack_storage;
            }
            return *this->self().template access<Type>(
                memory.allocator_storage);
        } else {
            // Get non-small-size optimized data:
            if constexpr (requires { memory.alignment; }) {
                // Get aligned data:
                return *this->self().template access<Type>(memory.storage);
            } else {
                // Get not aligned data:
                return *this->self().template access<Type>(memory);
            }
        }
    }

    // If the allocator does not provide a `.reset()` method, produce a
    // no-op.
    void reset() requires(!detail::HasReset<Derived>) {
    }
};

struct PageAllocator : AllocatorFacade<PageAllocator> {
    template <typename T>
    struct PageMemoryHandle : BaseMemoryHandle<T> {
        ssize allocation_size;
    };

    // Allocate memory in multiples of a page-size. A page is `4_ki` large
    // on x86-64. If fewer that `4096` bytes are allocated, that amount will
    // be rounded up to `4096`.
    template <typename T>
    auto allocate(ssize const allocation_size) -> OptionalPtr<T> {
        Scaredy result = nix::sys_mmap(
            0u, allocation_size,
            // TODO: Fix bit flags operators.
            static_cast<nix::MemoryProtectionFlags>(
                static_cast<unsigned int>(nix::MemoryProtectionFlags::read) |
                static_cast<unsigned int>(nix::MemoryProtectionFlags::write)),
            static_cast<nix::MemoryFlags>(
                static_cast<unsigned int>(nix::MemoryFlags::privately) |
                static_cast<unsigned int>(nix::MemoryFlags::populate) |
                static_cast<unsigned int>(nix::MemoryFlags::anonymous)),
            // Anonymous pages (non-files) must have `-1`.
            nix::FileDescriptor{-1},
            // Anonymous pages (non-files) must have `0`.
            0);
        if (result.has_value()) {
            return static_cast<T*>(static_cast<void*>(result.value()));
        }
        return nullptr;
    }

    // Unmap an opaque handle to page(s) of virtual memory.
    auto deallocate(auto const& memory) -> Optional<void> {
        Scaredy result =
            nix::sys_munmap(memory.p_storage, memory.allocation_size);
        if (result.has_value()) {
            return monostate;
        }
        return nullopt;
    };

    // Unmap a pointer handle to page(s) of virtual memory.
    template <typename T>
    auto deallocate(T* const p_memory) -> Optional<void> {
        Scaredy result = nix::sys_munmap(p_memory, ssizeof<T>());
        if (result.has_value()) {
            return monostate;
        }
        return nullopt;
    };

    // Allocate a page(s) of virtual memory that is guaranteed to align to
    // any power of two, less than `4_ki`.
    template <typename T>
    auto aligned_allocate(usize const alignment, ssize const allocation_size)
        -> OptionalPtr<T> {
        Result(alignment <= 4_uki).assert();
        // A normal page allocation already has these semantics.
        return this->allocate<T>(allocation_size);
    }

    // Unmap a handle to page(s) of aligned virtual memory.
    auto aligned_deallocate(auto const& memory) -> Optional<void> {
        // There are no special semantics for deallocation aligned memory.
        Scaredy result =
            nix::sys_munmap(memory.p_storage, memory.allocation_size);
        if (result.has_value()) {
            return monostate;
        }
        return nullopt;
    };

    // Produce a handle to allocated memory.
    template <typename T>
    auto make_handle(auto data, ssize size) -> PageMemoryHandle<T> {
        return PageMemoryHandle<T>{{data}, size};
    }

    // Access a page(s) of virtual memory.
    template <typename T>
    auto access(PageMemoryHandle<T> const& memory) -> T* {
        return static_cast<T*>(memory.p_storage);
    }
};

struct LinearAllocator : AllocatorFacade<LinearAllocator> {
    template <typename T>
    struct LinearMemoryHandle : BaseMemoryHandle<T> {
        ssize allocation_size;
    };

    // These cannot hold `void` because that is not a regular type.
    uintptr<Byte> const p_arena_begin;
    uintptr<Byte> const p_arena_end;
    uintptr<Byte> p_arena_current = p_arena_begin;

    LinearAllocator(uintptr<void> const p_address, ssize const arena_size)
        : p_arena_begin(p_address.raw + arena_size.raw),
          p_arena_end(p_address.raw){};

    // `LinearAllocator` makes allocations in precisely the size requested.
    template <typename T>
    auto allocation_size(ssize const allocation_size) -> ssize {
        return allocation_size;
    }

    // Try to allocate memory and bump the pointer down.
    template <typename T>
    auto allocate(ssize const allocation_size) -> OptionalPtr<Byte> {
        this->p_arena_current -= allocation_size.raw;
        if (this->p_arena_current >= p_arena_end) {
            return static_cast<Byte*>(this->p_arena_current);
        }
        return nullptr;
    }

    // In general, memory cannot be deallocated in a linear allocator, so
    // this function is no-op.
    auto deallocate(auto const&) -> Optional<void> {
        return monostate;
    };

    // Try to allocate memory aligned to some boundary and bump the pointer
    // down.
    template <typename T>
    auto aligned_allocate(usize const alignment, ssize const allocation_size)
        -> OptionalPtr<Byte> {
        uintptr<Byte> p_allocation =
            align_down(this->p_arena_current - allocation_size.raw, alignment);
        if (p_allocation >= p_arena_end) {
            this->p_arena_current = p_allocation;
            return static_cast<Byte*>(this->p_arena_current);
        }
        return nullptr;
    }

    // In general, memory cannot be deallocated in a linear allocator, so
    // this function is no-op.
    auto aligned_deallocate(auto const&) -> Optional<void> {
        return monostate;
    };

    // Produce a handle to allocated memory.
    template <typename T>
    auto make_handle(auto data, ssize size) -> LinearMemoryHandle<T> {
        return LinearMemoryHandle<T>{{data}, size};
    }

    // Access some memory.
    template <typename T>
    auto access(LinearMemoryHandle<T> const& memory) -> T* {
        return static_cast<T*>(memory.p_storage);
    }

    // Reset the bumped pointer to the beginning of this arena.
    void reset() {
        this->p_arena_current = p_arena_begin;
    }
};

}  // namespace cat
