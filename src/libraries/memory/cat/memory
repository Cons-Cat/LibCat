// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

namespace cat {

void copy_memory(void const* p_source, void* p_destination, ssize bytes);

void copy_memory_small(void const* p_source, void* p_destination, ssize bytes);

// `cat::address_of()` should be used instead of a `&` for containers that might
// hold a generic object, because this will produce correct results even if a
// `&` prefix operator has been overloaded.
template <typename T>
constexpr auto addressof(T& value) -> T* {
    return __builtin_addressof(value);
}

template <typename T>
constexpr auto addressof(T const&& value) -> T const* = delete;

// Call an in-place constructor at any address.
template <typename T, typename... Args>
constexpr auto construct_at(T* p_place, Args&&... arguments) {
    // TODO: Assert that alignment constraints are satisfied.
    return new (p_place) T{std::forward<Args>(arguments)...};
}

// Call an in-place destructor at any place.
template <typename T>
constexpr void destroy_at(T* p_place) {
    p_place->~T();
}

}  // namespace cat

using cat::addressof;
