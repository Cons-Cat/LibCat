// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/arithmetic>
#include <cat/array>
#include <cat/bitset>
#include <cat/debug>
#include <cat/string>

namespace x64 {

auto
cpuid(cat::uint4 leaf, cat::uint4 subleaf = 0u) -> cat::array<cat::uint4, 4> {
   cat::uint4 ebx;
   cat::uint4 edx;
   asm("cpuid"
       : "+a"(leaf), "+b"(ebx), "+c"(subleaf), "=d"(edx));
   return {leaf, ebx, subleaf, edx};
}

namespace detail {

enum class cpu_type {
   intel_bonnell = 1,
   intel_core2,
   intel_corei7,
   amdfam10_h,
   amdfam15_h,
   intel_silvermont,
   intel_knl,
   amd_btver1,
   amd_btver2,
   amdfam17_h,
   intel_knm,
   intel_goldmont,
   intel_goldmont_plus,
   intel_tremont,
   amdfam19_h,
   zhaoxin_fam7_h,
   intel_sierraforest,
   intel_grandridge,
   intel_clearwaterforest,
   amdfam1_ah,
   // cpu_type_max
};

enum class cpu_subtype {
   intel_corei7_nehalem = 1,
   intel_corei7_westmere,
   intel_corei7_sandybridge,
   amdfam10_h_barcelona,
   amdfam10_h_shanghai,
   amdfam10_h_istanbul,
   amdfam15_h_bdver1,
   amdfam15_h_bdver2,
   amdfam15_h_bdver3,
   amdfam15_h_bdver4,
   amdfam17_h_znver1,
   intel_corei7_ivybridge,
   intel_corei7_haswell,
   intel_corei7_broadwell,
   intel_corei7_skylake,
   intel_corei7_skylake_avx512,
   intel_corei7_cannonlake,
   intel_corei7_icelake_client,
   intel_corei7_icelake_server,
   amdfam17_h_znver2,
   intel_corei7_cascadelake,
   intel_corei7_tigerlake,
   intel_corei7_cooperlake,
   intel_corei7_sapphirerapids,
   intel_corei7_alderlake,
   amdfam19_h_znver3,
   intel_corei7_rocketlake,
   zhaoxin_fam7_h_lujiazui,
   amdfam19_h_znver4,
   intel_corei7_graniterapids,
   intel_corei7_graniterapids_d,
   intel_corei7_arrowlake,
   intel_corei7_arrowlake_s,
   intel_corei7_pantherlake,
   amdfam1_ah_znver5,
};

enum class processor_features : unsigned char {
   cmov = 0,
   mmx,
   popcnt,
   sse,
   sse2,
   sse3,
   ssse3,
   sse4_1,
   sse4_2,
   avx,
   avx2,
   sse4_a,
   fma4,
   xop,
   fma,
   avx512_f,
   bmi,
   bmi2,
   aes,
   pclmul,
   avx512_vl,
   avx512_bw,
   avx512_dq,
   avx512_cd,
   avx512_er,
   avx512_pf,
   avx512_vbmi,
   avx512_ifma,
   avx5124_vnniw,
   avx5124_fmaps,
   avx512_vpopcntdq,
   avx512_vbmi2,
   gfni,
   vpclmulqdq,
   avx512_vnni,
   avx512_bitalg,
   avx512_bf16,
   avx512_vp2_intersect,
   adx = 40,
   cldemote = 42,
   clflushopt,
   clwb,
   clzero,
   cmpxchg16_b,
   enqcmd = 48,
   f16_c,
   fsgsbase,
   lahf_lm = 54,
   lm,
   lwp,
   lzcnt,
   movbe,
   movdir64_b,
   movdiri,
   mwaitx,
   pconfig = 63,
   pku,
   prefetchwt1,
   prfchw,
   ptwrite,
   rdpid,
   rdrnd,
   rdseed,
   rtm,
   serialize,
   sgx,
   sha,
   shstk,
   tbm,
   tsxldtrk,
   vaes,
   waitpkg,
   wbnoinvd,
   xsave,
   xsavec,
   xsaveopt,
   xsaves,
   amx_tile,
   amx_int8,
   amx_bf16,
   uintr,
   hreset,
   kl,
   feature_aeskle,
   widekl = 92,
   avxvnni,
   avx512_fp16,
   x86_64_baseline,
   x86_64_v2,
   x86_64_v3,
   x86_64_v4,
   avxifma,
   avxvnniint8,
   avxneconvert,
   cmpccxadd,
   amx_fp16,
   prefetchi,
   raoint,
   amx_complex,
   avxvnniint16,
   sm3,
   sha512,
   sm4,
   apxf,
   usermsr,
   avx10_1_256,
   avx10_1_512,
   avx10_2_256,
   avx10_2_512,
};

consteval auto
default_cpu_features() -> cat::bitset<32> {
   using enum processor_features;
   cat::bitset<32> features{};

   auto enable_feature = [&](processor_features const feature) {
      cat::idx const feature_index = cat::to_underlying(feature);
      features[feature_index].set();
   };

   enable_feature(cmov);
   enable_feature(mmx);
   enable_feature(sse);
   enable_feature(sse2);

   return features;
}

consteval auto
enable_baseline_feature() -> cat::bitset<32> {
   cat::bitset<32> baseline_flag{};
   baseline_flag[cat::to_underlying(processor_features::x86_64_baseline) % 32]
      .set();
   return baseline_flag;
}

struct cpu_model {
   cat::uint4 m_cpu_vendor_id = 0u;
   cpu_type m_cpu_type;
   cpu_subtype m_cpu_subtype;
   // Initialize this with all feature flags that are presumed present in any
   // x86-64 environment.
   cat::bitset<32> m_cpu_features = default_cpu_features();
};

extern "C" constinit inline detail::cpu_model __cpu_model{};  // NOLINT

// Extended x86 feature flags, such as AVX2. This is zero-intialized except for
// a single bit that expresses baseline x86-64 feature support.
extern "C" constinit inline cat::array<cat::bitset<32>, 3>
   // NOLINTNEXTLINE
   __cpu_features2(cat::bitset<32>{}, enable_baseline_feature(),
                   cat::bitset<32>{});

void
set_vendor_model(cat::uint4 vendor_family_model, cat::uint4 vendor1) {
   // Extract bits 4 through 7.
   cat::uint4 cpu_model = (vendor_family_model >> 4u) & 0xfu;
   // Extract bits 8 through 11.
   cat::uint4 cpu_family = (vendor_family_model >> 8u) & 0xfu;

   if (cpu_family == 6u || cpu_family == 0xfu) {
      // Bits 16 through 19.
      cpu_model += ((vendor_family_model >> 16u) & 0xfu) << 4u;

      if (cpu_family == 0xfu) {
         // Bits 20 through 27.
         cpu_family += (vendor_family_model >> 20u) & 0xffu;
      }
   }

   auto has_feature = [&](processor_features const feature) -> bool {
      cat::idx const feature_index = cat::to_underlying(feature);
      return __cpu_features2[2][feature_index % 32].is_set();
   };

   // Detecting CPU type and subtype requires special-casing Intel and AMD.

   if (vendor1 == 0x756e6547u) {
      // Intel CPU.
      __cpu_model.m_cpu_vendor_id = 1u;

      switch (cpu_family.raw) {
         case 6:
            switch (cpu_model.raw) {
               case 0x0f:
                  [[fallthrough]];
               case 0x16:
                  [[fallthrough]];
               case 0x17:
                  [[fallthrough]];
               case 0x1d:
                  __cpu_model.m_cpu_type = cpu_type::intel_core2;
                  break;
               case 0x1a:
                  [[fallthrough]];
               case 0x1e:
                  [[fallthrough]];
               case 0x1f:
                  [[fallthrough]];
               case 0x2e:
                  __cpu_model.m_cpu_type = cpu_type::intel_corei7;
                  __cpu_model.m_cpu_subtype = cpu_subtype::intel_corei7_nehalem;
                  break;
               case 0x25:
                  [[fallthrough]];
               case 0x2c:
                  [[fallthrough]];
               case 0x2f:
                  __cpu_model.m_cpu_type = cpu_type::intel_corei7;
                  __cpu_model.m_cpu_subtype =
                     cpu_subtype::intel_corei7_westmere;
                  break;
               case 0x2a:
                  [[fallthrough]];
               case 0x2d:
                  __cpu_model.m_cpu_type = cpu_type::intel_corei7;
                  __cpu_model.m_cpu_subtype =
                     cpu_subtype::intel_corei7_sandybridge;
                  break;
               case 0x3a:
                  [[fallthrough]];
               case 0x3e:
                  __cpu_model.m_cpu_type = cpu_type::intel_corei7;
                  __cpu_model.m_cpu_subtype =
                     cpu_subtype::intel_corei7_ivybridge;
                  break;
               case 0x3c:
                  [[fallthrough]];
               case 0x3f:
                  [[fallthrough]];
               case 0x45:
                  [[fallthrough]];
               case 0x46:
                  __cpu_model.m_cpu_type = cpu_type::intel_corei7;
                  __cpu_model.m_cpu_subtype = cpu_subtype::intel_corei7_haswell;
                  break;
               case 0x3d:
                  [[fallthrough]];
               case 0x47:
                  [[fallthrough]];
               case 0x4f:
                  [[fallthrough]];
               case 0x56:
                  __cpu_model.m_cpu_type = cpu_type::intel_corei7;
                  __cpu_model.m_cpu_subtype =
                     cpu_subtype::intel_corei7_broadwell;
                  break;
               case 0x4e:
                  [[fallthrough]];
               case 0x5e:
                  [[fallthrough]];
               case 0x8e:
                  [[fallthrough]];
               case 0x9e:
                  [[fallthrough]];
               case 0xa5:
                  [[fallthrough]];
               case 0xa6:
                  __cpu_model.m_cpu_type = cpu_type::intel_corei7;
                  __cpu_model.m_cpu_subtype = cpu_subtype::intel_corei7_skylake;
                  break;
               case 0xa7:
                  __cpu_model.m_cpu_type = cpu_type::intel_corei7;
                  __cpu_model.m_cpu_subtype =
                     cpu_subtype::intel_corei7_rocketlake;
                  break;
               case 0x55:
                  // TODO: Test that this feature detection actually works on an
                  // AVX-512 cpu.
                  __cpu_model.m_cpu_type = cpu_type::intel_corei7;
                  if (has_feature(processor_features::avx512_bf16)) {
                     __cpu_model.m_cpu_subtype =
                        cpu_subtype::intel_corei7_cooperlake;
                  } else if (has_feature(processor_features::avx512_vnni)) {
                     __cpu_model.m_cpu_subtype =
                        cpu_subtype::intel_corei7_cascadelake;
                  } else {
                     __cpu_model.m_cpu_subtype =
                        cpu_subtype::intel_corei7_skylake_avx512;
                  }
                  break;
               case 0x7d:
                  [[fallthrough]];
               case 0x7e:
                  __cpu_model.m_cpu_type = cpu_type::intel_corei7;
                  __cpu_model.m_cpu_subtype =
                     cpu_subtype::intel_corei7_cannonlake;
                  break;
               case 0x8c:
                  [[fallthrough]];
               case 0x8d:
                  __cpu_model.m_cpu_type = cpu_type::intel_corei7;
                  __cpu_model.m_cpu_subtype =
                     cpu_subtype::intel_corei7_tigerlake;
                  break;
               case 0x97:
                  [[fallthrough]];
               case 0x9a:
                  [[fallthrough]];
               case 0xb7:
                  [[fallthrough]];
               case 0xba:
                  [[fallthrough]];
               case 0xbf:
                  [[fallthrough]];
               case 0xaa:
                  [[fallthrough]];
               case 0xac:
                  [[fallthrough]];
               case 0xbe:
                  __cpu_model.m_cpu_type = cpu_type::intel_corei7;
                  __cpu_model.m_cpu_subtype =
                     cpu_subtype::intel_corei7_alderlake;
                  break;
               case 0xc5:
                  __cpu_model.m_cpu_type = cpu_type::intel_corei7;
                  __cpu_model.m_cpu_subtype =
                     cpu_subtype::intel_corei7_arrowlake;
                  break;
               case 0xc6:
                  [[fallthrough]];
               case 0xbd:
                  __cpu_model.m_cpu_type = cpu_type::intel_corei7;
                  __cpu_model.m_cpu_subtype =
                     cpu_subtype::intel_corei7_arrowlake_s;
                  break;
               case 0xcc:
                  __cpu_model.m_cpu_type = cpu_type::intel_corei7;
                  __cpu_model.m_cpu_subtype =
                     cpu_subtype::intel_corei7_pantherlake;
                  break;
               case 0x6a:
                  [[fallthrough]];
               case 0x6c:
                  __cpu_model.m_cpu_type = cpu_type::intel_corei7;
                  __cpu_model.m_cpu_subtype =
                     cpu_subtype::intel_corei7_icelake_server;
                  break;
               case 0xcf:
                  [[fallthrough]];
               case 0x8f:
                  __cpu_model.m_cpu_type = cpu_type::intel_corei7;
                  __cpu_model.m_cpu_subtype =
                     cpu_subtype::intel_corei7_sapphirerapids;
                  break;
               case 0xad:
                  __cpu_model.m_cpu_type = cpu_type::intel_corei7;
                  __cpu_model.m_cpu_subtype =
                     cpu_subtype::intel_corei7_graniterapids;
                  break;
               case 0xae:
                  __cpu_model.m_cpu_type = cpu_type::intel_corei7;
                  __cpu_model.m_cpu_subtype =
                     cpu_subtype::intel_corei7_graniterapids_d;
                  break;
               case 0x1c:
                  [[fallthrough]];
               case 0x26:
                  [[fallthrough]];
               case 0x27:
                  [[fallthrough]];
               case 0x35:
                  [[fallthrough]];
               case 0x36:
                  __cpu_model.m_cpu_type = cpu_type::intel_bonnell;
                  break;
               case 0x37:
                  [[fallthrough]];
               case 0x4a:
                  [[fallthrough]];
               case 0x4d:
                  [[fallthrough]];
               case 0x5a:
                  [[fallthrough]];
               case 0x5d:
                  [[fallthrough]];
               case 0x4c:
                  __cpu_model.m_cpu_type = cpu_type::intel_silvermont;
                  break;
               case 0x5c:
                  [[fallthrough]];
               case 0x5f:
                  __cpu_model.m_cpu_type = cpu_type::intel_goldmont;
                  break;
               case 0x7a:
                  __cpu_model.m_cpu_type = cpu_type::intel_goldmont_plus;
                  break;
               case 0x86:
                  [[fallthrough]];
               case 0x8a:
                  [[fallthrough]];
               case 0x96:
                  [[fallthrough]];
               case 0x9c:
                  __cpu_model.m_cpu_type = cpu_type::intel_tremont;
                  break;
               case 0xaf:
                  __cpu_model.m_cpu_type = cpu_type::intel_sierraforest;
                  break;
               case 0xb6:
                  __cpu_model.m_cpu_type = cpu_type::intel_grandridge;
                  break;
               case 0xdd:
                  __cpu_model.m_cpu_type = cpu_type::intel_clearwaterforest;
                  break;
               case 0x57:
                  __cpu_model.m_cpu_type = cpu_type::intel_knl;
                  break;
               case 0x85:
                  __cpu_model.m_cpu_type = cpu_type::intel_knm;
                  break;
               default:
                  // Unknown CPU.
                  break;
            }
         // Unknown family.
         default:
            break;
      }
   } else if (cpu_model == 0x68747541u) {
      // AMD CPU.
      __cpu_model.m_cpu_vendor_id = 2u;

      // TODO: Fill this out.
   } else {
      //  Other manufacturer.
      __cpu_model.m_cpu_vendor_id = 3u;

      // TODO: Fill this out.
   }
}

extern "C" inline void
__cpu_indicator_init() {  // NOLINT
   using enum processor_features;

   // Get highest values for `%EAX` below and above `0x80000000u`.
   auto&& [max_leaf, vendor1, vendor3, vendor2] = cpuid(0u);

   // Fill out the vendor name from the string stored in `%EBX`, `%ECX`, and
   // `%EDX`.
   cat::str_inplace<12u> vendor_name;
   __builtin_memcpy(vendor_name.data(), &vendor1, 4);
   __builtin_memcpy(vendor_name.data() + 4, &vendor2, 4);
   __builtin_memcpy(vendor_name.data() + 8, &vendor3, 4);

   auto&& [max_extended_leaf, _, _, _] = cpuid(0x80000000u);

   auto&& [vendor_family_model, _, ecx, _] = cpuid(1u);
   cat::bitset ecx_bits = cat::bitset<32>::from(ecx);

   // This is an array of 4 zero-initialized bitsets rather than a single
   // `bitset<128>` to more directly map to LLVM's `__cpu_model` and
   // `__cpu_features2` ABI.
   cat::array<cat::bitset<32>, 4> feature_flags{};

   auto enable_feature = [&](processor_features const feature) {
      cat::idx const feature_index = cat::to_underlying(feature);
      feature_flags[feature_index / 32][feature_index % 32].set();
   };
   auto has_feature = [&](processor_features const feature) -> bool {
      cat::idx const feature_index = cat::to_underlying(feature);
      return feature_flags[feature_index / 32][feature_index % 32].is_set();
   };

   // These flags and bit fields are documented in the EAX=1 table at
   // https://en.wikipedia.org/wiki/CPUID
   // As well as in the file:
   // `llvm-project/compiler-rt/lib/builtins/cpu_model/x86.c`.
   if (ecx_bits[0]) {
      enable_feature(sse3);
   }
   if (ecx_bits[1]) {
      enable_feature(pclmul);
   }
   if (ecx_bits[9]) {
      enable_feature(ssse3);
   }
   if (ecx_bits[12]) {
      enable_feature(fma);
   }
   if (ecx_bits[13]) {
      enable_feature(cmpxchg16_b);
   }
   if (ecx_bits[19]) {
      enable_feature(sse4_1);
   }
   if (ecx_bits[20]) {
      enable_feature(sse4_2);
   }
   if (ecx_bits[22]) {
      enable_feature(movbe);
   }
   if (ecx_bits[23]) {
      enable_feature(popcnt);
   }
   if (ecx_bits[25]) {
      enable_feature(aes);
   }
   if (ecx_bits[27]) {
      enable_feature(xsave);

      if (ecx_bits[28]) {
         // AVX is only safe to use if `xsave` exists, which kernels use to
         // preserve SIMD registers between context switches. Supposedly some
         // environments exist where AVX exists without `xsave` support, so
         // check it to be sure.
         enable_feature(avx);
      }
   }
   if (ecx_bits[29]) {
      enable_feature(f16_c);
   }

   if (max_extended_leaf >= 0x80000001u) {
      auto&& [_, _, ecx, _] = cpuid(0x80000001u);
      cat::bitset ecx_bits = cat::bitset<32>::from(ecx);

      if (ecx_bits[0]) {
         enable_feature(lahf_lm);
      }
      if (ecx_bits[5]) {
         enable_feature(lzcnt);
      }
      if (ecx_bits[6]) {
         enable_feature(sse4_a);
      }
      if (ecx_bits[8]) {
         enable_feature(prfchw);
      }
      if (ecx_bits[11]) {
         enable_feature(xop);
      }
      if (ecx_bits[15]) {
         enable_feature(lwp);
      }
      if (ecx_bits[16]) {
         enable_feature(fma4);
      }
      if (ecx_bits[21]) {
         enable_feature(tbm);
      }
      if (ecx_bits[29]) {
         enable_feature(lm);
      }
   }

   if (max_leaf >= 7u) {
      auto&& [max_subleaf, ebx, ecx, edx] = cpuid(7u);

      cat::bitset ebx_bits = cat::bitset<32u>::from(ebx);
      cat::bitset ecx_bits = cat::bitset<32u>::from(ecx);
      cat::bitset edx_bits = cat::bitset<32u>::from(edx);

      // Enable AVX2.
      if (ebx_bits[3]) {
         enable_feature(bmi);
      }
      if (ebx_bits[5]) {
         enable_feature(avx2);
      }
      if (ebx_bits[8]) {
         enable_feature(bmi2);
      }
      if (ebx_bits[16]) {
         enable_feature(avx512_f);
      }
      if (ebx_bits[17]) {
         enable_feature(avx512_dq);
      }
      if (ebx_bits[18]) {
         enable_feature(rdseed);
      }
      if (ebx_bits[19]) {
         enable_feature(adx);
      }
      if (ebx_bits[21]) {
         enable_feature(avx512_ifma);
      }
      if (ebx_bits[26]) {
         enable_feature(avx512_pf);
      }
      if (ebx_bits[27]) {
         enable_feature(avx512_er);
      }
      if (ebx_bits[28]) {
         enable_feature(avx512_cd);
      }
      if (ebx_bits[29]) {
         enable_feature(sha);
      }
      if (ebx_bits[30]) {
         enable_feature(avx512_bw);
      }
      if (ebx_bits[31]) {
         enable_feature(avx512_vl);
      }

      if (ecx_bits[1]) {
         enable_feature(avx512_vbmi);
      }
      if (ecx_bits[9]) {
         enable_feature(vaes);
      }

      if (edx_bits[22]) {
         enable_feature(amx_bf16);
      }
      if (edx_bits[23]) {
         enable_feature(amx_fp16);
      }
      if (edx_bits[24]) {
         enable_feature(amx_tile);
      }
      if (edx_bits[25]) {
         enable_feature(amx_int8);
      }

      // TODO: Query subleaf-1 features.
      // if (max_subleaf >= 1u) {
      //    auto&& [_, ebx, ecx, _] = cpuid(7u, 1u);
      // }
   }

   // The baseline X86-64 is already set by `default_cpu_features()`.
   if (has_feature(lahf_lm) && has_feature(cmpxchg16_b) && has_feature(popcnt)
       && has_feature(sse4_2)) {
      enable_feature(x86_64_v2);

      if (has_feature(avx2) && has_feature(bmi) && has_feature(bmi2)
          && has_feature(fma) && has_feature(f16_c) && has_feature(lzcnt)
          && has_feature(movbe)) {
         enable_feature(x86_64_v3);

         if (has_feature(avx512_bw) && has_feature(avx512_cd)
             && has_feature(avx512_dq) && has_feature(avx512_vl)) {
            enable_feature(x86_64_v4);
         }
      }
   }

   __cpu_model.m_cpu_features |= feature_flags[0];
   __cpu_features2[0] = feature_flags[1];
   // This is OR'd because it contains `x86_64_baseline` by default:
   __cpu_features2[1] |= feature_flags[2];
   __cpu_features2[2] = feature_flags[3];

   // Use this information to fill out x86 family model and available features.
   set_vendor_model(vendor_family_model, vendor1);
}

}  // namespace detail
}  // namespace x64
