// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <type_traits>
#include <variant>

// TODO: The `cat::Scaredy` is far less robust than `cat::Optional`.

namespace cat {

namespace detail {
    template <typename T, typename... Errors>
    struct ScaredyVariantStorage {
        using Type =
            ::meta::Conditional<::meta::is_void<T>, cat::Monostate, T>;
        cat::Variant<Type, Errors...> storage;

        constexpr ScaredyVariantStorage() = default;

        // Consume a value.
        template <typename U>
        constexpr ScaredyVariantStorage(U const& input) requires(
            ::meta::is_convertible<U, T>)
            : storage(static_cast<T>(input)){};

        // Consume an error.
        template <typename U>
        constexpr ScaredyVariantStorage(U const& input) : storage(input){};

        template <typename U>
        constexpr auto operator=(U const& operand)
            -> ScaredyVariantStorage<T, Errors...>& {
            this->storage = operand;
            return *this;
        }

        template <typename U>
        constexpr auto operator=(U const& operand) const
            -> ScaredyVariantStorage<T, Errors...> const& {
            this->storage = operand;
            return *this;
        }

        constexpr auto has_value() const -> bool1 {
            return this->storage.template holds_alternative<Type>();
        }

        constexpr auto value() & -> Type& requires(!::meta::is_void<T>) {
            return this->storage.template value<T>();
        }

        constexpr auto value() const& -> Type& requires(!::meta::is_void<T>) {
            return this->storage.template value<T>();
        }

        constexpr auto value() && -> Type&& requires(!::meta::is_void<T>) {
            return cat::move(this->storage.template value<T>());
        }

        constexpr auto value() const&& -> Type&& requires(!::meta::is_void<T>) {
            return cat::move(this->storage.template value<T>());
        }

        template <typename Error>
        constexpr auto error() {
            return this->storage.template value<Error>();
        }

        template <typename Error>
        constexpr auto error() const {
            return this->storage.template value<Error>();
        }

        template <typename U>
        constexpr auto holds_alternative() const -> bool1 {
            return this->storage.template holds_alternative<U>();
        }
    };

    // `T` is a `Predicate<Type, function, sentinel>`.
    template <typename T, typename... Errors>
    struct ScaredyPredicateStorage {
        using Value = typename T::PredicateType;
        // `Errors` must only hold one error. It is variadic merely to simplify
        // overload resolution in `cat::Scaredy`. `decltype` adds a reference to
        // it, so that is removed by `meta::RemoveReference`.
        using Error = ::meta::RemoveReference<decltype(Array{Errors{}...}[0])>;

        // TODO: Test alignment.
        union {
            Value storage;
            Error error_code;
        };

        constexpr ScaredyPredicateStorage() = default;

        constexpr ScaredyPredicateStorage(Value const& input)
            : storage(input){};

        constexpr auto operator=(T const& operand)
            -> ScaredyPredicateStorage<T, Error>& {
            this->storage = static_cast<T>(operand);
            return *this;
        }

        constexpr auto operator=(T const& operand) const
            -> ScaredyPredicateStorage<T, Error>& {
            this->storage = static_cast<T>(operand);
            return *this;
        }

        constexpr auto value() & -> Value& {
            return this->storage;
        }

        constexpr auto value() const& -> Value const& {
            return this->storage;
        }

        constexpr auto value() && -> Value&& {
            return cat::move(this->storage);
        }

        constexpr auto value() const&& -> Value&& {
            return cat::move(this->storage);
        }

        // This is variadic to give it a homogenous interface with other
        // `Scaredy`'s.
        template <typename...>
        constexpr auto error() -> Error {
            return this->error_code;
        }

        // This is variadic to give it a homogenous interface with other
        // `Scaredy`'s.
        template <typename...>
        constexpr auto error() const -> Error {
            return this->error_code;
        }

        constexpr auto has_value() const -> bool1 {
            return T::predicate_function(this->storage);
        }
    };

}  // namespace detail

template <typename T, typename... Errors>
requires(
    // `cat::Scaredy` cannot hold C arrays.
    // (!::meta::is_array<Errors...>) &&
    // `cat::Scaredy` should have at least one error type.
    sizeof...(Errors) > 0) class Scaredy {
    // clang-format off
    using Storage = ::meta::Conditional <requires {
        T::sentinel_value;
    }, cat::detail::ScaredyPredicateStorage<T, Errors...>,
        cat::detail::ScaredyVariantStorage <T, Errors...>>;
    // clang-format on

    Storage storage;
  public:
    using Type =
        ::meta::Conditional<::meta::is_void<T>, cat::Monostate, T>;

    constexpr Scaredy() = default;

    constexpr Scaredy(auto const& input) : storage(input){};

    template <typename U>
    constexpr auto operator=(U const& operand)
        -> Scaredy<T, Errors...>& requires(::meta::is_convertible<U, T>) {
        this->storage = static_cast<T>(operand);
        return *this;
    }

    template <typename U>
    constexpr auto operator=(U const& operand) const
        -> Scaredy<T, Errors...>& requires(::meta::is_convertible<U, T>) {
        this->storage = static_cast<T>(operand);
        return *this;
    }

    [[nodiscard]] constexpr auto has_value() const -> bool1 {
        return this->storage.has_value();
    }

    [[nodiscard]] constexpr auto value() & requires(!::meta::is_void<T>) {
        return this->storage.template value();
    }

    [[nodiscard]] constexpr auto value() const& requires(!::meta::is_void<T>) {
        return this->storage.value();
    }

    [[nodiscard]] constexpr auto value() && requires(!::meta::is_void<T>) {
        return cat::move(this->storage.value());
    }

    [[nodiscard]] constexpr auto value() const&& requires(!::meta::is_void<T>) {
        return cat::move(this->storage.value());
    }

    template <typename Error>
    [[nodiscard]] constexpr auto error() {
        return this->storage.template error<Error>();
    }

    template <typename Error>
    [[nodiscard]] constexpr auto error() const {
        return this->storage.template error<Error>();
    }

    template <typename U>
    [[nodiscard]] constexpr auto holds_alternative() const -> bool1 {
        return this->storage.template holds_alternative<U>();
    }

    [[nodiscard]] constexpr auto or_panic() {
        if (this->has_value()) [[likely]] {
            if constexpr (!::meta::is_void<T>) {
                return this->value();
            } else {
                return;
            }
        }
        cat::exit(1);
        __builtin_unreachable();
    }

    [[nodiscard]] constexpr auto or_panic() const {
        if (this->has_value()) [[likely]] {
            if constexpr (!::meta::is_void<T>) {
                return this->value();
            } else {
                return;
            }
        }
        cat::exit(1);
        __builtin_unreachable();
    }
};

}  // namespace cat
