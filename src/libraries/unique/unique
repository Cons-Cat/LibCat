// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

// `Unique` wrappers are curiously-recurring-template-pattern types that cannot
// be copy-constructed. They must be moved to pass into functions. Their
// destructor will call an `raii()` method on the type they wrap iff that type
// has an `raii()` method.
//
// `UniqueWeak` is a similar wrapper that can release ownership of its data, and
// will only invoke that data's destructor if it currently holds ownership.

#include <type_traits>
template <typename T>
concept HasRaii = requires(T it) {
    it.raii();
};

template <typename T>
class UniqueWeak;

namespace detail {

template <typename T>
concept NonUniqueWeak = requires {
    meta::IsSpecializationTrait<T, UniqueWeak>::value;
};

}  // namespace detail

template <typename T>
class Unique {
    T storage;
  public:
    // Delete non-moving constructors.
    constexpr Unique(T const&) = delete;
    constexpr Unique(Unique<T> const&) = delete;

    // TODO: Support converting moves.

    // Allow default-construction and move-construction.
    constexpr Unique() : storage(T()){};
    constexpr Unique(Unique<T>&& raii) : storage(raii.borrow()){};

    // Forward any possible constructor into `storage`.
    constexpr Unique(T&& t) : storage(meta::forward<T>(t)){};

    // Forward any possible constructor into `storage`.
    template <typename... Args>
    Unique(Args&&... args) requires(sizeof...(Args) > 1)
        : storage(meta::forward<Args>(args)...){};

    // Allow move-assignment.
    auto operator=(T&& t) -> Unique& {
        this->storage_destructor();
        this->storage = meta::forward<T>(t);
        return *this;
    }

    auto operator=(Unique<T>&& raii) -> Unique& {
        this->storage_destructor();
        this->storage = cat::move(raii).borrow();
        return *this;
    }

    auto operator=(UniqueWeak<T>&& raii) -> Unique& {
        this->storage_destructor();
        this->storage = cat::move(raii).borrow();
        return *this;
    }

    auto operator=(auto anything) {
        this->storage = anything;
    }

    ~Unique() {
        this->storage_destructor();
    }

    constexpr auto borrow() -> T&& {
        return meta::forward<T>(this->storage);
    }
  protected:
    void storage_destructor() {
        // If `T` holds a `.raii()` method, it will be called before `T`'s
        // destructor.
        if constexpr (HasRaii<T>) {
            this->storage.raii();
        }
        if constexpr (!meta::is_trivially_destructible<T>) {
            this->storage.~T();
        }
    }
};

template <detail::NonUniqueWeak T>
Unique(T) -> Unique<T>;

template <typename T>
class UniqueWeak {
    T storage;
    bool1 owns_data = true;
  public:
    // Delete non-moving constructors.
    constexpr UniqueWeak(T const&) = delete;
    constexpr UniqueWeak(UniqueWeak<T> const&) = delete;

    // Allow default-construction and move-construction.
    constexpr UniqueWeak() : storage(T()){};
    constexpr UniqueWeak(UniqueWeak<T>&& raii) : storage(raii.borrow()) {
        raii.owns_data = false;
    };

    // Forward any possible constructor into `storage`.
    constexpr UniqueWeak(T&& t) : storage(meta::forward<T>(t)){};

    template <typename... Args>
    UniqueWeak(Args&&... args) : storage(meta::forward<Args>(args)...){};

    // Allow move-assignment.
    auto operator=(T&& t) -> UniqueWeak<T>& {
        this->owns_data = true;
        this->storage_destructor();
        this->storage = meta::forward<T>(t);
        return *this;
    }

    auto operator=(UniqueWeak<T>&& raii) -> UniqueWeak<T>& {
        raii.owns_data = false;
        this->owns_data = true;
        this->storage_destructor();
        this->storage = cat::move(raii).borrow();
        return *this;
    }

    auto operator=(auto anything) {
        this->storage = anything;
    }

    constexpr auto has_ownership() -> bool1 {
        return this->owns_data;
    }

    constexpr auto borrow() -> T&& {
        this->owns_data = false;
        return meta::forward<T>(this->storage);
    }

    ~UniqueWeak() {
        this->storage_destructor();
    }
  protected:
    // If this `UniqueWeak` owns the data it stores, it will be destroyed.
    void storage_destructor() {
        if (this->owns_data) {
            // If `T` holds a `.raii()` method, it will be called before `T`'s
            // destructor if this object holds ownership of the data.
            if constexpr (HasRaii<T>) {
                this->storage.raii();
            }
            // If a destructor is non-trivial, it must be invoked manually.
            if constexpr (!meta::is_trivially_destructible<T>) {
                this->storage.~T();
            }
        }
    }
};

template <typename T>
UniqueWeak(T) -> UniqueWeak<T>;
