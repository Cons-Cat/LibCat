// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/allocator>
#include <cat/linux>

namespace cat {

struct thread {
 public:
   thread() = default;
   thread(thread const&) = delete;

   // TODO: Default or delete a move constructor and assignment operator?

   template <typename... Args>
   auto
   spawn(is_allocator auto& allocator, idx initial_stack_size,
         idx thread_local_buffer_size, is_invocable<Args...> auto&& function,
         Args&&... arguments) -> maybe<void> {
      scaredy result =
         m_handle.spawn(allocator, initial_stack_size, thread_local_buffer_size,
                        fwd(function), fwd(arguments)...);
      if (result.has_value()) {
         return monostate;
      }
      return nullopt;
   }

   [[nodiscard]]
   auto
   join() const -> maybe<void> {
      scaredy result = m_handle.wait();
      if (result.has_value()) {
         return monostate;
      }
      return nullopt;
   }

 private:
   // This is platform-specific hidden code.
   [[maybe_unused]]
   nix::process m_handle;
};

inline void
relax_cpu() {
   asm volatile("pause" ::
                   : "memory");
}

}  // namespace cat
