// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/arithmetic>

namespace cat {

namespace detail {
// Name mangling prevents the linker from finding this symbol.
extern "C"
   // GCC wants to insert a `__asan_handle_no_return()` call, which breaks
   // argument loading.
   [[noreturn, gnu::used, gnu::no_sanitize_address,
     gnu::force_align_arg_pointer]]
   void
   _start();  // NOLINT
}  // namespace detail

// The `cat::exit()` function is provided globally. This streamlines out the
// existence of `_exit()`.
[[noreturn]]
void
exit(iword exit_code = 0);

auto
load_base_stack_pointer() -> void*;

// This must be inlined to align the stack pointer on the stack frame it is
// called from.
[[gnu::always_inline]]
inline void
align_stack_pointer_16() {
   asm("and $-16, %rsp");
}

// This must be inlined to align the stack pointer on the stack frame it is
// called from.
[[gnu::always_inline]]
inline void
align_stack_pointer_32() {
   asm("and $-32, %rsp");
}

extern "C" [[noreturn]]
void
// NOLINTNEXTLINE `__stack_chk_fail()` must begin with a double underscore.
__stack_chk_fail();

extern "C" void
// NOLINTNEXTLINE `__cxa_atexit()` must begin with a double underscore.
__cxa_atexit(void (*p_invocable)(void*), void* p_arg, void* p_dso_handle);

extern "C" [[gnu::used]]
void
// `__cxa_pure_virtual()` must begin with a double underscore.
__cxa_pure_virtual();  // NOLINT

class jmp_buffer {
   // This buffer layout should vary by all ISAs.

 private:
   // %rbx:
   // %rbp:
   // %r12:
   // %r13:
   // %r14:
   // %r15:
   [[maybe_unused]]
   unsigned long m_registers[6];
   // %rsp:
   [[maybe_unused]]
   unsigned long m_stack_pointer;
};

[[gnu::naked, gnu::returns_twice]]
auto
setjmp(jmp_buffer& jump_point) -> int4;

[[noreturn, gnu::naked]]
void
longjmp(jmp_buffer& jump_point, int8 return_value);

}  // namespace cat

// NOLINTNEXTLINE `__dso_handle` must begin with a double underscore.
inline void* __dso_handle = nullptr;
