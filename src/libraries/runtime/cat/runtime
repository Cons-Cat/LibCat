// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/arithmetic>

namespace cat {

namespace detail {
// Name mangling prevents the linker from finding this symbol.
extern "C" [[gnu::used
#ifndef NO_ARGC_ARGV
             ,
             gnu::naked
#endif
]]
void
_start();  // NOLINT
}  // namespace detail

// The `cat::exit()` function is provided globally. This streamlines out the
// existence of `_exit()`.
[[noreturn]]
void
exit(iword exit_code = 0);

auto
load_base_stack_pointer() -> void*;

// This must be inlined to align the stack pointer on the stack frame it is
// called from.
[[gnu::always_inline]]
inline void
align_stack_pointer_16() {
   // rmsbolt requires `.att_syntax prefix` here for some reason.
   asm volatile(".att_syntax prefix ;\nand $-16, %rsp");
}

// This must be inlined to align the stack pointer on the stack frame it is
// called from.
[[gnu::always_inline]]
inline void
align_stack_pointer_32() {
   // rmsbolt requires `.att_syntax prefix` here for some reason.
   asm volatile(".att_syntax prefix ;\nand $-32, %rsp");
}

extern "C" [[noreturn]]
void
__stack_chk_fail();

extern "C" void
__cxa_atexit(void (*p_invocable)(void*), void* p_arg, void* p_dso_handle);

extern "C" [[gnu::used]]
void
__cxa_pure_virtual();

class jmp_buffer {
   // This buffer layout should vary by all ISAs.

 private:
   // %rbx:
   // %rbp:
   // %r12:
   // %r13:
   // %r14:
   // %r15:
   [[maybe_unused]]
   unsigned long m_registers[6];
   // %rsp:
   [[maybe_unused]]
   unsigned long m_stack_pointer;
};

[[gnu::naked, gnu::returns_twice]]
auto
setjmp(jmp_buffer& jump_point) -> int4;

[[noreturn, gnu::naked]]
void
longjmp(jmp_buffer& jump_point, int8 return_value);

}  // namespace cat

inline void* __dso_handle = nullptr;

extern "C" [[gnu::used]]
inline void
__cxx_global_var_init() {
}

extern "C" [[gnu::used]]
inline void
__cxa_guard_acquire() {
}

extern "C" [[gnu::used]]
inline void
__cxa_guard_release() {
}
