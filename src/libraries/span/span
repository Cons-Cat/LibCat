// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <iterator>

// TODO: Add tests.
// TODO: Add many comments.

#include <memory>

template <typename T>
class Span {
  protected:
    // This is arranged as pointer, then size, to follow the ABI of Linux
    // standard `iovec`s. Unfortunately, that is opposite of Windws' standard
    // `WSABUF`. TODO: Consider making this ABI vary by build target?
    T* p_storage;
    ssize length;
  public:
    constexpr Span() = default;
    constexpr Span(Span&&) = default;

    constexpr Span(T* p_in_data, ssize in_length)
        : p_storage(p_in_data), length(in_length){};

    constexpr Span(T* p_start, T* p_end)
        : p_storage(p_start), length(static_cast<ssize>(p_end - p_start)){};

    // TODO: Make a `Container` `concept`.
    constexpr Span(auto& container)
        : p_storage(container.p_storage()), length(container.size()){};

    constexpr Span(auto const& container)
        : p_storage(container.p_storage()), length(container.size()){};

    template <ssize size>
    constexpr Span(T (&array)[size])
        : p_storage(cat::address_of(array)), length(size){};

    constexpr auto subspan(ssize start_index, ssize end_index) -> Span<T> {
        Result{start_index >= 0}.assert();
        Result{end_index <= length}.assert();
        Span<T> span;
        span.length = end_index - start_index;
        span.p_storage = this->p_storage + start_index;
        return span;
    }

    constexpr auto first(ssize offset) -> Span<T> {
        Result{offset < length}.assert();
        Span<T> span;
        span.length = offset;
        span.p_storage = this->p_storage;
        return span;
    }

    constexpr auto last(ssize offset) -> Span<T> {
        Result{offset < length}.assert();
        Span<T> span;
        span.length = offset;
        span.p_storage = this->p_storage + length - offset;
        return span;
    }

    constexpr auto set_subspan(ssize start_index, ssize end_index) -> Span<T>& {
        Result{start_index >= end_index}.assert();
        Result{end_index <= length}.assert();
        this->length = end_index - start_index;
        this->p_storage += start_index;
        return *this;
    }

    constexpr auto set_first(ssize offset) -> Span<T>& {
        Result{offset < length}.assert();
        this->length = offset;
        return *this;
    }

    constexpr auto set_last(ssize offset) -> Span<T>& {
        Result{offset < length}.assert();
        this->length = offset;
        this->p_storage += length - offset;
        return *this;
    }

    constexpr auto operator[](ssize index) const -> T& {
        Result{index < length}.assert();
        return this->p_storage[index];
    }

    constexpr auto p_data() const -> T* {
        return this->p_storage;
    }

    constexpr auto size() const -> ssize {
        return this->length;
    }

    constexpr auto front() const -> T& {
        return this->p_storage[0];
    }

    constexpr auto back() const -> T& {
        return this->p_storage[this->length - 1];
    }

    constexpr auto is_empty() const -> bool1 {
        return this->length > 0;
    }

    struct Iterator : IteratorFacade<Iterator> {
        ssize current_index;
        T const* const p_array;

        constexpr Iterator() = default;
        constexpr explicit Iterator(ssize index, T const* const p_in_array)
            : current_index(index), p_array(p_in_array){};

        auto dereference() const -> T const& {
            return this->p_array[current_index];
        }

        void advance(ssize offset) {
            current_index += offset;
        }

        auto distance_to(Iterator other) const -> ssize {
            return other.current_index - current_index;
        }
    };

    constexpr auto begin() const {
        return Iterator(0, this->storage);
    }

    constexpr auto end() const {
        return Iterator(length, this->storage);
    }

    constexpr auto rbegin() const {
        return cat::ReversedIterator<Iterator>(length - 1, this->storage);
    }

    constexpr auto rend() const {
        return cat::ReversedIterator<Iterator>(-1, this->storage);
    }
};
