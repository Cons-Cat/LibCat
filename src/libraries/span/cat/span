// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/collection>
#include <cat/iterator>
#include <cat/memory>
#include <cat/meta>

// TODO: Add tests.
// TODO: Add many comments.

namespace cat {

template <typename T>
class Span : public ::meta::CollectionFacade<Span<T>, T> {
  protected:
    // This is arranged as pointer, then size, to follow the ABI of Linux
    // standard `iovec`s. Unfortunately, that is opposite of Windws' standard
    // `WSABUF`.
    T* p_storage;
    ssize length;
  public:
    constexpr Span() = default;
    constexpr Span(Span<T> const&) = default;
    constexpr Span(Span<T>&&) = default;

    template <typename U>
    constexpr Span(U* p_in_data, ssize in_length)
        : p_storage(static_cast<T*>(p_in_data)), length(in_length){};

    template <typename U>
    constexpr Span(U* const p_start,
                   U* const p_end) requires(::meta::is_convertible<U*, T*>)
        : p_storage(p_start), length(static_cast<ssize>(p_end - p_start)){};

    // TODO: Make a `ContiguousContainer` `concept`.
    constexpr Span(auto const& container)
        : p_storage(container.p_data()), length(container.size()){};

    // NOLINTNEXTLINE Copying the pointer is reasonable here.
    constexpr auto operator=(Span<T> const& span) {
        this->p_storage = span.p_storage;
        this->length = span.length;
        return *this;
    }

    auto operator=(Span<T>&& span) {
        this->p_storage = span.p_storage;
        this->length = cat::move(span).length;
    }

    [[nodiscard]] constexpr auto p_data()  -> T* {
        return this->p_storage;
    }

    [[nodiscard]] constexpr auto p_data() const -> T const* {
        return this->p_storage;
    }

    [[nodiscard]] constexpr auto size() const -> ssize {
        return this->length;
    }
};

}  // namespace cat
