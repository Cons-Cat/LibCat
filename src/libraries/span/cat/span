// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/iterator>

// TODO: Add tests.
// TODO: Add many comments.

#include <cat/memory>
#include <cat/meta>

namespace cat {

template <typename T>
class Span {
  protected:
    // This is arranged as pointer, then size, to follow the ABI of Linux
    // standard `iovec`s. Unfortunately, that is opposite of Windws' standard
    // `WSABUF`. TODO: Consider making this ABI vary by build target?
    T* p_storage;
    ssize length;
  public:
    constexpr Span() = default;
    constexpr Span(Span&&) = default;

    template <typename U>
    constexpr Span(U* p_in_data, ssize in_length)
        : p_storage(static_cast<T*>(p_in_data)), length(in_length){};

    template <typename U>
    constexpr Span(U* const p_start,
                   U* const p_end) requires(::meta::is_convertible<U*, T*>)
        : p_storage(p_start), length(static_cast<ssize>(p_end - p_start)){};

    // TODO: Make a `ContiguousContainer` `concept`.
    constexpr Span(auto const& container)
        : p_storage(container.p_data()), length(container.size()){};

    template <unsigned size>
    constexpr Span(T (&array)[size])
        : p_storage(cat::addressof(array)),
          length(static_cast<signed long int>(size)){};

    // NOLINTNEXTLINE Copying the pointer is reasonable here.
    constexpr auto operator=(Span<T> const& span) {
        this->p_storage = span.p_storage;
        this->length = span.length;
        return *this;
    }

    auto operator=(Span<T>&& span) {
        this->p_storage = span.p_storage;
        this->length = cat::move(span).length;
    }

    [[nodiscard]] constexpr auto slice(ssize const start_index,
                                       ssize const end_index) -> Span<T> {
        Result{start_index >= 0}.assert();
        Result{end_index <= length}.assert();
        return Span<T>(this->p_storage + start_index, end_index - start_index);
    }

    [[nodiscard]] constexpr auto first(ssize const count) -> Span<T> {
        return this->slice(0, count);
    }

    [[nodiscard]] constexpr auto last(ssize const count) -> Span<T> {
        return this->slice(length - count, length);
    }

    constexpr auto operator[](ssize const index) const -> T& {
        Result{index < length}.assert();
        return this->p_storage[index.c()];
    }

    // TODO: Add an `at()` method.

    [[nodiscard]] constexpr auto p_data() const -> T* {
        return this->p_storage;
    }

    [[nodiscard]] constexpr auto size() const -> ssize {
        return this->length;
    }

    [[nodiscard]] constexpr auto front() const -> T& {
        return this->p_storage[0];
    }

    [[nodiscard]] constexpr auto back() const -> T& {
        return this->p_storage[this->length - 1];
    }

    [[nodiscard]] constexpr auto is_empty() const -> bool1 {
        return this->length > 0;
    }

    struct Iterator : cat::IteratorFacade<Iterator> {
        ssize current_index;
        T const* const p_array;

        constexpr Iterator() = default;
        constexpr explicit Iterator(ssize index, T const* const p_in_array)
            : current_index(index), p_array(p_in_array){};

        constexpr auto dereference() const -> T const& {
            return this->p_array[current_index.c()];
        }

        constexpr void advance(ssize offset) {
            current_index += offset;
        }

        constexpr auto distance_to(Iterator other) const -> ssize {
            return other.current_index - current_index;
        }
    };

    [[nodiscard]] constexpr auto begin() const {
        return Iterator(0, this->p_storage);
    }

    [[nodiscard]] constexpr auto end() const {
        return Iterator(length, this->p_storage);
    }

    [[nodiscard]] constexpr auto rbegin() const {
        return cat::ReversedIterator<Iterator>(length - 1, this->p_storage);
    }

    [[nodiscard]] constexpr auto rend() const {
        return cat::ReversedIterator<Iterator>(-1, this->p_storage);
    }
};

}  // namespace cat
