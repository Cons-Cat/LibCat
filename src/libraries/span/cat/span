// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/collection>
#include <cat/memory>
#include <cat/meta>

// TODO: Add tests.

namespace cat {

// A `span` is represents an array of `T` with runtime-known length. It stores
// an address and a length. It is random-access iterable.
template <typename T>
class span : public collection_interface<span<T>, T>,
             public iterable_interface<T> {
  public:
    constexpr span() = default;
    constexpr span(span<T> const&) = default;
    constexpr span(span<T>&&) = default;

    // Construct a `span` as `{address, length}`.
    constexpr span(T* p_in_data, idx in_length)
        : p_storage(p_in_data), length(in_length) {
    }

    // Construct an empty `span` with `nullptr`.
    constexpr span(decltype(nullptr)) : p_storage(nullptr), length(0) {
    }

    // Implicitly convert a contiguous container into a span.
    template <typename U>
        requires(is_random_access<U>)
    constexpr span(U& collection)
        : p_storage(collection.data()), length(collection.size()) {
    }

    // If `T` is non-const, conversion to a `const` contiguous container is
    // explicit.
    template <typename U>
        requires(is_random_access<U>)
    explicit constexpr span(U const& collection)
        : p_storage(unconst(collection.data())), length(collection.size()) {
    }

    constexpr auto operator=(span<T> const&) -> span<T>& = default;
    constexpr auto operator=(span<T>&&) -> span<T>& = default;

    // Get the non-`const` address that this `span` starts at.
    [[nodiscard]]
    constexpr auto
    data() -> T* {
        return this->p_storage;
    }

    // Get the `const` address that this `span` starts at.
    [[nodiscard]]
    constexpr auto
    data() const -> T* {
        return this->p_storage;
    }

    // Get the number of elements owned by this `span`.
    [[nodiscard]]
    constexpr auto
    size() const -> idx {
        return this->length;
    }

    // These data members should be `public` so that this is a structural type.

    // This is arranged as pointer, then size, to follow the ABI of Linux
    // standard `iovec`s. Unfortunately, that is opposite of Windws' standard
    // `WSABUF`.
    T* p_storage;
    idx length;
};

// Create a span between two addresses.
template <typename T>
constexpr auto
make_span_between(T* p_start, T* p_end) {
    return span(p_start, p_end - p_start);
}

// Simplify non-negative signed integers.
template <typename T>
using maybe_span = maybe<compact<span<T>,
                                 [](span<T> value) -> bool {
                                     // This span is `nullopt` if its
                                     // `.p_storage` is null.
                                     return value.p_storage;
                                 },
                                 // Default to a null span.
                                 span<T>(nullptr)>>;

}  // namespace cat
