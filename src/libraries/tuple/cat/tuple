// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/type_list>

namespace cat {
namespace detail {
// Because any type can only be derived from once, types must be binded to
// their position in a paremeter pack to guarantee their uniqueness. This is
// required to support `tuple`s with non-uniquely-typed elements.
// e.g. `tuple<int, int>`
template <idx in_index, typename T>
struct tuple_element {
   using element = T;

   // Implements comparison for tuples containing reference types
   constexpr auto
   operator<=>(tuple_element const&) const = default;

   constexpr auto
   operator==(tuple_element const&) const -> bool = default;

   // If the trivial comparison operators are implicitly deleted, fall back to
   // these implementations:

   constexpr auto
   operator<=>(tuple_element const& other) const
      requires(is_reference<T> && is_threeway_comparable<T>)
   {
      return storage <=> other.storage;
   }

   constexpr auto
   operator==(tuple_element const& other) const -> bool
      requires(is_reference<T> && is_equality_comparable<T>)
   {
      return storage == other.storage;
   }

   // For some reason, this produces ambiguous overload errors if it is
   // implemented as a normal function instead of an operator.
   constexpr auto
   operator[](constant<in_index>) & -> T& {
      return this->storage;
   }

   constexpr auto
   operator[](constant<in_index>) const& -> T const& {
      return this->storage;
   }

   constexpr auto
   operator[](constant<in_index>) && -> T&& {
      return move(this->storage);
   }

   constexpr auto
   operator[](constant<in_index>) const&& -> T&& {
      return move(this->storage);
   }

   [[no_unique_address]]
   T storage;
};

// Deriving from a variadic list of types allows `tuple` to be an aggregate
// type.
template <typename... types>
struct type_map : types... {
   constexpr auto
   operator<=>(type_map const&) const = default;
   constexpr auto
   operator==(type_map const&) const -> bool = default;

   using types::operator[]...;
};

// This partial specialization is required in order to support two parameter
// packs in the following `tuple_storage` declaration.
template <typename...>
struct tuple_storage {};

// Map a list of indices to a list of types.
// TODO: Use `idx` rather than `iword`.
template <idx... indices, typename... in_types>
struct tuple_storage<index_list_type<indices...>, in_types...> {
   using type = type_map<tuple_element<indices, in_types>...>;
};

}  // namespace detail

template <typename... in_types>
struct tuple : detail::tuple_storage<index_sequence_over_types<in_types...>,
                                     in_types...>::type {
   using types = type_list<in_types...>;
   using map = detail::tuple_storage<index_sequence_over_types<in_types...>,
                                     in_types...>::type;

   static constexpr idx size = types::size;

   constexpr auto
   operator<=>(tuple const&) const = default;
   constexpr auto
   operator==(tuple const&) const -> bool = default;
   constexpr auto
   operator!=(tuple const&) const -> bool = default;
   constexpr auto
   operator<(tuple const&) const -> bool = default;
   constexpr auto
   operator>(tuple const&) const -> bool = default;
   constexpr auto
   operator<=(tuple const&) const -> bool = default;
   constexpr auto
   operator>=(tuple const&) const -> bool = default;

   /*
// Convert each element of this `tuple` into those of another `tuple`.
template <typename T>
constexpr operator T() const {
   using other_types = decay<T>::types;
   // Pass in a `type_list` for its types to be deduced out of.
   return this->template convert_elements(other_types());
}

private:
template <iword in_index, typename U>
constexpr auto convert_next_element(auto const& new_tuple) const {
   U converted_value = static_cast<U>(this->get<in_index>());
   return new_tuple.template concat(cat::tuple<U>{converted_value});
}

template <iword in_index, typename U, typename... Us>
   requires(sizeof...(Us) > 0)
constexpr auto convert_next_element(auto const& new_tuple) const {
   U converted_value = static_cast<U>(this->get<in_index>());
   return this->convert_next_element<in_index + 1, Us...>(
       new_tuple.template concat(cat::tuple<U>{converted_value}));
}

template <typename... Us>
constexpr auto convert_elements(type_list<Us...>) const {
   return this->convert_next_element<0, Us...>(tuple<>{});
}

template <iword in_index>
constexpr auto concat_lhs(auto& other_tuple) const {
   return other_tuple;
}

template <iword in_index>
   requires(in_index < this->size)
constexpr auto concat_lhs(auto& other_tuple) const {
   other_tuple.template get<in_index>() = this->get<in_index>();
   return concat_lhs<in_index + 1>(other_tuple);
}

template <iword in_index>
constexpr auto concat_rhs(auto const& other_tuple, auto&) const {
   return other_tuple;
}

template <iword in_index>
constexpr auto concat_rhs(auto const& other_tuple, auto& rhs_tuple) const
   requires(in_index < rhs_tuple.this->size) {
   other_tuple.template get<in_index +
static_cast<iword>(sizeof...(in_types))>() = rhs_tuple.template
get<in_index>(); return concat_rhs<in_index + 1>(other_tuple, rhs_tuple);
}

template <iword in_index>
constexpr auto concat_recurse(tuple<in_types...> const& this_tuple,
                             auto const& other_tuple,
                             auto const& new_tuple) const {
   if constexpr (in_index < this->size) {
       return concat_recurse<in_index + 1>(this_tuple, other_tuple,
                                        new_tuple);
   }
}

public:
// Concatenate this tuple with another tuple.
template <typename... Us>
constexpr auto concat(tuple<Us...> const& other_tuple) const
   -> tuple<in_types..., Us...> {
   // TODO: If these tuples are trivially relocatable, optimize this.
   tuple<in_types..., Us...> new_tuple =
       this->concat_recurse<0>(*this, other_tuple, tuple<>{});
   // this->concat_lhs<0>(new_tuple);
   return new_tuple;
}
   */

   // Get a non-`const` reference to the N'th stored variable.
   template <idx in_index>
      requires(in_index < size)
   constexpr auto
   get(this auto&& self) -> auto&& {
      return fwd(self)[constant<in_index>()];
   }

   // Get a reference to the first stored variable.
   [[nodiscard]]
   constexpr auto
   first(this auto&& self)
      -> auto&& requires(size >= 1) { return fwd(self).template get<0u>(); }

   // Get a reference to the fifth stored variable.
   [[nodiscard]]  //
   constexpr auto second(this auto&& self)
      -> auto&& requires(size >= 2) { return fwd(self).template get<1u>(); }

   // Get a reference to the fifth stored variable.
   [[nodiscard]]  //
   constexpr auto third(this auto&& self)
      -> auto&& requires(size >= 3) { return fwd(self).template get<2u>(); }

   // Get a reference to the fifth stored variable.
   [[nodiscard]]  //
   constexpr auto fourth(this auto&& self)
      -> auto&& requires(size >= 4) { return fwd(self).template get<3u>(); }

   // Get a reference to the fifth stored variable.
   [[nodiscard]]  //
   constexpr auto fifth(this auto&& self)
      -> auto&& requires(size >= 5) { return fwd(self).template get<4u>(); }
};

// This deduction guide is required for variadic type deduction.
template <typename... types>
tuple(types...) -> tuple<types...>;

}  // namespace cat

template <typename... types>
constexpr auto
tuple_cat(types&&... tuples);

// Implement tuple protocol for `cat::tuple`.
namespace std {

template <typename... in_types>
struct tuple_size<::cat::tuple<in_types...>>
    : ::cat::constant<sizeof...(in_types)> {};

template <__SIZE_TYPE__ in_index, typename... in_types>
struct tuple_element<in_index, ::cat::tuple<in_types...>> {
   using type = typename ::cat::type_list<in_types...>::template get<::cat::idx(
      in_index)>;
};

}  // namespace std

#include "implementations/tuple_cat.tpp"
