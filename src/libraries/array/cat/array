#pragma once

#include <cat/iterator>
#include <cat/meta>
#include <cat/optional>
#include <cat/string>
#include <cat/utility>

namespace cat {

template <typename T, ssize length>
class Array {
    T storage[length.c()];
  public:
    constexpr Array() = default;
    constexpr Array(Array<T, length>&& in_array) = default;
    constexpr Array(Array<T, length> const& in_array) = default;
    constexpr Array(String const& string) requires(
        ::meta::is_same<::meta::RemoveConst<T>, char>) {
        cat::copy_memory(string.p_data(), &(this->storage), string.size());
    }

    template <typename... U>
    constexpr Array(U&&... arguments) requires(
        static_cast<ssize>(sizeof...(arguments)) == length) {
        T unpacked_data[length.c()] = {arguments...};
        for (int i = 0; i < length; i++) {
            this->storage[i] = unpacked_data[i];
        }
    }

    constexpr auto operator=(Array<T, length>&&) -> Array<T, length>& = default;

    constexpr auto operator=(String const&& string) -> Array<T, length>
    requires(::meta::is_same<T, char>) {
        Array<T, length> array;
        cat::copy_memory(string.p_data(), &(this->storage), string.size());
        return array;
    }

    [[nodiscard]] constexpr auto operator[](ssize const index) -> T& {
        Result{index >= 0}.assert();
        Result{index < length}.assert();
        return this->storage[index.c()];
    }

    [[nodiscard]] constexpr auto at(ssize const index) -> cat::Optional<T&> {
        Result{index >= 0}.assert();
        if (index < length) {
            return cat::Optional<T&>(this->storage[index.c()]);
        }
        return nullopt;
    }

    [[nodiscard]] constexpr auto p_data() -> T const* {
        return &(this->storage[0]);
    }

    [[nodiscard]] consteval auto size() -> ssize {
        return length;
    }

    [[nodiscard]] constexpr auto front() -> T& {
        return this->storage[0];
    }

    [[nodiscard]] constexpr auto back() -> T& {
        return this->storage[length.c() - 1];
    }

    [[nodiscard]] constexpr auto is_empty() -> bool1 {
        return length > 0;
    }

    [[nodiscard]] constexpr auto slice(ssize const start_index,
                                       ssize const end_index) -> Span<T> {
        Result{start_index >= 0}.assert();
        Result{end_index <= length}.assert();
        return Span<T>(this->storage + start_index, end_index - start_index);
    }

    [[nodiscard]] constexpr auto first(ssize const count) -> Span<T> {
        return this->slice(0, count);
    }

    [[nodiscard]] constexpr auto last(ssize const count) -> Span<T> {
        return this->slice(length - count, length);
    }

    [[nodiscard]] constexpr auto to_string() -> String
        requires(::meta::is_same<::meta::RemoveConst<T>, char>) {
        return String(
            static_cast<char const*>(static_cast<void*>(&this->storage)),
            length);
    }

    struct Iterator : IteratorFacade<Iterator> {
        ssize current_index;
        T const* const p_array;

        constexpr Iterator() = default;
        constexpr explicit Iterator(ssize index, T const* const p_in_array)
            : current_index(index), p_array(p_in_array){};

        constexpr auto dereference() const -> T const& {
            return this->p_array[current_index.c()];
        }

        constexpr void advance(ssize offset) {
            current_index += offset;
        }

        constexpr auto distance_to(Iterator other) const -> ssize {
            return other.current_index - current_index;
        }
    };

    [[nodiscard]] constexpr auto begin() const {
        return Iterator(0, this->storage);
    }

    [[nodiscard]] constexpr auto end() const {
        return Iterator(length, this->storage);
    }

    [[nodiscard]] constexpr auto rbegin() const {
        return cat::ReversedIterator<Iterator>(length - 1, this->storage);
    }

    [[nodiscard]] constexpr auto rend() const {
        return cat::ReversedIterator<Iterator>(-1, this->storage);
    }
};

template <typename T, typename... Args>
Array(T, Args...)
    -> Array<T, static_cast<signed int long>(sizeof...(Args)) + 1>;

}  // namespace cat
