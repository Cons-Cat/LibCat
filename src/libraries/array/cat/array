// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/collection>
#include <cat/memory>

namespace cat {

// An `array` represents an array of `T` with a `constexpr` length. It stores
// its elements within itself, so this array can be constructed on the stack.
// It is random-access iterable.
template <typename T, idx length>
class array : public collection_interface<array<T, length>, T>,
              public iterable_interface<T> {
  public:
    constexpr array() = default;
    constexpr array(array<T, length> const& other_array) = default;
    constexpr array(array<T, length>&& other_array) = default;

    // Construct an `array` from a variadic argument list.
    template <typename... Args>
        requires(sizeof...(Args) == length /* &&
													  (is_convertible<Args, T> && ...)*/)
    constexpr array(Args&&... arguments)
        // Explicitly converting this type allows the first argument to coerce
        // the type for following arguments.
        // i.e. `cat::array shorts = {int2{0}, 1, 2};`
        : storage(static_cast<T>(fwd(arguments))...) {
    }

    constexpr auto
    operator=(array<T, length> const& other_array) -> array& = default;

    // Converting assignment operator.
    template <typename U>
        requires(is_convertible<U, T>)
    constexpr auto
    operator=(this array& self, array<U, length> const& other_array) -> array& {
        // TODO: Optimize with `copy_memory()` if T and U are relocatable.
        for (idx i = 0u; i < length; ++i) {
            self.storage[i.raw] = static_cast<T>(other_array[i]);
        }
        return self;
    }

    constexpr auto
    operator=(array<T, length>&& other_array) -> array& = default;

    // TODO: `<=>` operator.

    template <typename U>
        requires(is_implicitly_convertible<U, T>)
    constexpr auto
    fill(U value) -> array& {
        // TODO: This `set_memory()` segfaults with optimizations enabled. Is it
        // even necessary?
        //
        // if (!is_constant_evaluated() && sizeof(T) <= 8) {
        //     // set_memory(this->storage, value, length);
        // } else {
        for (idx i = 0u; i < length; ++i) {
            this->storage[i.raw] = static_cast<T>(value);
        }
        // }
        return *this;
    }

    // Get the non-`const` address of this `array`'s internal array.
    [[nodiscard]]
    constexpr auto
    data() -> T* {
        return this->storage;
    }

    // Get the `const` address of this `array`'s internal array.
    [[nodiscard]]
    constexpr auto
    data() const -> T const* {
        return this->storage;
    }

    // Get the number of elements contained in this `array`.
    [[nodiscard]]
    static constexpr auto
    size() -> idx {
        return length;
    }

    // `storage` is public so that `cat::array` is a trivial type.
    T storage[length.raw];
};

// Construct an `array<int, 3>` as: `array a = {0, 1, 2};`
template <typename T, typename... Args>
array(T, Args...) -> array<T, sizeof...(Args) + 1u>;

// Make a `cat::array` with a deduced `value_type`.
template <typename... Ts, idx length = sizeof...(Ts)>
[[nodiscard]]
constexpr auto
make_array(Ts&&... ts) -> array<common_type<Ts...>, length> {
    return array{static_cast<common_type<Ts...>>(ts)...};
}

// Make a `cat::array<T>`.
template <typename T, typename... Ts, idx length = sizeof...(Ts)>
[[nodiscard]]
constexpr auto
make_array(Ts&&... ts) -> array<T, length> {
    return array{static_cast<T>(ts)...};
}

// Make a `cat::array<T>` initialized with `value`.
template <idx length, typename T>
[[nodiscard]]
constexpr auto
make_array_filled(T const& value) -> array<T, length> {
    array<T, length> array;
    for (idx i = 0; i < length; ++i) {
        array[i] = value;
    }
    return array;
}

// template <typename U>
//     requires(is_implicitly_convertible<U, T>)
// static constexpr auto
// filled(U value) -> array {
//     array<T, length> array;
//     return array.fill(static_cast<T>(value));
// }

}  // namespace cat
