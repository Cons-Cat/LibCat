// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <any>
#include <concepts>
#include <linux_flags>
#include <utility>

#include "global_includes.h"

// `read()` transmits a number of bytes into a file descriptor.
auto read(FileDescriptor const file_descriptor, char8_t const* p_string_buffer,
          meta::integral auto const string_length) -> Result<isize>;

// `write()` forwards its arguments to a failable stdout syscall. It returns the
// number of bytes that it wrote.
auto write(FileDescriptor const file_descriptor, char8_t const* p_string_buffer,
           meta::integral auto const string_length) -> Result<isize>;

constexpr usize page_size = 4096u;

auto mmap(usize beginning_address, usize bytes_size, usize protections,
          usize flags, FileDescriptor file_descriptor, usize pages_offset)
    -> Result<void*>;

auto munmap() -> Result<>;

struct Thread;

extern "C" auto clone_asm(void (*function)(void*), void*, int4, void*,
                          ProcessId*, void*, ProcessId*) -> ProcessId;

auto wait4(ProcessId waiting_on_id, int4* p_status_output, int4 options,
           void* p_resource_usage) -> Result<Any>;

auto waitid(WaitIdType type, ProcessId id, int8 options) -> Result<Any>;

struct CloneArguments;

// TODO: Make all syscalls inline assembly. It did not work, last I tried.
/* The source to these functions is contained in the ./detail/ subdirectory at
 * the path of this file. They are split into individual files, because GCC
 * cannot exclude compiling unused functions individually from within one .s
 * file. */
// TODO: All syscalls should return a `Result`.
auto syscall0(Any) -> Result<Any>;
auto syscall1(Any, Any) -> Result<Any>;
auto syscall2(Any, Any, Any) -> Result<Any>;
auto syscall3(Any, Any, Any, Any) -> Result<Any>;
auto syscall4(Any, Any, Any, Any, Any) -> Result<Any>;
auto syscall5(Any, Any, Any, Any, Any, Any) -> Result<Any>;
auto syscall6(Any call, Any arg1, Any arg2, Any arg3, Any arg4, Any args,
              Any arg6) -> Result<Any>;

template <typename ReturnType, typename T, typename... Args>
auto syscall(T call, Args... parameters) -> Result<ReturnType>
requires(sizeof...(Args) < 7);

#include "./implementations/read.tpp"
#include "./implementations/syscall.tpp"
#include "./implementations/write.tpp"
