// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/meta>

// `Numeral` is a container for numeric data types which prevents unsafe or
// pessimizing implicit casts, such as loss of precision or signed-ness.
//
// All of its conversion operators, arithmetic operators and constructors
// are generic with constraints. Because these methods are constrained, it
// is possible that the compiler will fail to resolve any satisfying
// overloads for an invocation of an arithmetic operator, constructor, or
// conversion operator, and thus prevent compilation.
//
// Constraints such as "the operand's size must be less than or equal to my
// own size" guarantee that the an unwanted overload cannot be resolved.
// This solution is concise, because any constraint broadly applies to all
// possible type conversions.

namespace cat {

template <typename>
struct NumericLimits {};

template <typename T>
struct NumericLimits<Numeral<T>> {
    NumericLimits() = delete;

    // Forward the underlying storage type to `.max`.
    constexpr static auto max = NumericLimits<T>::max;

    // Forward the underlying storage type to `.min`.
    constexpr static auto min = NumericLimits<T>::min;
};

template <>
struct NumericLimits<__INT8_TYPE__> {
    NumericLimits() = delete;
    constexpr static __INT8_TYPE__ max = 127;
    constexpr static __INT8_TYPE__ min = -128;
};

template <>
struct NumericLimits<__UINT8_TYPE__> {
    NumericLimits() = delete;
    constexpr static __UINT8_TYPE__ max = 255u;
    constexpr static __UINT8_TYPE__ min = 0u;
};

template <>
struct NumericLimits<__INT16_TYPE__> {
    NumericLimits() = delete;
    constexpr static __INT16_TYPE__ max = 32'767;
    constexpr static __INT16_TYPE__ min = -32'768;
};

template <>
struct NumericLimits<__UINT16_TYPE__> {
    NumericLimits() = delete;
    constexpr static __UINT16_TYPE__ max = 65535u;
    constexpr static __UINT16_TYPE__ min = 0u;
};

template <>
struct NumericLimits<__INT32_TYPE__> {
    NumericLimits() = delete;
    constexpr static __INT32_TYPE__ max = 2'147'483'647;
    constexpr static __INT32_TYPE__ min = -2'147'483'648;
};

template <>
struct NumericLimits<__UINT32_TYPE__> {
    NumericLimits() = delete;
    constexpr static __UINT32_TYPE__ max = 4'294'967'295;
    constexpr static __UINT32_TYPE__ min = 0u;
};

template <>
struct NumericLimits<__INT64_TYPE__> {
    NumericLimits() = delete;
    constexpr static __INT64_TYPE__ max = 9'223'372'036'854'775'807;
    constexpr static __INT64_TYPE__ min = -9'223'372'036'854'775'807;
};

template <>
struct NumericLimits<__UINT64_TYPE__> {
    NumericLimits() = delete;
    constexpr static __UINT64_TYPE__ max = 18'446'744'073'709'551'615u;
    constexpr static __UINT64_TYPE__ min = 0u;
};

// TODO: `float` and `double` limits.
template <>
struct NumericLimits<float> {
    NumericLimits() = delete;
    constexpr static float max = 0.f;
    constexpr static float min = 0.f;
};

template <>
struct NumericLimits<double> {
    NumericLimits() = delete;
    constexpr static double max = 0.f;
    constexpr static double min = 0.f;
};

namespace detail {
    template <typename T>
    concept CatNumeral = is_cat_numeral<T>;

    template <typename T, typename U>
    constexpr auto is_safe_conversion() -> bool {
        // clang-format off
    return (sizeof(T) >= sizeof(U))
		   && (is_signed<T> == is_signed<U>)
	       && (is_floating_point<T> == is_floating_point<U>);
        // clang-format on
    }

    template <CatNumeral T, typename U>
    constexpr auto is_safe_conversion() -> bool {
        using UnderlyingT = typename T::Raw;
        // clang-format off
    return (sizeof(UnderlyingT) >= sizeof(U))
		   && (is_signed<UnderlyingT> == is_signed<U>)
	       && (is_floating_point<UnderlyingT>
               == is_floating_point<U>);
        // clang-format on
    }

    template <typename T, CatNumeral U>
    constexpr auto is_safe_conversion() -> bool {
        using UnderlyingU = typename U::Raw;
        // clang-format off
    return (sizeof(T) >= sizeof(UnderlyingU))
		   && (is_signed<T> == is_signed<UnderlyingU>)
	       && (is_floating_point<T>
               == is_floating_point<UnderlyingU>);
        // clang-format on
    }

    template <CatNumeral T, CatNumeral U>
    constexpr auto is_safe_conversion() -> bool {
        using UnderlyingT = typename T::Raw;
        using UnderlyingU = typename U::Raw;
        // clang-format off
    return (sizeof(UnderlyingT) >= sizeof(UnderlyingU))
		   && (is_signed<UnderlyingT>
               == is_signed<UnderlyingU>)
	       && (is_floating_point<UnderlyingT>
               == is_floating_point<UnderlyingU>);
        // clang-format on
    }
}  // namespace detail

template <typename T>
constexpr auto raw_cast(Numeral<T> const& value) -> T {
    return value.raw;
}

template <typename T>
constexpr auto raw_cast(T const& value) -> T {
    return value;
}

template <typename T>
[[nodiscard]] constexpr auto count_leading_zeros(T const value) -> ssize
    requires(is_integral<T>);

template <typename T>
[[nodiscard]] constexpr auto count_trailing_zeros(T const value) -> ssize
    requires(is_integral<T>);

template <typename T>
struct Numeral {
    using Raw = T;
    T raw;

    // Making these `auto` solves a clang-tidy false diagnostic.
    // TODO: These should be type `Numeral<T>`.
    static constexpr auto min = NumericLimits<Raw>::min;
    static constexpr auto max = NumericLimits<Raw>::max;

    constexpr Numeral() = default;

    template <typename U>
    constexpr explicit(!detail::is_safe_conversion<T, U>()) Numeral(U from)
        : raw(static_cast<T>(from)){};

    template <typename U>
    constexpr explicit operator U() {
        if constexpr (IsSpecializationTrait<U, Numeral>::value) {
            // If `U` is a `Numeral`, cast into `U`'s underlying type.
            return static_cast<typename U::Raw>(this->raw);
        } else {
            // If `U` is not a `Numeral`, cast into `U`.
            return static_cast<U>(this->raw);
        }
    }

    template <typename U>
    constexpr explicit operator U() const {
        if constexpr (IsSpecializationTrait<U, Numeral>::value) {
            // If `U` is a `Numeral`, cast into `U`'s underlying type.
            return static_cast<typename U::Raw>(this->raw);
        } else {
            // If `U` is not a `Numeral`, cast into `U`.
            return static_cast<U>(this->raw);
        }
    }

    template <typename U>
    constexpr auto operator=(U const from)
        -> Numeral& requires(detail::is_safe_conversion<T, U>()) {
        this->raw = static_cast<T const>(from);
        return *this;
    }

    template <typename U>
    constexpr auto operator>(U const from) const
        -> bool requires(detail::is_safe_conversion<T, U>()) {
        return this->raw > static_cast<T const>(from);
    }

    template <typename U>
    constexpr auto operator>=(U const from) const
        -> bool requires(detail::is_safe_conversion<T, U>()) {
        return this->raw >= static_cast<T const>(from);
    }

    template <typename U>
    constexpr auto operator<(U const from) const
        -> bool requires(detail::is_safe_conversion<T, U>()) {
        return this->raw < static_cast<T const>(from);
    }

    template <typename U>
    constexpr auto operator<=(U const from) const
        -> bool requires(detail::is_safe_conversion<T, U>()) {
        return this->raw <= static_cast<T const>(from);
    }

    template <typename U>
    constexpr auto operator+=(U const from)
        -> Numeral& requires(detail::is_safe_conversion<T, U>()) {
        this->raw = this->raw + static_cast<T const>(from);
        return *this;
    }

    constexpr auto operator++() -> Numeral& {
        ++raw;
        return *this;
    }

    constexpr auto operator++(int) -> Numeral& {
        raw++;
        return *this;
    }

    template <typename U>
    constexpr auto operator-=(U const from)
        -> Numeral& requires(detail::is_safe_conversion<T, U>()) {
        this->raw = this->raw - static_cast<T const>(from);
        return *this;
    }

    constexpr auto operator--() -> Numeral<T> {
        return --raw;
    }

    constexpr auto operator--(int) -> Numeral<T> {
        return raw--;
    }

    template <typename U>
    constexpr auto operator*=(U const from)
        -> Numeral& requires(detail::is_safe_conversion<T, U>()) {
        this->raw = this->raw * static_cast<T const>(from);
        return *this;
    }

    template <typename U>
    constexpr auto operator/(U const from) const -> Numeral<T>
        requires(detail::is_safe_conversion<T, U>())
    { return static_cast<T const>(this->raw / static_cast<T const>(from)); }

    template <typename U>
    constexpr auto operator/=(U const from)
        -> Numeral& requires(detail::is_safe_conversion<T, U>()) {
        this->raw = this->raw / static_cast<T const>(from);
        return *this;
    }

    template <typename U>
    constexpr auto operator%(U const from) const -> Numeral<T>
        requires(detail::is_safe_conversion<T, U>())
    { return static_cast<T const>(this->raw % static_cast<T const>(from)); }

    template <typename U>
    constexpr auto operator%=(U const from)
        -> Numeral& requires(detail::is_safe_conversion<T, U>()) {
        this->raw = this->raw % static_cast<T const>(from);
        return *this;
    }

    template <typename U>
    constexpr auto operator&=(U const from)
        -> Numeral& requires(detail::is_safe_conversion<T, U>()) {
        this->raw = this->raw & static_cast<T const>(from);
        return *this;
    }

    template <typename U>
    constexpr auto operator|=(U const from)
        -> Numeral& requires(detail::is_safe_conversion<T, U>()) {
        this->raw = this->raw | static_cast<T const>(from);
        return *this;
    }

    template <typename U>
    [[nodiscard]] constexpr auto operator<<(U const from) const -> Numeral<T>
        requires(detail::is_safe_conversion<T, U>())
    { return static_cast<T const>(this->raw << static_cast<T>(from)); }

    template <typename U>
    constexpr auto operator<<=(U const from)
        -> Numeral& requires(detail::is_safe_conversion<T, U>()) {
        this->raw = this->raw << static_cast<T const>(from);
        return *this;
    }

    template <typename U>
    [[nodiscard]] constexpr auto operator>>(U const from) const -> Numeral<T>
        requires(detail::is_safe_conversion<T, U>())
    { return static_cast<T const>(this->raw >> static_cast<T>(from)); }

    template <typename U>
    constexpr auto operator>>=(U const from)
        -> Numeral& requires(detail::is_safe_conversion<T, U>()) {
        this->raw = this->raw >> static_cast<T const>(from);
        return *this;
    }

    [[nodiscard]] constexpr auto operator~() -> Numeral& {
        this->raw = ~(this->raw);
        return *this;
    }

    [[nodiscard]] constexpr auto count_leading_zeros() const -> ssize
        requires(is_integral<T>) {
        return cat::count_leading_zeros(this->raw);
    }

    [[nodiscard]] constexpr auto count_trailing_zeros() const -> ssize
        requires(is_integral<T>) {
        return cat::count_trailing_zeros(this->raw);
    }
};

template <typename T>
Numeral(T) -> Numeral<T>;

// Compare primitive numerals to `Numeral`s.
// TODO: Return a `Numeral` that is the larger size of either operand.
template <typename T, typename U>
constexpr auto operator>(T const lhs, Numeral<U> const rhs)
    -> bool requires(is_convertible<U, T> &&
                     !IsSpecializationTrait<T, Numeral>::value) {
    return lhs > rhs.raw;
}

template <typename T, typename U>
constexpr auto operator>=(T const lhs, Numeral<U> const rhs)
    -> bool requires(is_convertible<U, T> &&
                     !IsSpecializationTrait<T, Numeral>::value) {
    return lhs >= rhs.raw;
}

template <typename T, typename U>
[[nodiscard]] constexpr auto operator<(T const lhs, Numeral<U> const rhs)
    -> bool requires(is_convertible<U, T> &&
                     !IsSpecializationTrait<T, Numeral>::value) {
    return lhs < rhs.raw;
}

template <typename T, typename U>
[[nodiscard]] constexpr auto operator<=(T const lhs, Numeral<U> const rhs)
    -> bool requires(is_convertible<U, T> &&
                     !IsSpecializationTrait<T, Numeral>::value) {
    return lhs <= rhs.raw;
}

// Order-independant operators for `Numeral` and primitive numerals.

template <typename T, typename U>
[[nodiscard]] constexpr auto operator==(Numeral<T> const lhs, U const rhs)
    -> bool requires(is_signed<T> == is_signed<U> &&
                     is_floating_point<T> == is_floating_point<U>) {
    return lhs.raw == static_cast<T const>(rhs);
}

template <typename T, typename U>
[[nodiscard]] constexpr auto operator+(
    Numeral<T> const lhs,
    U const rhs) requires(is_signed<T> == is_signed<U> &&
                          is_floating_point<T> == is_floating_point<U>) {
    return Numeral{lhs.raw + static_cast<T const>(rhs)};
}

template <typename T, typename U>
[[nodiscard]] constexpr auto operator-(
    Numeral<T> const lhs,
    U const rhs) requires(is_signed<T> == is_signed<U> &&
                          is_floating_point<T> == is_floating_point<U>) {
    return Numeral{lhs.raw - static_cast<T const>(rhs)};
}

template <typename T, typename U>
[[nodiscard]] constexpr auto operator*(
    Numeral<T> const lhs,
    U const rhs) requires(is_signed<T> == is_signed<U> &&
                          is_floating_point<T> == is_floating_point<U>) {
    return Numeral{lhs.raw * static_cast<T const>(rhs)};
}

template <typename T, typename U>
[[nodiscard]] constexpr auto operator&(
    Numeral<T> const lhs,
    U const rhs) requires(is_signed<T> == is_signed<U> &&
                          is_floating_point<T> == is_floating_point<U>) {
    return Numeral{lhs.raw & static_cast<T const>(rhs)};
}

template <typename T, Integral U>
[[nodiscard]] constexpr auto operator|(
    Numeral<T> const lhs,
    U const rhs) requires(is_signed<T> == is_signed<U> &&
                          is_floating_point<T> == is_floating_point<U>) {
    return Numeral{lhs.raw | static_cast<T>(rhs)};
}

// Pointer arithmetic operators for `Numeral`s.
template <typename T, typename U>
[[nodiscard]] constexpr auto operator+(T* const p_lhs, Numeral<U> const rhs)
    -> T* {
    return p_lhs + rhs.raw;
}

template <typename T, typename U>
constexpr auto operator+=(T*& p_lhs, Numeral<U> const rhs) -> T*& {
    p_lhs += rhs.raw;
    return p_lhs;
}

template <typename T, typename U>
[[nodiscard]] constexpr auto operator-(T* const p_lhs, Numeral<U> const rhs)
    -> T* {
    return p_lhs - rhs.raw;
}

template <typename T, typename U>
constexpr auto operator-=(T*& p_lhs, Numeral<U> const rhs) -> T*& {
    p_lhs -= rhs.raw;
    return p_lhs;
}

template <typename T, typename U>
[[nodiscard]] constexpr auto operator*(T* const p_lhs, Numeral<U> const rhs)
    -> T* {
    return p_lhs * rhs.raw;
}

template <typename T, typename U>
constexpr auto operator*=(T*& p_lhs, Numeral<U> const rhs) -> T*& {
    p_lhs *= rhs.raw;
    return p_lhs;
}

template <typename T, typename U>
[[nodiscard]] constexpr auto operator/(T* const p_lhs, Numeral<U> const rhs)
    -> T* {
    return p_lhs / rhs.raw;
}

template <typename T, typename U>
constexpr auto operator/=(T*& p_lhs, Numeral<U> const rhs) -> T*& {
    p_lhs /= rhs.raw;
    return p_lhs;
}

template <typename T, typename U>
[[nodiscard]] constexpr auto operator<<(T* const p_lhs, Numeral<U> const rhs)
    -> T* {
    return p_lhs << rhs.raw;
}

template <typename T, typename U>
constexpr auto operator<<=(T*& p_lhs, Numeral<U> const rhs) -> T*& {
    p_lhs <<= rhs.raw;
    return p_lhs;
}

template <typename T, typename U>
[[nodiscard]] constexpr auto operator>>(T* const p_lhs, Numeral<U> const rhs)
    -> T* {
    return p_lhs >> rhs.raw;
}

template <typename T, typename U>
constexpr auto operator>>=(T*& p_lhs, Numeral<U> const rhs) -> T*& {
    p_lhs >>= rhs.raw;
    return p_lhs;
}

template <typename T, typename U>
[[nodiscard]] constexpr auto operator%(T* const p_lhs, Numeral<U> const rhs)
    -> T* {
    return p_lhs % rhs.raw;
}

template <typename T, typename U>
constexpr auto operator%=(T*& p_lhs, Numeral<U> const rhs) -> T*& {
    p_lhs %= rhs.raw;
    return p_lhs;
}

template <typename T, typename U>
[[nodiscard]] constexpr auto operator&(T* const p_lhs, Numeral<U> const rhs)
    -> T* {
    return p_lhs & rhs.raw;
}

template <typename T, typename U>
constexpr auto operator&=(T*& p_lhs, Numeral<U> const rhs) -> T*& {
    p_lhs &= rhs.raw;
    return p_lhs;
}

template <typename T, typename U>
[[nodiscard]] constexpr auto operator|(T* const p_lhs, Numeral<U> const rhs)
    -> T* {
    return p_lhs | rhs.raw;
}

template <typename T, typename U>
constexpr auto operator|=(T*& p_lhs, Numeral<U> const rhs) -> T*& {
    p_lhs |= rhs.raw;
    return p_lhs;
}

// TODO: Make this `constexpr`.
template <typename T>
[[nodiscard]] constexpr auto count_leading_zeros(T const value) -> ssize
    requires(is_integral<T>) {
    auto raw_value = raw_cast(value);
    if constexpr (sizeof(T) == 2) {
        return ssize{__builtin_ia32_lzcnt_u16(raw_value)};
    } else if constexpr (sizeof(T) == 4) {
        return ssize{__builtin_clz(raw_value)};
    } else if constexpr (sizeof(T) == 8) {
        return ssize{__builtin_clzll(raw_value)};
    }
    __builtin_unreachable();
}

// TODO: Make this `constexpr`.
template <typename T>
[[nodiscard]] constexpr auto count_trailing_zeros(T const value) -> ssize
    requires(is_integral<T>) {
    auto raw_value = raw_cast(value);
    if constexpr (sizeof(T) == 4) {
        return ssize{__builtin_ctz(raw_value)};
    } else if constexpr (sizeof(T) == 8) {
        return ssize{__builtin_ctzll(raw_value)};
    }
    __builtin_unreachable();
}

// These macros are defined by the GCC compiler.
using int1 = cat::Numeral<__INT8_TYPE__>;
using uint1 = cat::Numeral<__UINT8_TYPE__>;
using int2 = cat::Numeral<__INT16_TYPE__>;
using uint2 = cat::Numeral<__UINT16_TYPE__>;
using int4 = cat::Numeral<__INT32_TYPE__>;
using uint4 = cat::Numeral<__UINT32_TYPE__>;
using int8 = cat::Numeral<__INT64_TYPE__>;
using uint8 = cat::Numeral<__UINT64_TYPE__>;
// using i128 = cat::Numeral<int128_t>;
// using u128 = cat::Numeral<uint128_t>;

using float4 = cat::Numeral<float>;
using float8 = cat::Numeral<double>;

using usize = cat::Numeral<__SIZE_TYPE__>;
// TODO: Support word size of `4`:
using ssize = cat::Numeral<long int>;

using bool1 = bool;
static_assert(sizeof(bool1) == 1);

struct bool2 {  // NOLINT
    using Raw = uint2;
    uint2 value;
    constexpr bool2() = default;
    constexpr bool2(bool1 const input) : value(input){};
    constexpr operator bool() const {
        return this->value != 0u;
    }
};

struct bool4 {  // NOLINT
    using Raw = uint4;
    uint4 value;
    constexpr bool4() = default;
    constexpr bool4(bool1 const input) : value(input){};
    constexpr bool4(bool2 const input) : value(input){};
    constexpr operator bool() const {
        return this->value != 0u;
    }
};

namespace detail {
    // Satisfies any type that is an integer and is not `intptr` or `uintptr`.
    template <typename T>
    concept NonPtrIntegral =
        is_integral<T> && !IsSpecializationTrait<T, ArithmeticPtr>::value;
}  // namespace detail

// `ArithmeticPtr` can be constructed from any integer type or any pointer. It
// can only convert into `T*`, but it is otherwise interchangeable with
// integers. It satisfies the `is_integral` type trait and
// `Integral` concept.
template <typename T, typename Storage>
struct ArithmeticPtr {
    using Raw = Storage;
    Raw raw;

    constexpr ArithmeticPtr() = default;

    constexpr ArithmeticPtr(ArithmeticPtr<T, Storage> const&) = default;

    constexpr ArithmeticPtr(ArithmeticPtr<T, Storage>&& input)
        : raw(cat::move(input).raw){};

    constexpr ArithmeticPtr(detail::NonPtrIntegral auto const input)
        : raw(static_cast<Storage>(input)){};

    constexpr ArithmeticPtr(T* const& p_input) {
        this->raw = reinterpret_cast<Storage>(p_input);
    }

    constexpr operator T*() {
        return reinterpret_cast<T*>(this->raw);
    }

    constexpr operator T*() const {
        return reinterpret_cast<T* const>(this->raw);
    }

    constexpr auto operator=(ArithmeticPtr<T, Storage> const from)
        -> ArithmeticPtr<T, Storage>& {
        this->raw = from.raw;
        return *this;
    }

    constexpr auto operator=(ArithmeticPtr<T, Storage>&& from)
        -> ArithmeticPtr<T, Storage>& {
        this->raw = cat::move(from).raw;
        return *this;
    }

    constexpr auto operator=(detail::NonPtrIntegral auto const from)
        -> ArithmeticPtr<T, Storage>& {
        this->raw = static_cast<Storage>(from);
        return *this;
    }

    template <typename U>
    [[nodiscard]] constexpr auto operator>(
        ArithmeticPtr<U, Storage> const from) const -> bool1 {
        return this->raw > from.raw;
    }
    [[nodiscard]] constexpr auto operator>(
        detail::NonPtrIntegral auto const from) const -> bool1 {
        return this->raw > static_cast<Storage>(from);
    }

    template <typename U>
    constexpr auto operator>=(ArithmeticPtr<U, Storage> const from) const
        -> bool1 {
        return this->raw >= from.raw;
    }
    constexpr auto operator>=(detail::NonPtrIntegral auto const from) const
        -> bool1 {
        return this->raw >= static_cast<Storage>(from);
    }

    template <typename U>
    [[nodiscard]] constexpr auto operator<(
        ArithmeticPtr<U, Storage> const from) const -> bool1 {
        return this->raw < from.raw;
    }
    [[nodiscard]] constexpr auto operator<(
        detail::NonPtrIntegral auto const from) const -> bool1 {
        return this->raw < static_cast<Storage>(from);
    }

    template <typename U>
    constexpr auto operator<=(ArithmeticPtr<U, Storage> const from) const
        -> bool1 {
        return this->raw <= from.raw;
    }
    constexpr auto operator<=(detail::NonPtrIntegral auto const from) const
        -> bool1 {
        return this->raw <= static_cast<Storage>(from);
    }

    template <typename U>
    constexpr auto operator+=(ArithmeticPtr<U, Storage> const from)
        -> ArithmeticPtr<T, Storage>& {
        this->raw += from.raw;
        return *this;
    }
    constexpr auto operator+=(detail::NonPtrIntegral auto const from)
        -> ArithmeticPtr<T, Storage>& {
        this->raw += static_cast<Storage>(from);
        return *this;
    }

    constexpr auto operator++() -> ArithmeticPtr<T, Storage> {
        return ++(this->raw);
    }

    constexpr auto operator++(int) -> ArithmeticPtr<T, Storage> {
        return (this->raw)++;
    }

    template <typename U>
    constexpr auto operator-=(ArithmeticPtr<U, Storage> const from)
        -> ArithmeticPtr<T, Storage>& {
        this->raw = this->raw - static_cast<Storage>(from);
        return *this;
    }
    constexpr auto operator-=(detail::NonPtrIntegral auto const from)
        -> ArithmeticPtr<T, Storage>& {
        this->raw = this->raw - static_cast<Storage>(from);
        return *this;
    }

    constexpr auto operator--() -> ArithmeticPtr<T, Storage> {
        return --(this->raw);
    }

    constexpr auto operator--(int) -> ArithmeticPtr<T, Storage> {
        return (this->raw)--;
    }

    template <typename U>
    constexpr auto operator*=(ArithmeticPtr<U, Storage> const from)
        -> ArithmeticPtr<T, Storage>& {
        this->raw = this->raw * static_cast<Storage>(from);
        return *this;
    }
    constexpr auto operator*=(detail::NonPtrIntegral auto const from)
        -> ArithmeticPtr<T, Storage>& {
        this->raw = this->raw * static_cast<Storage>(from);
        return *this;
    }

    template <typename U>
    [[nodiscard]] constexpr auto operator/(ArithmeticPtr<U, Storage> const from)
        const -> ArithmeticPtr<T, Storage> {
        return this->raw / from.raw;
    }
    [[nodiscard]] constexpr auto operator/(
        detail::NonPtrIntegral auto const from) const
        -> ArithmeticPtr<T, Storage> {
        return this->raw / static_cast<Storage>(from);
    }

    template <typename U>
    constexpr auto operator/=(ArithmeticPtr<U, Storage> const from)
        -> ArithmeticPtr<T, Storage>& {
        this->raw = this->raw / from.raw;
        return *this;
    }
    constexpr auto operator/=(detail::NonPtrIntegral auto const from)
        -> ArithmeticPtr<T, Storage>& {
        this->raw = this->raw / static_cast<Storage>(from);
        return *this;
    }

    template <typename U>
    [[nodiscard]] constexpr auto operator%(ArithmeticPtr<U, Storage> const from)
        const -> ArithmeticPtr<T, Storage> {
        return this->raw % from.raw;
    }
    [[nodiscard]] constexpr auto operator%(
        detail::NonPtrIntegral auto const from) const
        -> ArithmeticPtr<T, Storage> {
        return this->raw % static_cast<Storage>(from);
    }

    template <typename U>
    constexpr auto operator%=(ArithmeticPtr<U, Storage> const from)
        -> ArithmeticPtr<T, Storage>& {
        this->raw = this->raw % from.raw;
        return *this;
    }
    constexpr auto operator%=(detail::NonPtrIntegral auto const from)
        -> ArithmeticPtr<T, Storage>& {
        this->raw = this->raw % static_cast<Storage>(from);
        return *this;
    }

    template <typename U>
    constexpr auto operator&=(ArithmeticPtr<U, Storage> const from)
        -> ArithmeticPtr<T, Storage>& {
        this->raw = this->raw & from.raw;
        return *this;
    }
    constexpr auto operator&=(detail::NonPtrIntegral auto const from)
        -> ArithmeticPtr<T, Storage>& {
        this->raw = this->raw & static_cast<Storage>(from);
        return *this;
    }

    template <typename U>
    [[nodiscard]] constexpr auto operator|(ArithmeticPtr<U, Storage> const from)
        const -> ArithmeticPtr<T, Storage> {
        return this->raw | from.raw;
    }
    [[nodiscard]] constexpr auto operator|(
        detail::NonPtrIntegral auto const from) const
        -> ArithmeticPtr<T, Storage> {
        return this->raw | static_cast<Storage>(from);
    }

    template <typename U>
    constexpr auto operator|=(ArithmeticPtr<U, Storage> const from)
        -> ArithmeticPtr<T, Storage>& {
        this->raw = this->raw | from.raw;
        return *this;
    }
    constexpr auto operator|=(detail::NonPtrIntegral auto const from)
        -> ArithmeticPtr<T, Storage>& {
        this->raw = this->raw | static_cast<Storage>(from);
        return *this;
    }

    template <typename U>
    [[nodiscard]] constexpr auto operator<<(
        ArithmeticPtr<U, Storage> const from) const
        -> ArithmeticPtr<T, Storage> {
        return this->raw << from.raw;
    }
    [[nodiscard]] constexpr auto operator<<(
        detail::NonPtrIntegral auto const from) const
        -> ArithmeticPtr<T, Storage> {
        return this->raw << static_cast<Storage>(from);
    }

    template <typename U>
    constexpr auto operator<<=(ArithmeticPtr<U, Storage> const from)
        -> ArithmeticPtr<T, Storage>& {
        this->raw = this->raw << from.raw;
        return *this;
    }
    constexpr auto operator<<=(detail::NonPtrIntegral auto const from)
        -> ArithmeticPtr<T, Storage>& {
        this->raw = this->raw << static_cast<Storage>(from);
        return *this;
    }

    template <typename U>
    [[nodiscard]] constexpr auto operator>>(
        ArithmeticPtr<U, Storage> const from) const
        -> ArithmeticPtr<T, Storage> {
        return this->raw >> from.raw;
    }
    [[nodiscard]] constexpr auto operator>>(
        detail::NonPtrIntegral auto const from) const
        -> ArithmeticPtr<T, Storage> {
        return this->raw >> static_cast<Storage>(from);
    }

    template <typename U>
    constexpr auto operator>>=(ArithmeticPtr<U, Storage> const from)
        -> ArithmeticPtr<T, Storage>& {
        this->raw = this->raw >> from.raw;
        return *this;
    }
    constexpr auto operator>>=(detail::NonPtrIntegral auto const from)
        -> ArithmeticPtr<T, Storage>& {
        this->raw = this->raw >> static_cast<Storage>(from);
        return *this;
    }

    constexpr auto operator~() -> ArithmeticPtr<T, Storage>& {
        this->raw = ~(this->raw);
        return *this;
    }
};

// Order-independant operators between an `ArithmeticPtr` and a pointer.
template <typename T, typename Storage>
[[nodiscard]] constexpr auto operator==(ArithmeticPtr<T, Storage> const lhs,
                                        T* const p_rhs) -> bool {
    return lhs.raw == ArithmeticPtr<T, Storage>{p_rhs}.raw;
}

template <typename T, typename Storage>
[[nodiscard]] constexpr auto operator+(ArithmeticPtr<T, Storage> const lhs,
                                       T* const p_rhs)
    -> ArithmeticPtr<T, Storage> {
    return lhs.raw + ArithmeticPtr<T, Storage>{p_rhs}.raw;
}

template <typename T, typename Storage>
[[nodiscard]] constexpr auto operator-(ArithmeticPtr<T, Storage> const lhs,
                                       T* const p_rhs)
    -> ArithmeticPtr<T, Storage> {
    return lhs.raw - ArithmeticPtr<T, Storage>{p_rhs}.raw;
}

template <typename T, typename Storage>
[[nodiscard]] constexpr auto operator*(ArithmeticPtr<T, Storage> const lhs,
                                       T* const p_rhs)
    -> ArithmeticPtr<T, Storage> {
    return lhs.raw * ArithmeticPtr<T, Storage>{p_rhs}.raw;
}

template <typename T, typename Storage>
[[nodiscard]] constexpr auto operator&(ArithmeticPtr<T, Storage> const lhs,
                                       T* const p_rhs)
    -> ArithmeticPtr<T, Storage> {
    return lhs.raw & ArithmeticPtr<T, Storage>{p_rhs}.raw;
}

template <typename T, typename Storage>
[[nodiscard]] constexpr auto operator|(ArithmeticPtr<T, Storage> const lhs,
                                       T* const p_rhs)
    -> ArithmeticPtr<T, Storage> {
    return lhs.raw | ArithmeticPtr<T, Storage>{p_rhs}.raw;
}

// Order-independant operators between an `ArithmeticPtr<T>` and an integer.
template <typename T, typename Storage>
[[nodiscard]] constexpr auto operator==(ArithmeticPtr<T, Storage> const lhs,
                                        detail::NonPtrIntegral auto const rhs)
    -> bool {
    return lhs.raw == rhs;
}

template <typename T, typename Storage>
[[nodiscard]] constexpr auto operator+(ArithmeticPtr<T, Storage> const lhs,
                                       detail::NonPtrIntegral auto const rhs)
    -> ArithmeticPtr<T, Storage> {
    return lhs.raw + ArithmeticPtr<T, Storage>{rhs}.raw;
}

template <typename T, typename U, typename Storage>
[[nodiscard]] constexpr auto operator+(ArithmeticPtr<T, Storage> const lhs,
                                       ArithmeticPtr<U, Storage> const rhs)
    -> ArithmeticPtr<T, Storage> {
    return lhs.raw + rhs.raw;
}

template <typename T, typename Storage>
[[nodiscard]] constexpr auto operator-(ArithmeticPtr<T, Storage> const lhs,
                                       detail::NonPtrIntegral auto const rhs)
    -> ArithmeticPtr<T, Storage> {
    return lhs.raw - static_cast<Storage>(rhs);
}

template <typename T, typename U, typename Storage>
[[nodiscard]] constexpr auto operator-(ArithmeticPtr<T, Storage> const lhs,
                                       ArithmeticPtr<U, Storage> const rhs)
    -> ArithmeticPtr<T, Storage> {
    return lhs.raw - rhs.raw;
}

template <typename T, typename Storage>
[[nodiscard]] constexpr auto operator*(ArithmeticPtr<T, Storage> const lhs,
                                       detail::NonPtrIntegral auto const rhs)
    -> ArithmeticPtr<T, Storage> {
    return lhs.raw * ArithmeticPtr<T, Storage>{rhs}.raw;
}

template <typename T, typename Storage>
[[nodiscard]] constexpr auto operator&(ArithmeticPtr<T, Storage> const lhs,
                                       detail::NonPtrIntegral auto const rhs)
    -> ArithmeticPtr<T, Storage> {
    return lhs.raw & ArithmeticPtr<T, Storage>{rhs}.raw;
}

template <typename T, typename Storage>
[[nodiscard]] constexpr auto operator|(ArithmeticPtr<T, Storage> const lhs,
                                       detail::NonPtrIntegral auto const rhs)
    -> ArithmeticPtr<T, Storage> {
    return lhs.raw | ArithmeticPtr<T, Storage>{rhs}.raw;
}

// `__INTPTR_TYPE__` is defined by the GCC compiler.
template <typename T>
using intptr = cat::ArithmeticPtr<T, __INTPTR_TYPE__>;
// `__UINTPTR_TYPE__` is defined by the GCC compiler.
template <typename T>
using uintptr = cat::ArithmeticPtr<T, __UINTPTR_TYPE__>;

}  // namespace cat

using cat::bool1;
using cat::bool2;
using cat::bool4;
using cat::float4;
using cat::float8;
using cat::int1;
using cat::int2;
using cat::int4;
using cat::int8;
using cat::ssize;
using cat::uint1;
using cat::uint2;
using cat::uint4;
using cat::uint8;
using cat::usize;

template <typename T>
using intptr = cat::intptr<T>;
template <typename T>
using uintptr = cat::uintptr<T>;
