// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/allocator>

namespace cat {

class linear_allocator : public allocator_interface<linear_allocator> {
   friend allocator_interface<linear_allocator>;

   // Friend factory functions.
   friend constexpr auto
      make_linear_allocator(uintptr<void>, idx) -> linear_allocator;

   friend constexpr auto
   make_linear_allocator(span<byte>&) -> linear_allocator;

 private:
   // Initialize a `linear_allocator`. This should only be called from
   // `cat::make_linear_allocator`.
   constexpr linear_allocator(uintptr<void> p_address, idx arena_bytes)
       : m_p_arena_begin(p_address + arena_bytes), m_p_arena_end(p_address) {
      this->reset();
   }

   template <typename T>
   struct linear_memory_handle : detail::base_memory_handle<T> {
      T* p_storage;

      // TODO: Simplify with CRTP or deducing-this.
      auto
      get() -> decltype(auto) {
         return *this;
      }

      auto
      get() const -> decltype(auto) {
         return *this;
      }
   };

 public:
   // `linear_allocator` is move-only.
   constexpr linear_allocator(linear_allocator const&) = delete(
      "`cat::linear_allocator` should be constructed using "
      "`cat::make_linear_allocator`.");
   constexpr linear_allocator(linear_allocator&&) = default;

   // Reset the bumped pointer to the beginning of this arena.
   constexpr void
   reset() {
      __asan_poison_memory_region(static_cast<void const*>(m_p_arena_end),
                                  m_p_arena_begin - m_p_arena_end);
      m_p_arena_current = m_p_arena_begin;
   }

 private:
   auto
   allocation_bytes(uword alignment, idx allocation_bytes)
      -> maybe_non_zero<idx> {
      uintptr<void> allocation =
         align_down(m_p_arena_current - uword(allocation_bytes), alignment);

      // The allocation size is the difference between the current pointer
      // and the new pointer.
      if (allocation >= m_p_arena_end) {
         return static_cast<idx>(m_p_arena_current - allocation);
      }
      return nullopt;
   }

   // Try to allocate memory and bump the pointer down.
   auto
   allocate(idx allocation_bytes) -> maybe_ptr<void> {
      if (m_p_arena_current - allocation_bytes >= m_p_arena_end) {
         m_p_arena_current -= allocation_bytes;
         // Return a pointer that is then used to in-place construct a `T`.
         return m_p_arena_current;
      }
      return nullptr;
   }

   // Try to allocate memory aligned to some boundary and bump the pointer
   // down.
   auto
   aligned_allocate(uword alignment, idx allocation_bytes) -> maybe_ptr<void> {
      uintptr<void> allocation =
         align_down(m_p_arena_current - allocation_bytes, alignment);

      if (allocation >= m_p_arena_end) {
         m_p_arena_current = allocation;
         // Return a pointer that is then used for in-place construction.
         return static_cast<void*>(allocation);
      }
      return nullptr;
   }

   // Try to allocate memory and bump the pointer down, and return the memory
   // with size allocated.
   auto
   aligned_allocate_feedback(uword alignment, idx allocation_bytes)
      -> maybe_sized_allocation<void*> {
      uintptr<void> allocation =
         align_down(m_p_arena_current - allocation_bytes, alignment);

      if (allocation >= m_p_arena_end) {
         uword bytes_allocated = m_p_arena_current - allocation;
         m_p_arena_current = allocation;

         return maybe_sized_allocation<void*>(tuple{
            // Return a pointer that is then used for in-place construction.
            static_cast<void*>(m_p_arena_current),
            static_cast<idx>(bytes_allocated)});
      }
      return nullopt;
   }

   // In general, memory cannot be deallocated in a linear allocator, so
   // this function is no-op.
   void
   deallocate(void const*, uword) {
   }

   // Produce a handle to allocated memory.
   template <typename T>
   auto
   make_handle(T* p_handle_storage) -> linear_memory_handle<T> {
      return linear_memory_handle<T>{{}, p_handle_storage};
   }

   // Access some memory.
   template <typename T>
   auto
   access(linear_memory_handle<T>& memory) -> T* {
      return memory.p_storage;
   }

   template <typename T>
   auto
   access(linear_memory_handle<T> const& memory) const -> T const* {
      return memory.p_storage;
   }

 public:
   static constexpr bool has_pointer_stability = true;

 private:
   uintptr<void> const m_p_arena_begin;
   uintptr<void> const m_p_arena_end;
   uintptr<void> m_p_arena_current = m_p_arena_begin;
};

[[nodiscard]]
constexpr auto
make_linear_allocator(uintptr<void> p_address, idx arena_bytes)
   -> linear_allocator {
   return {p_address, arena_bytes};
}

[[nodiscard]]
constexpr auto
make_linear_allocator(span<byte>& span) -> linear_allocator {
   return {span.data(), span.size()};
}

[[nodiscard,
  deprecated(
     "Creating a `cat::linear_allocator` with a pr-value may "
     "unintentionally leak memory. Copy an l-value `cat::span` instead.")]]
constexpr auto
make_linear_allocator(span<byte>&& span) -> linear_allocator {
   return make_linear_allocator(span);
}

}  // namespace cat
